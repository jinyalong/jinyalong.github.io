<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MyBaties学习</title>
    <url>/2021/02/27/MyBaties%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是-MyBatis？"><a href="#1-1、什么是-MyBatis？" class="headerlink" title="1.1、什么是 MyBatis？"></a>1.1、什么是 MyBatis？</h3><ul>
<li><p>MyBatis 是一款优秀的<strong>持久层框架</strong>，它支持自定义 SQL、存储过程以及高级映射。</p>
</li>
<li><p>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</p>
</li>
<li><p>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
</li>
<li><p>Daos（Data Access Objects）</p>
</li>
</ul>
<p><strong>GitHub地址：<a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3</a></strong></p>
<h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><p>数据持久化</p>
<ul>
<li>持久层是将程序数据在持久状态和瞬时状态转换的过程</li>
<li>内存断电即失</li>
<li>一般指的保存到文本文件或者数据库</li>
</ul>
<h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>负责持久化的代码块！！！</p>
<h3 id="1-4、特点"><a href="#1-4、特点" class="headerlink" title="1.4、特点"></a>1.4、特点</h3><ul>
<li><p>简单易学，灵活</p>
</li>
<li><p>SQL与代码分离，提高可维护性</p>
</li>
</ul>
<ul>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。</li>
</ul>
<h2 id="2、第一个Mybaties程序"><a href="#2、第一个Mybaties程序" class="headerlink" title="2、第一个Mybaties程序"></a>2、第一个Mybaties程序</h2><h3 id="2-1、准备"><a href="#2-1、准备" class="headerlink" title="2.1、准备"></a>2.1、准备</h3><blockquote>
<p>新建数据库以及数据表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mybatis</span><br><span class="line"><span class="keyword">USE</span> mybatis</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>( <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>) )<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8; </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`password`</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'CodeFriday'</span>,<span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'张三'</span>,<span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'李四'</span>,<span class="string">'123456'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>新建Maven空项目导入相关依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>从 XML 中构建 SqlSessionFactory</p>
</blockquote>
<p><strong>xml配置文件：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>charsetEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"codefriday"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>读取这个xml文件并生成SqlSessionFactory，并且能够通过SqlSessionFactory生成SqlSession</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编写实体类以及Dao层接口</p>
</blockquote>
<p>实体类映射：User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>xml配置绑定接口</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.codefriday.dao.UserDao"</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">"getUserList"</span> resultType=<span class="string">"com.codefriday.pojo.User"</span>&gt;</span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;mapper namespace=&quot;com.codefriday.dao.UserDao&quot;&gt;</code>相当于实现了该接口</li>
<li>第二部分即是方法内容！</li>
<li><strong>大坑：xml文件中中文注释编译后乱码会报错！！！</strong></li>
</ul>
<h3 id="2-2、测试"><a href="#2-2、测试" class="headerlink" title="2.2、测试"></a>2.2、测试</h3><p>首先，需要在mybaties配置文件中注册mapper：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/codefriday/dao/userMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其次需要在maven配置文件中添加一段代码使得能够导出xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>增删改都需要提交事务！</p>
</blockquote>
<h3 id="2-3、参数种类多时"><a href="#2-3、参数种类多时" class="headerlink" title="2.3、参数种类多时"></a>2.3、参数种类多时</h3><p>当参数类型多时，可以选择传入一个自己封装的Map作为参数，然后从map中根据key来取出真正的参数来使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">"userId"</span>,<span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">"userName"</span>,<span class="string">"用户5"</span>);</span><br><span class="line">    map.put(<span class="string">"pwd"</span>,<span class="string">"123123"</span>);</span><br><span class="line">    mapper.addUser(map);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.codefriday.pojo.User"</span> &gt;</span></span><br><span class="line">    insert into mybatis.user(`id`,`name`,`password`) value(#&#123;userId&#125;,#&#123;userName&#125;,#&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4、模糊查询"><a href="#2-4、模糊查询" class="headerlink" title="2.4、模糊查询"></a>2.4、模糊查询</h3><p><strong>方式一：传入参数拼接好</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userListLike = mapper.getUserListLike(<span class="string">"%李%"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>方式二：xml文件中拼接</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserListLike"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"com.codefriday.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where name like "%"#&#123;name&#125;"%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、Mybatis配置解析"><a href="#3、Mybatis配置解析" class="headerlink" title="3、Mybatis配置解析"></a>3、Mybatis配置解析</h2><h3 id="3-1、环境配置（environments）"><a href="#3-1、环境配置（environments）" class="headerlink" title="3.1、环境配置（environments）"></a>3.1、环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境，<strong>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>每套Environment对应的有一个ID，包含以下两个部分：</p>
<blockquote>
<p>事务管理器配置</p>
</blockquote>
<ul>
<li>事务管理器的配置（比如：type=”JDBC”）。</li>
</ul>
<p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）</p>
<p><strong>默认JDBC。</strong></p>
<blockquote>
<p>数据源（dataSource）</p>
</blockquote>
<p>有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）。</p>
<p><strong>UNPOOLED</strong>– 无连接池！</p>
<p><strong>POOLED</strong>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来。</p>
<p><strong>JNDI</strong> – – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用。</p>
<h3 id="3-2、属性（properties）"><a href="#3-2、属性（properties）" class="headerlink" title="3.2、属性（properties）"></a>3.2、属性（properties）</h3><p>属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性（properties文件），也可以在 properties 元素的子元素（properties标签）中设置。</p>
<blockquote>
<p>引入外部配置文件</p>
</blockquote>
<p>1、编写db.properties放在resource目录下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">codefriday</span></span><br></pre></td></tr></table></figure>

<p>2、在mybatis配置文件中引入：(properties标签必须放在最前面)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/codefriday/dao/userMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以在引入文件中继续添加属性配置</li>
<li>如果有相同字段，优先使用外部配置文件！</li>
</ul>
<h3 id="3-3、类型别名（typeAliases）"><a href="#3-3、类型别名（typeAliases）" class="headerlink" title="3.3、类型别名（typeAliases）"></a>3.3、类型别名（typeAliases）</h3><ul>
<li><p>类型别名可为 Java 类型设置一个缩写名字</p>
</li>
<li><p>它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p>
</li>
</ul>
<p><code>typeAliases</code>标签，放在xml文件第三位。</p>
<p>第一种：为一个实体类起别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.codefriday.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二种：扫描一个包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.codefriday.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个包下的所有实体类默认别名就是这个类的名字首字母小写。</p>
<p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"author"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4、设置（settings）"><a href="#3-4、设置（settings）" class="headerlink" title="3.4、设置（settings）"></a>3.4、设置（settings）</h3><ul>
<li><p>cacheEnabled：全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。+ </p>
</li>
<li><p>logImpl：指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</p>
</li>
</ul>
<h3 id="3-5、映射器（mappers）"><a href="#3-5、映射器（mappers）" class="headerlink" title="3.5、映射器（mappers）"></a>3.5、映射器（mappers）</h3><p>MapperRegister：每个Mapper.xml文件都需要在Mybatis核心配置文件中注册。 </p>
<p>方式一：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：使用class文件绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.AuthorMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.BlogMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.PostMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意点：</strong></p>
<ul>
<li>接口和他的Mapper配置文件必须同名</li>
<li>接口和他的配置文件必须在同一个包</li>
</ul>
<p>方式三：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.mybatis.builder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意点：</strong></p>
<ul>
<li>接口和他的Mapper配置文件必须同名</li>
<li>接口和他的配置文件必须在同一个包</li>
</ul>
<h3 id="3-6、作用域（Scope）和生命周期"><a href="#3-6、作用域（Scope）和生命周期" class="headerlink" title="3.6、作用域（Scope）和生命周期"></a>3.6、作用域（Scope）和生命周期</h3><p>错误的使用会导致非常严重的并发问题。</p>
<h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><p>一旦创建了 SqlSessionFactory，就不再需要它了，一般作为局部变量。6</p>
<h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><p> 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 可以理解为数据库连接池。</p>
<p>SqlSessionFactory 的最佳作用域是应用作用域，最简单的就是使用单例模式或者静态单例模式。</p>
<h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><p>每个线程都应该有它自己的 SqlSession 实例。</p>
<p>它的最佳的作用域是请求或方法作用域。</p>
<p>每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;<span class="comment">//会自动关闭括号中的资源</span></span><br><span class="line">  <span class="comment">// 你的应用逻辑代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、ResultMap"><a href="#4、ResultMap" class="headerlink" title="4、ResultMap"></a>4、ResultMap</h2><p>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</p>
<p>Mybatis查询返回的结果集解析时，直接把实体类定义的属性当做数据库字段来查找，因此如果实体类属性名和数据库字段名不统一，会返回null。</p>
<ul>
<li><p>第一种解决方案：SQL语句中重命名字段和实体类属性一致。</p>
</li>
<li><p>第二种解决方案：结果集映射</p>
</li>
</ul>
<blockquote>
<p>结果集映射</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id&#x3D;&quot;getUserList&quot; type&#x3D;&quot;User&quot;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;name&quot; property&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;password&quot; property&#x3D;&quot;pwd&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>

<p><code>column</code>对应数据库字段，<code>property</code>对应实体类的属性。</p>
<h2 id="5、日志"><a href="#5、日志" class="headerlink" title="5、日志"></a>5、日志</h2><h3 id="5-1、日志工厂"><a href="#5-1、日志工厂" class="headerlink" title="5.1、日志工厂"></a>5.1、日志工厂</h3><p>logImpl：指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</p>
<ul>
<li>SLF4J</li>
<li><strong>LOG4J</strong> </li>
<li>LOG4J2</li>
<li>JDK_LOGGING</li>
<li>COMMONS_LOGGING</li>
<li><strong>STDOUT_LOGGING</strong> </li>
<li>NO_LOGGING</li>
</ul>
<p>使用<code>STDOUT_LOGGING</code>：标准日志工厂实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/27/MyBaties%E5%AD%A6%E4%B9%A0/E:%5CBlog%5Csource_posts%5CMyBaties%E5%AD%A6%E4%B9%A0%5Cimage-20210228135454390.png" alt="image-20210228135454390"></p>
<h3 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h3><ul>
<li>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</li>
<li>可以控制每一条日志的输出格式</li>
<li>定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</li>
<li>可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<p>1、需要先导入依赖包</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.12.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、log4j配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/codefriday.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

<p>3、Mybatis核心配置文件使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、测试运行</p>
<p><img src="/2021/02/27/MyBaties%E5%AD%A6%E4%B9%A0/image-20210228142756908.png" alt="image-20210228142756908"></p>
<blockquote>
<p>测试Log4J</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//日志对象：当前类的class</span></span><br><span class="line">    <span class="keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog4j</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//三种日志级别</span></span><br><span class="line">        logger.info(<span class="string">"info:TestLog4j"</span>);</span><br><span class="line">        logger.debug(<span class="string">"info:TestLog4j"</span>);</span><br><span class="line">        logger.error(<span class="string">"info:TestLog4j"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、分页"><a href="#6、分页" class="headerlink" title="6、分页"></a>6、分页</h2><p><strong>Limit分页：</strong><code>select * from user limit startIndex,pageSize</code></p>
<p><strong>使用Mybatis分页：</strong></p>
<ul>
<li><p>方法一：在SQL中使用Limit实现，传入两个参数即可</p>
</li>
<li><p>方法二：RowBounds实现</p>
</li>
</ul>
<p>1、接口定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserLimit</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、映射SQL</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserLimit"</span> <span class="attr">resultType</span>=<span class="string">"com.codefriday.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、测试运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    List&lt;User&gt; list = sqlSession.selectList(<span class="string">"com.codefriday.dao.UserMapper.getUserLimit"</span>, <span class="keyword">null</span>, <span class="keyword">new</span> RowBounds(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7、使用注解开发"><a href="#7、使用注解开发" class="headerlink" title="7、使用注解开发"></a>7、使用注解开发</h2><p>1、使用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、绑定接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.codefriday.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际本质：反射实现</p>
<p>底层：动态代理</p>
<p>注解实现CRUD</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codefriday.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//增加一个用户</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(id,name,password) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//修改用户</span></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set name = #&#123;name&#125;,password = #&#123;password&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//查询单个</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>必须在Mybatis核心配置文件注册该接口！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.codefriday.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>@Param()</code>注解</p>
</blockquote>
<ul>
<li>基本类型的参数或者String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型可以忽略</li>
<li>SQL中引用的是注解中重新定义的参数名</li>
</ul>
<p><code>#{}</code>防止SQL注入。</p>
<h2 id="8、Lombok"><a href="#8、Lombok" class="headerlink" title="8、Lombok"></a>8、Lombok</h2><p>1、IDEA中安装插件</p>
<p><img src="/2021/02/27/MyBaties%E5%AD%A6%E4%B9%A0/image-20210228225255551.png" alt="image-20210228225255551"></p>
<p>2、插件maven依赖导包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用@Data注解：</p>
<p><img src="/2021/02/27/MyBaties%E5%AD%A6%E4%B9%A0/E:%5CBlog%5Csource_posts%5CMyBaties%E5%AD%A6%E4%B9%A0%5Cimage-20210228225054361.png" alt="image-20210228225054361"></p>
<p>常用注解：</p>
<ul>
<li>@ToString</li>
<li>@AllArgsConstructor</li>
<li>@NoArgsConstructor</li>
<li>@EqualsAndHashCode</li>
</ul>
<h2 id="9、多对一处理"><a href="#9、多对一处理" class="headerlink" title="9、多对一处理"></a>9、多对一处理</h2><h3 id="9-1、测试环境搭建"><a href="#9-1、测试环境搭建" class="headerlink" title="9.1、测试环境搭建"></a>9.1、测试环境搭建</h3><p>定义实体类老师和学生，学生中的属性包含一个老师对象。</p>
<blockquote>
<p>1、数据库</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`teacher`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(<span class="string">`id`</span>, <span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'秦老师'</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`tid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fktid`</span> (<span class="string">`tid`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fktid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`tid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`teacher`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'小明'</span>, <span class="string">'1'</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'小红'</span>, <span class="string">'1'</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'小张'</span>, <span class="string">'1'</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'小李'</span>, <span class="string">'1'</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'小王'</span>, <span class="string">'1'</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2、实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-2、按照查询嵌套处理"><a href="#9-2、按照查询嵌套处理" class="headerlink" title="9.2、按照查询嵌套处理"></a>9.2、按照查询嵌套处理</h3><p><strong>类似于SQL的子查询，将SQL分开处理</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentList"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span>&gt;</span></span><br><span class="line">    select * from student;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>property=”teacher”：对应Student的属性名</li>
<li>column=”tid”：传入子查询的参数</li>
<li>javaType=”Teacher”：Student对象中的teacher属性的类型</li>
<li>select=”getTeacher”：查询标签的id</li>
<li>在getTeacher这个select标签中，会自动匹配参数，也就是tid换其他名字仍然能找到</li>
</ul>
<h3 id="9-3、按照结果嵌套处理"><a href="#9-3、按照结果嵌套处理" class="headerlink" title="9.3、按照结果嵌套处理"></a>9.3、按照结果嵌套处理</h3><p><strong>一句SQL联合查询之后，再处理结果集的映射</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentList2"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher2"</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.id tid,t.name tname</span><br><span class="line">    from student as s,teacher as t</span><br><span class="line">    where s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher2"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="10、一对多"><a href="#10、一对多" class="headerlink" title="10、一对多"></a>10、一对多</h2><h3 id="10-1、环境搭建"><a href="#10-1、环境搭建" class="headerlink" title="10.1、环境搭建"></a>10.1、环境搭建</h3><blockquote>
<p>实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时需要通过一个id查出老师，以及老师关联的所有学生。</p>
<h3 id="10-2、按照查询嵌套处理"><a href="#10-2、按照查询嵌套处理" class="headerlink" title="10.2、按照查询嵌套处理"></a>10.2、按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">select</span>=<span class="string">"SelectStudents"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"SelectStudents"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    select * from student where tid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="10-3、按照结果嵌套处理"><a href="#10-3、按照结果嵌套处理" class="headerlink" title="10.3、按照结果嵌套处理"></a>10.3、按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher2"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent2"</span>&gt;</span></span><br><span class="line">    select t.id tid,t.name tname,s.id sid,s.name sname,s.tid stid</span><br><span class="line">    from teacher t,student s</span><br><span class="line">    where t.id=s.tid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent2"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"stid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a>总结对比</h3><ul>
<li><p>关联：association 【多对一】</p>
</li>
<li><p>集合：collection 【一对多】</p>
</li>
<li><p>javaType &amp; ofType</p>
<ul>
<li>JavaType：指定实体类属性的类型</li>
<li>ofType映射到属性中List或其他集合的实体类，即泛型信息</li>
</ul>
</li>
</ul>
<h2 id="11、动态SQL"><a href="#11、动态SQL" class="headerlink" title="11、动态SQL"></a>11、动态SQL</h2><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`blog`</span></span><br><span class="line">    ( <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT, </span><br><span class="line">     <span class="string">`title`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">     <span class="string">`author`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">     <span class="string">`state`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">     <span class="string">`tag`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">     PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>) </span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8; </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`blog`</span>(<span class="string">`title`</span>,<span class="string">`author`</span>,<span class="string">`state`</span>,<span class="string">`tag`</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'html'</span>,<span class="string">'code'</span>,<span class="string">'ACTIVE'</span>,<span class="string">'第三阶段'</span>),</span><br><span class="line">(<span class="string">'css'</span>,<span class="string">'friday'</span>,<span class="string">'ACTIVE'</span>,<span class="string">'第三阶段'</span>),</span><br><span class="line">(<span class="string">'javascript'</span>,<span class="string">'code'</span>,<span class="string">'ACTIVE'</span>,<span class="string">'第三阶段'</span>),</span><br><span class="line">(<span class="string">'javase'</span>,<span class="string">'friday'</span>,<span class="string">'ACTIVE'</span>,<span class="string">'第一阶段'</span>),</span><br><span class="line">(<span class="string">'多线程'</span>,<span class="string">'jyl'</span>,<span class="string">'ACTIVE'</span>,<span class="string">'第一阶段'</span>)</span><br></pre></td></tr></table></figure>

<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="keyword">private</span> String tag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>动态SQL：根据不同的条件生成不同的SQL语句</strong></p>
<p>一般应用场景：查询时有些条件可能需要可能不需要，在JDBC中需要自己判断利用StringBuffer动态追加数据等。</p>
<h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>test</code>为真，则包好标签体内的SQL语句</p>
<h3 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h3><p>从多个条件选择一个</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试代码</p>
</blockquote>
<p>接口定义：<code>List&lt;Blog&gt; getBlogList(@Param(&quot;title&quot;)String title,@Param(&quot;tag&quot;) String tag);</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBlogList"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    where state = 'ACTIVE'</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title!=null"</span>&gt;</span></span><br><span class="line">            and title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"tag!=null"</span>&gt;</span></span><br><span class="line">            and tag = #&#123;tag&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and author = 'code'</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h3><p>上一个案例中测试有一个where条件基础上追加and，但是若无此条件可能会导致生成不合法SQL</p>
<p>如：<code>select * from blog and title = #{title}</code></p>
<p>解决办法：<code>where标签</code></p>
<p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBlogList"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title!=null"</span>&gt;</span></span><br><span class="line">                and title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"tag!=null"</span>&gt;</span></span><br><span class="line">                and tag = #&#123;tag&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and author = 'code'</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>where元素定制——trim</strong> </p>
<p>上述where功能等价于下面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;trim prefix&#x3D;&quot;WHERE&quot; prefixOverrides&#x3D;&quot;AND |OR &quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;trim&gt;</span><br></pre></td></tr></table></figure>

<p>用于动态更新语句的类似解决方案叫做 <em>set</em>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthorIfNecessary"</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bio != null"</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>来看看与 <em>set</em> 元素等价的自定义 <em>trim</em> 元素吧：（suffixOverrides表示去掉最后一个，）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;trim prefix&#x3D;&quot;SET&quot; suffixOverrides&#x3D;&quot;,&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;trim&gt;</span><br></pre></td></tr></table></figure>

<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>构建 IN 条件语句时需要遍历</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPostIn"</span> <span class="attr">resultType</span>=<span class="string">"domain.blog.Post"</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>声明可以在元素体内使用的集合项（item）和索引（index）变量。</p>
<h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>要在带注解的映射器接口类中使用动态 SQL，可以使用 <em>script</em> 元素。</p>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p><code>bind</code> 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogsLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%' + _parameter.getTitle() + '%'"</span> /&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="12、缓存"><a href="#12、缓存" class="headerlink" title="12、缓存"></a>12、缓存</h2><p>一次查询的结果，暂存到内存中。</p>
<h3 id="12-1、Mybatis缓存"><a href="#12-1、Mybatis缓存" class="headerlink" title="12.1、Mybatis缓存"></a>12.1、Mybatis缓存</h3><p>Mybatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p>
<ul>
<li>一级缓存：SQLSession级别的缓存，也称本地缓存，默认开启的</li>
<li>二级缓存：基于namespace的缓存，需要手动开启和配置，在SQL 映射文件中添加一行：<code>&lt;cache/&gt;</code></li>
<li>可以自定义缓存</li>
</ul>
<h3 id="12-2、一级缓存"><a href="#12-2、一级缓存" class="headerlink" title="12.2、一级缓存"></a>12.2、一级缓存</h3><ul>
<li><p>SQLSession级别的缓存，也称本地缓存</p>
</li>
<li><p>映射语句文件中的所有 select 语句的结果将会被缓存。</p>
</li>
<li><p>映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。</p>
</li>
</ul>
<h3 id="12-3、二级缓存"><a href="#12-3、二级缓存" class="headerlink" title="12.3、二级缓存"></a>12.3、二级缓存</h3><ul>
<li><p>二级缓存也称全局缓存</p>
</li>
<li><p>针对一个接口映射的缓存，缓存作用域扩大，粒度更小。</p>
</li>
<li><p>二级缓存是用来解决一级缓存不能跨会话共享的问题的，范围是namespace 级别的</p>
</li>
<li><p>可以被多个SqlSession 共享（只要是同一个接口里面的相同方法，都可以共享），生命周期和应用同步。</p>
</li>
</ul>
<p>首先需要在Mybatis核心配置文件显式开启全局缓存<code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true &quot;/&gt;</code></p>
<p>然后在SQL 映射文件中添加一行：<code>&lt;cache/&gt;</code>即为该映射文件开启缓存。</p>
]]></content>
      <categories>
        <category>第五阶段</category>
      </categories>
      <tags>
        <tag>第五阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传，邮件发送</title>
    <url>/2021/02/25/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%8C%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
    <content><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>使用的工具类jar包：</p>
<p><strong>Commons-IO：<a href="https://repo1.maven.org/maven2/commons-io/commons-io/2.8.0/commons-io-2.8.0.jar" target="_blank" rel="noopener">https://repo1.maven.org/maven2/commons-io/commons-io/2.8.0/commons-io-2.8.0.jar</a></strong></p>
<p><strong>Commons-FileUpload：<a href="https://repo1.maven.org/maven2/commons-fileupload/commons-fileupload/1.4/commons-fileupload-1.4.jar" target="_blank" rel="noopener">https://repo1.maven.org/maven2/commons-fileupload/commons-fileupload/1.4/commons-fileupload-1.4.jar</a></strong></p>
<p>1、用户上传的文件应该不被外界直接访问到，比如可以放在WEB-INF目录下</p>
<p>2、应该保证文件名字的唯一性（时间戳，UUID，MD5，自定义位运算加密算法等）</p>
<p>3、限制文件上传的最大值</p>
<p>4、限制文件的上传类型</p>
<p><img src="/2021/02/25/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%8C%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20210225165802639.png" alt="image-20210225165802639"></p>
<blockquote>
<p>代码测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.ProgressListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//如果提交的表单不是上传文件，则不执行</span></span><br><span class="line">        <span class="keyword">if</span>(!ServletFileUpload.isMultipartContent(req))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建上传文件的保存路径,不存在时新建一个路径</span></span><br><span class="line">        String _savePath = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/WEB-INF/upload"</span>);</span><br><span class="line">        System.out.println(<span class="string">"文件保存的路径："</span>+_savePath);</span><br><span class="line">        File savePath = <span class="keyword">new</span> File(_savePath);</span><br><span class="line">        <span class="keyword">if</span>(!savePath.exists())&#123;</span><br><span class="line">            savePath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//临时文件夹</span></span><br><span class="line">        String _temp = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/WEB-INF/tmp"</span>);</span><br><span class="line">        System.out.println(<span class="string">"临时文件夹："</span>+_temp);</span><br><span class="line">        File tmp = <span class="keyword">new</span> File(_temp);</span><br><span class="line">        <span class="keyword">if</span>(!tmp.exists())&#123;</span><br><span class="line">            tmp.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 处理上传的文件，一般通过流来获取，也就是拿到request对象的输入流</span></span><br><span class="line"><span class="comment">         * 这里使用工具类commons-fileuplaod</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1、创建DiskFileItemFactory对象，处理文件上传路径或者大小的限制</span></span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">        factory.setSizeThreshold(<span class="number">1024</span>*<span class="number">1024</span>);<span class="comment">//缓存区大小1M</span></span><br><span class="line">        factory.setRepository(tmp);<span class="comment">//超过大小存在临时文件夹</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ServletFIleUpload把上传的表单每个输入项都封装成FilItem对象</span></span><br><span class="line"><span class="comment">         * 构建一个ServletFIleUpload需要传入DiskFileItemFactory对象作为参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2、获得ServletFIleUpload</span></span><br><span class="line">        ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">        <span class="comment">//监听上传</span></span><br><span class="line">        upload.setProgressListener(<span class="keyword">new</span> ProgressListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> l, <span class="keyword">long</span> l1, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"总大小："</span>+l1+<span class="string">"，已经上传："</span>+l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//解决乱码</span></span><br><span class="line">        upload.setHeaderEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//单个文件大小</span></span><br><span class="line">        upload.setFileSizeMax(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//总大小</span></span><br><span class="line">        upload.setSizeMax(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3、处理上传文件</span></span><br><span class="line">        List&lt;FileItem&gt; fileItems = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileItems = upload.parseRequest(req);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(fileItems.size());</span><br><span class="line">        <span class="keyword">for</span> (FileItem fileItem : fileItems) &#123;</span><br><span class="line">            <span class="keyword">if</span>(fileItem.isFormField())&#123;<span class="comment">//是一个普通表单项</span></span><br><span class="line">                String name = fileItem.getFieldName();<span class="comment">//表单控件的name</span></span><br><span class="line">                String value = fileItem.getString(<span class="string">"UTF-8"</span>);<span class="comment">//获得utf-8编码的值</span></span><br><span class="line">                System.out.println(name+<span class="string">":"</span>+value);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//是一个文件</span></span><br><span class="line">                <span class="comment">//=========处理文件=========</span></span><br><span class="line">                String uploadFileName = fileItem.getName();</span><br><span class="line">                System.out.println(<span class="string">"上传的文件："</span>+uploadFileName);</span><br><span class="line">                <span class="keyword">if</span>(uploadFileName.trim().equals(<span class="string">""</span>)||uploadFileName==<span class="keyword">null</span>)&#123;<span class="comment">//无效的文件名</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String fileName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class="string">'/'</span>)+<span class="number">1</span>);</span><br><span class="line">                String fileExtName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class="string">'.'</span>));</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 在此可做格式判断</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                System.out.println(<span class="string">"文件信息：[文件名："</span>+fileName+<span class="string">"，文件格式："</span>+fileExtName+<span class="string">"]"</span>);</span><br><span class="line">                String uuidPath = UUID.randomUUID().toString();<span class="comment">//生成不重复文件路径</span></span><br><span class="line">                String realPath = _savePath+<span class="string">"/"</span>+uuidPath;<span class="comment">//最终保存的路径</span></span><br><span class="line">                System.out.println(<span class="string">"保存到了："</span>+realPath);</span><br><span class="line">                File realPathFile = <span class="keyword">new</span> File(realPath);</span><br><span class="line">                <span class="keyword">if</span>(!realPathFile.exists())&#123;</span><br><span class="line">                    realPathFile.mkdir();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获得上传文件的流</span></span><br><span class="line">                InputStream is = fileItem.getInputStream();</span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(realPath+<span class="string">"/"</span>+fileName);</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>((len = is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>index.jsp（表单控件一定要加名字，否则不会提交！！！）</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">&lt;%--  表单上传文件，选择post提交方式 设置--%&gt;</span><br><span class="line">  &lt;form action=<span class="string">"/upload.do"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"file1"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h2><p><strong>发送邮件的协议：SMTP</strong></p>
<p><strong>接收邮件的协议：POP3</strong></p>
<p>需要的jar包：</p>
<p><a href="https://repo1.maven.org/maven2/javax/activation/activation/1.1.1/activation-1.1.1.jar" target="_blank" rel="noopener">activation-1.1.1.jar</a></p>
<p><a href="https://repo1.maven.org/maven2/javax/mail/mail/1.4.7/mail-1.4.7.jar" target="_blank" rel="noopener">javax.mail-api-1.6.2.jar</a></p>
<blockquote>
<p>测试发送简单邮件：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"><span class="keyword">import</span> com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String from = <span class="string">"853851430@qq.com"</span>;</span><br><span class="line">        String to = <span class="string">"853851430@qq.com"</span>;</span><br><span class="line">        String pwd = <span class="string">"tmbykcfpazvkbdfc"</span>;</span><br><span class="line"></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.setProperty(<span class="string">"mail.host"</span>,<span class="string">"smtp.qq.com"</span>);<span class="comment">//设置qq邮件服务器</span></span><br><span class="line">        prop.setProperty(<span class="string">"mail.transport.protocol"</span>,<span class="string">"smtp"</span>);<span class="comment">//邮件发送协议</span></span><br><span class="line">        prop.setProperty(<span class="string">"mail.smtp.auth"</span>,<span class="string">"true"</span>);<span class="comment">//需要验证密码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//QQ邮箱需要的SSL</span></span><br><span class="line">        MailSSLSocketFactory sf = <span class="keyword">new</span> MailSSLSocketFactory();</span><br><span class="line">        sf.setTrustAllHosts(<span class="keyword">true</span>);</span><br><span class="line">        prop.put(<span class="string">"mail.smtp.ssl.enable"</span>,<span class="string">"true"</span>);</span><br><span class="line">        prop.put(<span class="string">"mail.smtp.ssl.socketFactor"</span>,sf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Java发送邮件的五个步骤</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、创建定义整个应用程序所需环境信息的Session对象</span></span><br><span class="line">        Session session = Session.getDefaultInstance(prop, <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//发件人用户名和授权码</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(from, pwd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、开启Session的debug模式，这样可以查看程序发送Email运行状态，通过Session获得transport对象</span></span><br><span class="line">        session.setDebug(<span class="keyword">true</span>);</span><br><span class="line">        Transport ts = session.getTransport();</span><br><span class="line">        <span class="comment">//3、使用用户名+授权码连接上邮件服务器</span></span><br><span class="line">        ts.connect(<span class="string">"smtp.qq.com"</span>,from,pwd);</span><br><span class="line">        <span class="comment">//4、创建邮件</span></span><br><span class="line">        <span class="comment">//4.1、创建邮件对象</span></span><br><span class="line">        MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">        <span class="comment">//4.2、指明邮件发件人</span></span><br><span class="line">        message.setFrom(<span class="keyword">new</span> InternetAddress(from));</span><br><span class="line">        <span class="comment">//4.3、指明邮件收件人</span></span><br><span class="line">        message.setRecipient(Message.RecipientType.TO,<span class="keyword">new</span> InternetAddress(to));</span><br><span class="line">        <span class="comment">//4.3、设置邮件的标题</span></span><br><span class="line">        message.setSubject(<span class="string">"JavaMail测试程序"</span>);</span><br><span class="line">        message.setContent(<span class="string">"&lt;h1 style='color:red'&gt;测试程序&lt;/h1&gt;"</span>,<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="comment">//5、发送邮件</span></span><br><span class="line">        ts.sendMessage(message,message.getAllRecipients());</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        ts.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发送邮件带附件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"><span class="keyword">import</span> com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.activation.DataHandler;</span><br><span class="line"><span class="keyword">import</span> javax.activation.DataSource;</span><br><span class="line"><span class="keyword">import</span> javax.activation.FileDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeBodyPart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMultipart;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String from = <span class="string">"853851430@qq.com"</span>;</span><br><span class="line">        String to = <span class="string">"853851430@qq.com"</span>;</span><br><span class="line">        String pwd = <span class="string">"tmbykcfpazvkbdfc"</span>;</span><br><span class="line"></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.setProperty(<span class="string">"mail.host"</span>,<span class="string">"smtp.qq.com"</span>);<span class="comment">//设置qq邮件服务器</span></span><br><span class="line">        prop.setProperty(<span class="string">"mail.transport.protocol"</span>,<span class="string">"smtp"</span>);<span class="comment">//邮件发送协议</span></span><br><span class="line">        prop.setProperty(<span class="string">"mail.smtp.auth"</span>,<span class="string">"true"</span>);<span class="comment">//需要验证密码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//QQ邮箱需要的SSL</span></span><br><span class="line">        MailSSLSocketFactory sf = <span class="keyword">new</span> MailSSLSocketFactory();</span><br><span class="line">        sf.setTrustAllHosts(<span class="keyword">true</span>);</span><br><span class="line">        prop.put(<span class="string">"mail.smtp.ssl.enable"</span>,<span class="string">"true"</span>);</span><br><span class="line">        prop.put(<span class="string">"mail.smtp.ssl.socketFactor"</span>,sf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Java发送邮件的五个步骤</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、创建定义整个应用程序所需环境信息的Session对象</span></span><br><span class="line">        Session session = Session.getDefaultInstance(prop, <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//发件人用户名和授权码</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(from, pwd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、开启Session的debug模式，这样可以查看程序发送Email运行状态，通过Session获得transport对象</span></span><br><span class="line">        session.setDebug(<span class="keyword">true</span>);</span><br><span class="line">        Transport ts = session.getTransport();</span><br><span class="line">        <span class="comment">//3、使用用户名+授权码连接上邮件服务器</span></span><br><span class="line">        ts.connect(<span class="string">"smtp.qq.com"</span>,from,pwd);</span><br><span class="line">        <span class="comment">//4、创建邮件</span></span><br><span class="line">        <span class="comment">//4.1、创建邮件对象</span></span><br><span class="line">        MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">        <span class="comment">//4.2、指明邮件发件人</span></span><br><span class="line">        message.setFrom(<span class="keyword">new</span> InternetAddress(from));</span><br><span class="line">        <span class="comment">//4.3、指明邮件收件人</span></span><br><span class="line">        message.setRecipient(Message.RecipientType.TO,<span class="keyword">new</span> InternetAddress(to));</span><br><span class="line">        <span class="comment">//4.3、设置邮件的标题</span></span><br><span class="line">        message.setSubject(<span class="string">"JavaMail测试程序"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//图片</span></span><br><span class="line">        MimeBodyPart body1 = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">        body1.setDataHandler(<span class="keyword">new</span> DataHandler(<span class="keyword">new</span> FileDataSource(<span class="string">"src/player.jpg"</span>)));</span><br><span class="line">        body1.setContentID(<span class="string">"1.png"</span>);</span><br><span class="line">        MimeBodyPart body2 = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">        body2.setContent(<span class="string">"测试头像：&lt;img src='cid:1.png'"</span>,<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="comment">//附件</span></span><br><span class="line">        MimeBodyPart body3 = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">        body3.setDataHandler(<span class="keyword">new</span> DataHandler(<span class="keyword">new</span> FileDataSource(<span class="string">"src/1.pptx"</span>)));</span><br><span class="line">        body3.setFileName(<span class="string">"1.pptx"</span>);</span><br><span class="line">        MimeMultipart multipart1 = <span class="keyword">new</span> MimeMultipart();</span><br><span class="line">        multipart1.addBodyPart(body1);</span><br><span class="line">        multipart1.addBodyPart(body2);</span><br><span class="line">        multipart1.setSubType(<span class="string">"related"</span>);</span><br><span class="line"></span><br><span class="line">        MimeBodyPart contentText = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">        contentText.setContent(multipart1);</span><br><span class="line">        MimeMultipart multipart2 = <span class="keyword">new</span> MimeMultipart();</span><br><span class="line">        multipart2.addBodyPart(body3);</span><br><span class="line">        multipart2.addBodyPart(contentText);</span><br><span class="line">        multipart2.setSubType(<span class="string">"mixed"</span>);</span><br><span class="line">        message.setContent(multipart2);</span><br><span class="line">        <span class="comment">//5、发送邮件</span></span><br><span class="line">        ts.sendMessage(message,message.getAllRecipients());</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        ts.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
      <tags>
        <tag>第四阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>smbms练手项目</title>
    <url>/2021/02/22/smbms%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="Github仓库"><a href="#Github仓库" class="headerlink" title="Github仓库"></a>Github仓库</h2><p><strong>项目开源地址：<a href="https://github.com/jinyalong/smbms_Servlet-" target="_blank" rel="noopener">https://github.com/jinyalong/smbms_Servlet-</a></strong></p>
<h2 id="项目演示地址"><a href="#项目演示地址" class="headerlink" title="项目演示地址"></a>项目演示地址</h2><p><strong>该项目已经部署到我的服务器。</strong></p>
<p><strong>地址：<a href="http://smbms.codefriday.cn/smbms/" target="_blank" rel="noopener">http://smbms.codefriday.cn/smbms/</a></strong></p>
<h2 id="SMBMS"><a href="#SMBMS" class="headerlink" title="SMBMS"></a>SMBMS</h2><p>超市订单管理系统，静态资源JSP，JS，CSS均是找的网路资源，后端MVC三层架构，都采用原生Servlet开发，业务相似的很多，模块之间代码重复。</p>
<h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><blockquote>
<p>1、导入数据库</p>
</blockquote>
<p>数据库文件：<code>smbms.sql</code>，数据库版本<code>5.1</code>，五个数据表如下。</p>
<p><img src="/2021/02/22/smbms%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/image-20210224184017092.png" alt="image-20210224184017092"></p>
<p>经过分析发现，查询时最多联合两个表查询，而连表条件是图中两个红色箭头！</p>
<blockquote>
<p>2、新建一个空Maven项目</p>
</blockquote>
<p>选择web-app模板创建，并且新建好<code>java</code>和<code>resources</code>目录</p>
<blockquote>
<p>3、导入相关依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- JSTL表达式的包 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- JSTL表达式依赖的标签库 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.taglibs/taglibs-standard-impl --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.75<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>导入的包有：</strong></p>
<ul>
<li>Servlet：专注于处理前端请求</li>
<li>JSP：专注于展示</li>
<li>JSTL：JSP中大量用到核心标签库</li>
<li>TagLib：JSTL的依赖包</li>
<li>以及连接数据库的包</li>
<li>junit测试</li>
<li>阿里巴巴的fastJSON用于传输前后端数据！</li>
</ul>
<blockquote>
<p>4、导入静态资源</p>
</blockquote>
<p><img src="/2021/02/22/smbms%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/image-20210224184604199.png" alt="image-20210224184604199"></p>
<p><code>calendar</code>为一个日历插件，css相对简单，js中有很多用到J<code>query</code>的<code>ajax</code>异步请求。</p>
<blockquote>
<p>5、新建好文件夹分好项目结构</p>
</blockquote>
<p><img src="/2021/02/22/smbms%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/image-20210224184821961.png" alt="image-20210224184821961"></p>
<ul>
<li><code>dao</code>：和数据库直接交互，返回最原始的结果，比如查询得到的<code>ResultSet</code>处理封装成<code>List</code>返回，增删改直接返回一个整数</li>
<li><code>filter</code>：字符编码过滤器，针对所有请求，权限过滤器，检查<code>Session</code>中是否存有登陆用户，必须登陆后才能进入系统。</li>
<li><code>repo</code>：数据库表映射的实体类</li>
<li><code>service</code>：由<code>servlet</code>调用，调用<code>dao</code>层操作数据库，逻辑判断，以及业务代码主要在这层，同时修改数据库时启用了事务，防止数据库数据异常！</li>
<li><code>servlet</code>：专注取得前端数据并预处理之后调用<code>service</code>层之后，控制页面的跳转。</li>
</ul>
<blockquote>
<p>6、编写ORM映射数据库的实体类</p>
</blockquote>
<p>以user为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.ropo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id; <span class="comment">//id </span></span><br><span class="line">	<span class="keyword">private</span> String userCode; <span class="comment">//用户编码</span></span><br><span class="line">	<span class="keyword">private</span> String userName; <span class="comment">//用户名称</span></span><br><span class="line">	<span class="keyword">private</span> String userPassword; <span class="comment">//用户密码</span></span><br><span class="line">	<span class="keyword">private</span> Integer gender;  <span class="comment">//性别</span></span><br><span class="line">	<span class="keyword">private</span> Date birthday;  <span class="comment">//出生日期</span></span><br><span class="line">	<span class="keyword">private</span> String phone;   <span class="comment">//电话</span></span><br><span class="line">	<span class="keyword">private</span> String address; <span class="comment">//地址</span></span><br><span class="line">	<span class="keyword">private</span> Integer userRole;    <span class="comment">//用户角色</span></span><br><span class="line">	<span class="keyword">private</span> Integer createdBy;   <span class="comment">//创建者</span></span><br><span class="line">	<span class="keyword">private</span> Date creationDate; <span class="comment">//创建时间</span></span><br><span class="line">	<span class="keyword">private</span> Integer modifyBy;     <span class="comment">//更新者</span></span><br><span class="line">	<span class="keyword">private</span> Date modifyDate;   <span class="comment">//更新时间</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer age;<span class="comment">//年龄</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String userRoleName;    <span class="comment">//用户角色名称</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userRoleName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserRoleName</span><span class="params">(String userRoleName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userRoleName = userRoleName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">/*long time = System.currentTimeMillis()-birthday.getTime();</span></span><br><span class="line"><span class="comment">		Integer age = Long.valueOf(time/365/24/60/60/1000).IntegerValue();*/</span></span><br><span class="line">		Date date = <span class="keyword">new</span> Date();</span><br><span class="line">		Integer age = date.getYear()-birthday.getYear();</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userCode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserCode</span><span class="params">(String userCode)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userCode = userCode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userName = userName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userPassword;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserPassword</span><span class="params">(String userPassword)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> gender;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.gender = gender;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> phone;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.phone = phone;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> address;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getUserRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userRole;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserRole</span><span class="params">(Integer userRole)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userRole = userRole;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getCreatedBy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> createdBy;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedBy</span><span class="params">(Integer createdBy)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.createdBy = createdBy;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getCreationDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> creationDate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreationDate</span><span class="params">(Date creationDate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.creationDate = creationDate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getModifyBy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> modifyBy;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModifyBy</span><span class="params">(Integer modifyBy)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.modifyBy = modifyBy;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getModifyDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> modifyDate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModifyDate</span><span class="params">(Date modifyDate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.modifyDate = modifyDate;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>7、编写字符编码过滤器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>web.xml</code>中注册：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.codefriday.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>操作数据库基类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String Driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String Url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String User;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String Password;</span><br><span class="line">    <span class="comment">//类加载时初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = BaseDao.class.getClassLoader().getResourceAsStream("db.properties");</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Driver = properties.getProperty(<span class="string">"Driver"</span>);</span><br><span class="line">        Url = properties.getProperty(<span class="string">"Url"</span>);</span><br><span class="line">        User = properties.getProperty(<span class="string">"User"</span>);</span><br><span class="line">        Password = properties.getProperty(<span class="string">"Password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得连接的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(Driver);</span><br><span class="line">            conn =  DriverManager.getConnection(Url,User,Password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询公共方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">execute</span><span class="params">(Connection conn,PreparedStatement pst,ResultSet rs,String sql,Object params[])</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        pst = conn.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; params.length;i++)&#123;</span><br><span class="line">            pst.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        rs = pst.executeQuery();</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增删改公共方法，重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(Connection conn,PreparedStatement pst,String sql,Object params[])</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        pst = conn.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; params.length;i++)&#123;</span><br><span class="line">            pst.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> UpdateRows = pst.executeUpdate();</span><br><span class="line">        <span class="keyword">return</span> UpdateRows;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">CloseResource</span><span class="params">(Connection conn,PreparedStatement pst,ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">                rs = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pst!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pst.close();</span><br><span class="line">                pst = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">                conn = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h2><p><img src="/2021/02/22/smbms%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/image-20210224190421064.png" alt="image-20210224190421064"></p>
<p>loginServlet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.servlet.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codefriday.ropo.User;</span><br><span class="line"><span class="keyword">import</span> com.codefriday.service.user.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.codefriday.util.Constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"登录Servlet---"</span>);</span><br><span class="line">        String userCode = req.getParameter(<span class="string">"userCode"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"userPassword"</span>);</span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        User user = userService.login(userCode, password);</span><br><span class="line">        <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;<span class="comment">//存在这个用户，可以登录</span></span><br><span class="line">            <span class="comment">//将用户的信息放到Session中</span></span><br><span class="line">            req.getSession().setAttribute(Constants.USER_SESSION,user);</span><br><span class="line">            <span class="comment">//重定向到内部</span></span><br><span class="line">            resp.sendRedirect(req.getContextPath()+<span class="string">"/jsp/frame.jsp"</span>);</span><br><span class="line">            System.out.println(req.getContextPath());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//查不到这个人</span></span><br><span class="line">            <span class="comment">//转发回去，并提示错误信息</span></span><br><span class="line">            req.setAttribute(<span class="string">"error"</span>,<span class="string">"用户名或密码不正确"</span>);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">"login.jsp"</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>loginService:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userCode, String password)</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    User user = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//业务层调用具体数据库操作</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = BaseDao.getConnection();</span><br><span class="line">        user = userDao.getLoginUser(userCode,connection);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        BaseDao.CloseResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(user!=<span class="keyword">null</span>&amp;&amp;user.getUserPassword().equals(password))</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dao：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到登录用户</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getLoginUser</span><span class="params">(String userCode,Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    User user =  <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        String sql = <span class="string">"select * from smbms_user where userCode = ?"</span>;</span><br><span class="line">        Object[] params = &#123;userCode&#125;;</span><br><span class="line">        rs = BaseDao.execute(connection,pstm,rs,sql,params);</span><br><span class="line">        <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">            user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">            user.setUserCode(rs.getString(<span class="string">"userCode"</span>));</span><br><span class="line">            user.setUserName(rs.getString(<span class="string">"userName"</span>));</span><br><span class="line">            user.setUserPassword(rs.getString(<span class="string">"userPassword"</span>));</span><br><span class="line">            user.setGender(rs.getInt(<span class="string">"gender"</span>));</span><br><span class="line">            user.setBirthday(rs.getDate(<span class="string">"birthday"</span>));</span><br><span class="line">            user.setPhone(rs.getString(<span class="string">"phone"</span>));</span><br><span class="line">            user.setAddress(rs.getString(<span class="string">"address"</span>));</span><br><span class="line">            user.setUserRole(rs.getInt(<span class="string">"userRole"</span>));</span><br><span class="line">            user.setCreatedBy(rs.getInt(<span class="string">"createdBy"</span>));</span><br><span class="line">            user.setCreationDate(rs.getTimestamp(<span class="string">"creationDate"</span>));</span><br><span class="line">            user.setModifyBy(rs.getInt(<span class="string">"modifyBy"</span>));</span><br><span class="line">            user.setModifyDate(rs.getTimestamp(<span class="string">"modifyDate"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        BaseDao.CloseResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="登录功能优化"><a href="#登录功能优化" class="headerlink" title="登录功能优化"></a>登录功能优化</h2><p><strong>优化一：权限过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codefriday.ropo.User;</span><br><span class="line"><span class="keyword">import</span> com.codefriday.util.Constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request1 = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse response1 = (HttpServletResponse) response;</span><br><span class="line">        <span class="comment">//获得Session</span></span><br><span class="line">        User user = (User) request1.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">        <span class="comment">//说明已经注销或者未登录</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            response1.sendRedirect(request1.getContextPath()+<span class="string">"/error.jsp"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            chain.doFilter(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优化二：退出登录</strong></p>
<p>Servlet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.servlet.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codefriday.util.Constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogOutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//移除session</span></span><br><span class="line">        req.getSession().removeAttribute(Constants.USER_SESSION);</span><br><span class="line">        resp.sendRedirect(req.getContextPath()+<span class="string">"/login.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改密码功能"><a href="#修改密码功能" class="headerlink" title="修改密码功能"></a>修改密码功能</h2><p>修改密码功能界面直接导入：</p>
<p><img src="/2021/02/22/smbms%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/image-20210224190934615.png" alt="image-20210224190934615"></p>
<ul>
<li>第一个框中当失去焦点时，会发起一个ajax异步请求，查询登陆后放入Session的User对象，并且获得其中的密码来比对一下输出的旧密码是否正确。</li>
</ul>
<p><img src="/2021/02/22/smbms%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/image-20210224191116450.png" alt="image-20210224191116450"></p>
<ul>
<li>修改密码提交事件：修改成功后返回提示信息并移除Session中现有登录用户，需要重新登录，修改失败显示错误信息，在此不再复制代码，具体见GitHub仓库！</li>
</ul>
<h2 id="用户管理实现"><a href="#用户管理实现" class="headerlink" title="用户管理实现"></a>用户管理实现</h2><p>1、用户数量</p>
<p>用户分页单独处理，写了一个类来计算分页！</p>
<p>2、用户列表</p>
<p>查询数据库返回一个list</p>
<p>3、角色列表</p>
<p>查询用户列表时有条件，根据角色，或者名字模糊查询</p>
<p><img src="/2021/02/22/smbms%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/image-20210224191428611.png" alt="image-20210224191428611"></p>
<p>为了避免多余编写Servlet，这里使用了动态sql查询，也就是后面两个参数可有可无，但是servlet需要处理传过去一个没有意义的值，防止传去null出错！</p>
<p>dao层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得指定参数的用户名数量</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(Connection connection, String userName, <span class="keyword">int</span> userRole)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sql.append(<span class="string">"select count(1) as count from smbms_user u,smbms_role r where u.userRole = r.id "</span>);</span><br><span class="line">        <span class="keyword">if</span>(userName!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(<span class="string">"%"</span>+userName+<span class="string">"%"</span>);</span><br><span class="line">            sql.append(<span class="string">"and userName like ?"</span>);</span><br><span class="line">        &#125;<span class="keyword">if</span>(userRole&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            list.add(userRole);</span><br><span class="line">            sql.append(<span class="string">"and userRole = ?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sql.toString());</span><br><span class="line">        Object[] params = list.toArray();</span><br><span class="line">        rs = BaseDao.execute(connection, pstm, rs, sql.toString(), params);</span><br><span class="line">        <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">            count = rs.getInt(<span class="string">"count"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(Connection connection, String userName, <span class="keyword">int</span> userRole, <span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sql.append(<span class="string">"select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r where u.userRole = r.id"</span>);</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isNullOrEmpty(userName))&#123;</span><br><span class="line">            sql.append(<span class="string">" and u.userName like ?"</span>);</span><br><span class="line">            list.add(<span class="string">"%"</span>+userName+<span class="string">"%"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(userRole &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sql.append(<span class="string">" and u.userRole = ?"</span>);</span><br><span class="line">            list.add(userRole);</span><br><span class="line">        &#125;</span><br><span class="line">        sql.append(<span class="string">" order by creationDate ASC limit ?,?"</span>);</span><br><span class="line">        currentPageNo = (currentPageNo-<span class="number">1</span>)*pageSize;</span><br><span class="line">        list.add(currentPageNo);</span><br><span class="line">        list.add(pageSize);</span><br><span class="line"></span><br><span class="line">        Object[] params = list.toArray();</span><br><span class="line">        rs = BaseDao.execute(connection, pstm, rs, sql.toString(), params);</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            User _user = <span class="keyword">new</span> User();</span><br><span class="line">            _user.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">            _user.setUserCode(rs.getString(<span class="string">"userCode"</span>));</span><br><span class="line">            _user.setUserName(rs.getString(<span class="string">"userName"</span>));</span><br><span class="line">            _user.setGender(rs.getInt(<span class="string">"gender"</span>));</span><br><span class="line">            _user.setBirthday(rs.getDate(<span class="string">"birthday"</span>));</span><br><span class="line">            _user.setPhone(rs.getString(<span class="string">"phone"</span>));</span><br><span class="line">            _user.setUserRole(rs.getInt(<span class="string">"userRole"</span>));</span><br><span class="line">            _user.setUserRoleName(rs.getString(<span class="string">"userRoleName"</span>));</span><br><span class="line">            userList.add(_user);</span><br><span class="line">        &#125;</span><br><span class="line">        BaseDao.CloseResource(<span class="keyword">null</span>, pstm, rs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后页面的一些增删改就和其他差不多！基本是重复的代码。</p>
<h2 id="订单界面"><a href="#订单界面" class="headerlink" title="订单界面"></a>订单界面</h2><p>未做分页处理，写简单增删改查业务，具体见源码</p>
<h2 id="供应商界面"><a href="#供应商界面" class="headerlink" title="供应商界面"></a>供应商界面</h2><p>未做分页处理，写简单增删改查业务，具体见源码</p>
<h2 id="定制错误界面"><a href="#定制错误界面" class="headerlink" title="定制错误界面"></a>定制错误界面</h2><p>404界面：（需要在web.xml中配置）</p>
<p>以及权限拦截错误界面：</p>
<p><img src="/2021/02/22/smbms%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/smbms%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%5Cimage-20210224192905484.png" alt="image-20210224192905484"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个项目主要是练习MVC三层架构，以及数据库简单CRUD操作，稍微难一点的sql就是连表查询，但是联表只有两个表，也很简单。</p>
<p>三层架构好处：</p>
<ul>
<li>易于维护</li>
<li>每一层都是用interface再实现，这样实现和定义分离，可清除看到定义的方法，类似C语言中的<code>.h</code>和<code>.cpp</code>文件分离</li>
<li>dao层专注数据库操作，返回最原始结果</li>
<li>Service层可以处理数据库事务等问题，并做业务处理和逻辑判断，和dao层、数据库合为MVC中的<code>Model</code>层</li>
<li><code>servlet</code>中则控制试图跳转，接收前端参数，交给业务层处理，专注于做控制！</li>
<li><code>jsp</code>实际本质也是<code>servlet</code>，但是前端主要职责是显示，所以几乎只有<code>html</code>，但是还用到了<code>JSTL</code>，<code>EL</code>表达式等等</li>
</ul>
<p>最后我把他部署到了我的服务器，遇到一些小问题，主要是在IDEA中编写时，资源路径不是太规范导致404！</p>
]]></content>
      <categories>
        <category>实战项目</category>
      </categories>
      <tags>
        <tag>第四阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb学习</title>
    <url>/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="1、静态web和动态web"><a href="#1、静态web和动态web" class="headerlink" title="1、静态web和动态web"></a>1、静态web和动态web</h2><blockquote>
<p>静态web</p>
</blockquote>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/1.jpg" alt="img"></p>
<blockquote>
<p>动态web</p>
</blockquote>
<p>无数据库：</p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/2.jpg" alt="img"></p>
<p>有数据库：</p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/3.jpg" alt="img"></p>
<h2 id="2、Tomcat"><a href="#2、Tomcat" class="headerlink" title="2、Tomcat"></a>2、Tomcat</h2><p>tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。</p>
<p>默认端口：8080</p>
<p><code>conf-server.xml</code>修改配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改端口 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改主机 --&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>C:\Windows\System32\drivers\etc</code>可修改主机对应的IP，在浏览器访问时影响。</p>
<h2 id="3、HTTP"><a href="#3、HTTP" class="headerlink" title="3、HTTP"></a>3、HTTP</h2><p>超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII形式给出。</p>
<ul>
<li>默认端口80</li>
<li>https（更安全的）默认端口443</li>
<li>超文本：传输视频、图片、音频、地图等等</li>
</ul>
<h3 id="3-1、HTTP请求"><a href="#3-1、HTTP请求" class="headerlink" title="3.1、HTTP请求"></a>3.1、HTTP请求</h3><p>以百度为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request URL: https:<span class="comment">//www.baidu.com/  请求的url </span></span><br><span class="line">Request Method: GET                  get请求 </span><br><span class="line">Status Code: <span class="number">200</span> OK					 状态码</span><br><span class="line">Remote Address: <span class="number">183.232</span><span class="number">.231</span><span class="number">.174</span>:<span class="number">443</span>  远程地址</span><br></pre></td></tr></table></figure>

<h4 id="3-1-1、请求行"><a href="#3-1-1、请求行" class="headerlink" title="3.1.1、请求行"></a>3.1.1、请求行</h4><ul>
<li>请求行的方式：GET</li>
<li>请求方式：<strong>GET，POST</strong>，HEAD，DELETE…<ul>
<li>GET：URL中携带参数，参数大小个数有限，不安全，但高效</li>
<li>请求携带参数无限制，不会在url中显示数据内容，但是安全。</li>
</ul>
</li>
</ul>
<h4 id="3-1-2、消息头"><a href="#3-1-2、消息头" class="headerlink" title="3.1.2、消息头"></a>3.1.2、消息头</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept: 	告诉浏览器支持的类型</span><br><span class="line">Accept-Encoding: 	支持的编码格式</span><br><span class="line">Accept-Language: 	告诉浏览器语言环境</span><br><span class="line">Connection: 	告诉浏览器是保存连接还是断开</span><br></pre></td></tr></table></figure>

<h3 id="3-2、HTTP响应"><a href="#3-2、HTTP响应" class="headerlink" title="3.2、HTTP响应"></a>3.2、HTTP响应</h3><p>以百度为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cache-Control: <span class="keyword">private</span>	缓存控制</span><br><span class="line">Connection: keep-alive	连接</span><br><span class="line">Content-Encoding: gzip	编码</span><br><span class="line">Content-Type: text/html;charset=utf-<span class="number">8</span> 类型</span><br></pre></td></tr></table></figure>

<blockquote>
<p>响应的状态码</p>
</blockquote>
<p>200：请求响应成功</p>
<p>3xx：请求重定向，重定向：转到新的URL</p>
<p>4xx：找不到资源</p>
<p>404：资源不存在</p>
<p>5xx：服务器代码错误</p>
<p>500：服务器内部错误</p>
<p>502：网关错误  </p>
<h2 id="4、Maven"><a href="#4、Maven" class="headerlink" title="4、Maven"></a>4、Maven</h2><ul>
<li><p>在javaweb开发中，需要很多jar包，我们需要手动导入</p>
</li>
<li><p>Maven是一个工具，可以自动导入和配置这些jar包</p>
</li>
</ul>
<blockquote>
<p>Maven项目架构管理工具</p>
</blockquote>
<p>Maven核心思想：<strong>约定大于配置</strong></p>
<p>规定好如何编写Java代码，必须按照这个规范来。</p>
<blockquote>
<p>Maven安装</p>
</blockquote>
<p>官网：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p>
<p>解压后配置环境变量：</p>
<ul>
<li>M2_HOME：安装目录的<code>bin</code>目录</li>
<li>MAVEN_HOME：安装目录</li>
<li>Path下添加：<code>%MAVEN_HOME%\bin</code></li>
</ul>
<p>测试是否成功：</p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218131923583.png" alt="image-20210218131923583"></p>
<blockquote>
<p>阿里云镜像配置</p>
</blockquote>
<p>在<code>conf-settings.xml</code>中的<code>mirrors</code>标签中添加，国外镜像下载较慢。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置本地仓库</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Environment\apache-maven-3.6.3\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>IDEA新建MavenWeb项目</p>
</blockquote>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218133430922.png" alt="image-20210218133430922"></p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218134725802.png" alt="image-20210218134725802"></p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218134845809.png" alt="image-20210218134845809"></p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218134912449.png" alt="image-20210218134912449"></p>
<p><strong>自动下载镜像的包到本地仓库！</strong></p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218135058019.png" alt="image-20210218135058019"></p>
<blockquote>
<p>Maven项目结构分析</p>
</blockquote>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218141559359.png" alt="image-20210218141559359"></p>
<p>需要自己新建两个目录：</p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218141524078.png" alt="image-20210218141524078"></p>
<p><strong>Maven高级之处在于：会自动导入包的同时自动导入其他依赖的包！</strong></p>
<blockquote>
<p>导出资源问题</p>
</blockquote>
<p>Maven由于他约定大于配置，可能会出现<code>resource</code>目录下的自己编写的配置文件无法导出，需要在<code>pom.xml</code>中添加如下代码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、Servlet"><a href="#5、Servlet" class="headerlink" title="5、Servlet"></a>5、Servlet</h2><h3 id="5-1、简介"><a href="#5-1、简介" class="headerlink" title="5.1、简介"></a>5.1、简介</h3><ul>
<li>Servlet是sun公式开发动态web的一门技术</li>
<li>提供了一个Servlet接口，开发步骤：<ul>
<li>编写一个类，实现该接口</li>
<li>然后把编写的类部署到web服务器即可使用</li>
</ul>
</li>
<li>Servlet有两个默认实现类<ul>
<li>HttpServlet</li>
<li>GenericServlet</li>
</ul>
</li>
</ul>
<h3 id="5-2、HelloServlet"><a href="#5-2、HelloServlet" class="headerlink" title="5.2、HelloServlet"></a>5.2、HelloServlet</h3><p>1、构建一个普通的Maven项目，删掉src目录，然后把空的这个Maven项目当做主工程并使用<code>Maven</code>导入<code>jsp</code>和<code>servlet</code>依赖的jar包，在其中新建<code>Moudle</code>。</p>
<p>2、Maven父子工程</p>
<p>父项目<code>pom.xml</code>文件会多出：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子项目<code>pom.xml</code>文件会多出</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.codefriday<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>父项目的java子项目可以直接使用！</strong></p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218154120724.png" alt="image-20210218154120724"></p>
<p>3、基础<code>HttpServlet</code>编写自己的<code>servlet</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//由于get或者post只是请求实现的不同方式，可以相互调用，业务逻辑一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();<span class="comment">//拿到响应流</span></span><br><span class="line">        writer.print(<span class="string">"Hello Servlet"</span>);<span class="comment">//响应流输出一点东西</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、编写Servlet的映射</p>
<p>​    Java程序需要通过浏览器访问，浏览器连接web服务器Tomcat，因此需要在Web服务中注册<code>Servlet</code>，还需要给他一个能访问的路径</p>
<p>在<code>web.xml</code>中注册：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.codefriday.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5、配置好Tomcat之后启动</p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218164138572.png" alt="image-20210218164138572"></p>
<h3 id="5-3、Servlet原理"><a href="#5-3、Servlet原理" class="headerlink" title="5.3、Servlet原理"></a>5.3、Servlet原理</h3><p>Servlet由Web服务器调用，Web服务器收到浏览器请求之后：</p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218170325424.png" alt="image-20210218170325424"></p>
<h3 id="5-4、Mapping"><a href="#5-4、Mapping" class="headerlink" title="5.4、Mapping"></a>5.4、Mapping</h3><p>1、一个servlet指定一个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  URL：localhost:8080/s1/hello s1为项目名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、一个servlet可以指定多个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.codefriday.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  URL：localhost:8080/s1/hello s1为项目名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、一个servlet可以指定通用映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.codefriday.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  URL：localhost:8080/s1/hello s1为项目名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、默认的请求路径：项目直接进入到该servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5、可以指定后缀，此时不需要前面的<code>/</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>无论前面怎么加，只要以do结尾就能找到！</p>
<p>6、优先级问题</p>
<p><code>/*</code>优先级低于具体的路径如<code>/hello</code></p>
<p>自定义404页面：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(<span class="string">"&lt;h1&gt;404&lt;/h1&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.codefriday.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5、ServletContext"><a href="#5-5、ServletContext" class="headerlink" title="5.5、ServletContext"></a>5.5、ServletContext</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//this.getInitParameter() 初始化参数</span></span><br><span class="line"><span class="comment">//this.getServletConfig() 获得配置</span></span><br><span class="line"><span class="comment">//this.getServletContext(); 返回一个上下文对象</span></span><br></pre></td></tr></table></figure>

<p>web容器启动的时候，它会为每个web程序都创建一个ServletContext对象，他代表了当前的web应用。</p>
<h4 id="5-5-1、共享数据"><a href="#5-5-1、共享数据" class="headerlink" title="5.5.1、共享数据"></a>5.5.1、共享数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String var1)</span></span>;<span class="comment">//获得值，没有被设置时返回的是null</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String var1, Object var2)</span></span>;<span class="comment">//加入值</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码测试</p>
</blockquote>
<ul>
<li>HelloServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello!"</span>);</span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String name = <span class="string">"CodeFriday"</span>;</span><br><span class="line">        servletContext.setAttribute(<span class="string">"name"</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>GetNameServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetNameServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setHeader(<span class="string">"Content-type"</span>, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);<span class="comment">//</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String name = (String)context.getAttribute(<span class="string">"name"</span>);</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(<span class="string">"名字："</span>+name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果中文出现的是<code>??</code>乱码，这表明没有加<code>response.setCharacterEncoding(“UTF-8”);</code>这句话。</li>
<li>如果出现的是<code>烇湫</code>，说明浏览器的解析问题。要在获得字符流之前加上<code>response.setHeader(&quot;Content-type&quot;, &quot;text/html;charset=UTF-8&quot;);</code>，否则会不生效！！！</li>
</ul>
<h4 id="5-5-2、获取初始化参数"><a href="#5-5-2、获取初始化参数" class="headerlink" title="5.5.2、获取初始化参数"></a>5.5.2、获取初始化参数</h4><p>在web.xml中可以定义初始化参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span><span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>调用<code>servletContext.getInitParameter(&quot;name&quot;)</code>可以通过名字获得参数的值。</p>
<h4 id="5-5-3、请求转发"><a href="#5-5-3、请求转发" class="headerlink" title="5.5.3、请求转发"></a>5.5.3、请求转发</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">servletContext.getRequestDispatcher(<span class="string">"/getname"</span>).forward(req,resp);</span><br><span class="line"><span class="comment">//getname为转发的路径，然后返回一个RequestDispatcher对象</span></span><br><span class="line"><span class="comment">//调用RequestDispatcher对象的forward方法执行，传入request对象和response对象作为参数</span></span><br></pre></td></tr></table></figure>

<p>但是显示URL并未变化，只不过是转发的新请求返回值给它。</p>
<h4 id="5-5-4、读取配置文件"><a href="#5-5-4、读取配置文件" class="headerlink" title="5.5.4、读取配置文件"></a>5.5.4、读取配置文件</h4><p>配置文件一般放到<code>resources</code>目录下：</p>
<p>最后生成在项目的<code>classes</code>文件夹下，称为<code>classpath</code></p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218193117806.png" alt="image-20210218193117806"></p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/20180514175953497" alt="这里写图片描述"></p>
<p><strong>因此通过ServletContext对象读取配置文件如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream is = servletContext.getResourceAsStream(<span class="string">"/WEB-INF/classes/db.properties"</span>);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.load(is);</span><br><span class="line">System.out.println(properties.getProperty(<span class="string">"user"</span>));</span><br><span class="line">System.out.println(properties.getProperty(<span class="string">"pwd"</span>));</span><br></pre></td></tr></table></figure>

<h3 id="5-6、HttpServletResponse"><a href="#5-6、HttpServletResponse" class="headerlink" title="5.6、HttpServletResponse"></a>5.6、HttpServletResponse</h3><p>web服务器接收到客户端的HTTP请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的HttpServletResponse对象。</p>
<ul>
<li>如果要获得请求的参数，就从HttpServletRequest对象取</li>
<li>如果要设置响应的信息，则操作HttpServletResponse对象。</li>
</ul>
<h4 id="5-6-1、方法分类："><a href="#5-6-1、方法分类：" class="headerlink" title="5.6.1、方法分类："></a>5.6.1、方法分类：</h4><ul>
<li>负责向浏览器输出数据的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;<span class="comment">//字节流</span></span><br><span class="line"></span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;<span class="comment">//字符流</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置响应头的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>响应的状态码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line">   <span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure>

<h4 id="5-6-2、应用"><a href="#5-6-2、应用" class="headerlink" title="5.6.2、应用"></a>5.6.2、应用</h4><p>1、向浏览器输出信息</p>
<p>2、下载文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">downServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.指定下载文件的路径</span></span><br><span class="line">        String path = <span class="string">"D:\\IdeaProjects\\JavaWeb\\javaweb-maven\\java-servlet02\\src\\main\\resources\\pk宝页面.docx"</span>;</span><br><span class="line">        System.out.println(<span class="string">"下载文件的路径："</span>+path);</span><br><span class="line">        <span class="comment">//2.分离出文件名</span></span><br><span class="line">        String fileName = path.substring(path.lastIndexOf(<span class="string">'\\'</span>)+<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"下载的文件名："</span>+fileName);</span><br><span class="line">        <span class="comment">//3.设置响应头让浏览器知道要下载的东西，URLEncoder.encode(fileName,"UTF-8")设置文件名字编码保证下载时能识别中文</span></span><br><span class="line">        resp.setHeader(<span class="string">"content-disposition"</span>, <span class="string">"attachment;fileName="</span>+ URLEncoder.encode(fileName,<span class="string">"UTF-8"</span>));</span><br><span class="line">        <span class="comment">//4.获得下载文件的输入流</span></span><br><span class="line">        FileInputStream fin = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        <span class="comment">//5.定义缓冲区</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">byte</span> []buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//6.获得response对象的输出流</span></span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">        <span class="comment">//7.将文件流输出</span></span><br><span class="line">        <span class="keyword">while</span>((len = fin.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//8.关闭文件流</span></span><br><span class="line">        fin.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、验证码功能</p>
<p><strong>4、实现重定向</strong></p>
<p>B收到A请求后，B通知A去访问另外一个C，URL会发生变化，<strong>常见场景：登录成功后！</strong></p>
<p><code>void sendRedirect(String var1) throws IOException;</code></p>
<p><strong>模拟一个表单提交登录：</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">    密 码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">loginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String user = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String pwd = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        System.out.println(user+<span class="string">":"</span>+pwd);</span><br><span class="line">        resp.sendRedirect(<span class="string">"/s2/down"</span>);<span class="comment">//注意带上当前项目</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210218232039321.png" alt="image-20210218232039321"></p>
<h3 id="5-7、HttpServletRequest"><a href="#5-7、HttpServletRequest" class="headerlink" title="5.7、HttpServletRequest"></a>5.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过HttpServletRequest对象的方法即可获得信息。</p>
<blockquote>
<p>获取前端传递的参数，请求转发</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">    密 码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">    爱好：</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"代码"</span>&gt;代码</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"音乐"</span>&gt;音乐</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"电影"</span>&gt;电影&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">loginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决前端传来中文乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        resp.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        String user = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String pwd = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//一个参数有多个值时-多选框</span></span><br><span class="line">        String[] hobbies = req.getParameterValues(<span class="string">"hobby"</span>);</span><br><span class="line">        resp.getWriter().println(user+<span class="string">"----"</span>+pwd);</span><br><span class="line">        resp.getWriter().println(Arrays.toString(hobbies));</span><br><span class="line">        System.out.println(<span class="string">"====================="</span>);</span><br><span class="line">        System.out.println(user+<span class="string">"----"</span>+pwd);</span><br><span class="line">        System.out.println(Arrays.toString(hobbies));</span><br><span class="line">        System.out.println(<span class="string">"====================="</span>);</span><br><span class="line">        <span class="comment">//请求转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/success.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重定向与转发的区别</p>
</blockquote>
<p>相同点：页面都会跳转</p>
<p>不同点：</p>
<ul>
<li><p>请求转发时，浏览器地址栏URL不变，状态码：307</p>
</li>
<li><p>重定向时，浏览器地址栏URL改变，状态码：302</p>
</li>
</ul>
<h2 id="6、Cookie，Session"><a href="#6、Cookie，Session" class="headerlink" title="6、Cookie，Session"></a>6、Cookie，Session</h2><h3 id="6-1、会话"><a href="#6-1、会话" class="headerlink" title="6.1、会话"></a>6.1、会话</h3><p><strong>会话：Session代表服务器与浏览器的一次会话过程，这个过程是连续的，也可以时断时续的。在Servlet中，当JSP页面没有显式禁止session的时候，在打开浏览器第一次请求该jsp的时候，服务器会自动为其创建一个session，并赋予其一个sessionID，发送给客户端的浏览器。</strong></p>
<h3 id="6-2、保存会话的两种技术"><a href="#6-2、保存会话的两种技术" class="headerlink" title="6.2、保存会话的两种技术"></a>6.2、保存会话的两种技术</h3><ul>
<li>Cookie<ul>
<li>客户端行为</li>
</ul>
</li>
<li>Session<ul>
<li>服务器行为</li>
</ul>
</li>
</ul>
<h3 id="6-3、Cookie"><a href="#6-3、Cookie" class="headerlink" title="6.3、Cookie"></a>6.3、Cookie</h3><p>1、从请求中拿到Cookie信息</p>
<p>2、服务端设置Cookie信息并响应给客户端</p>
<p><strong>实际Cookie主要是一对键值对，并且都为String格式。</strong></p>
<blockquote>
<p>代码测试</p>
</blockquote>
<p>由于还有其他cookie，所以不能判断cookies数组是否为空来断定是否第一次访问该请求！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.cookieDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        resp.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//获得请求中的所有cookies</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; cookies.length;i++)&#123;</span><br><span class="line">            Cookie cookie = cookies[i];</span><br><span class="line">            <span class="comment">//如果Cookie名字对上</span></span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"Last-Login-Time"</span>))&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                Long timeStamp = Long.parseLong(cookie.getValue());</span><br><span class="line">                resp.getWriter().println(<span class="string">"上次登录时间为："</span>+<span class="keyword">new</span> Date(timeStamp));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="keyword">false</span>)&#123;</span><br><span class="line">            resp.getWriter().println(<span class="string">"您是第一次登录！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        resp.addCookie(<span class="keyword">new</span> Cookie(<span class="string">"Last-Login-Time"</span>,System.currentTimeMillis()+<span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>cookie.setMaxAge(5);</code>——设置有效时间，秒为单位！0值表示删除Cookie，负值表示退出浏览器时删除Cookie。</p>
</li>
<li><p>谷歌浏览器的Cookie目录：<code>C:\Users\用户\AppData\Local\Google\Chrome\User Data\Default</code></p>
</li>
<li><p>一个Cookie只能保存一个信息</p>
</li>
<li><p>一个web站点可以给浏览器发送多个Cookie，最多存放20个Cookie</p>
</li>
<li><p>Cookie大小限制4kb</p>
</li>
<li><p>浏览器上限300个Cookie</p>
</li>
</ul>
<h3 id="6-4、Session"><a href="#6-4、Session" class="headerlink" title="6.4、Session"></a>6.4、Session</h3><blockquote>
<p>什么是Session</p>
</blockquote>
<ul>
<li>服务器会给每一个用户（浏览器）创建一个Session对象</li>
<li>只要浏览器没关闭，Session就存在</li>
</ul>
<p>场景：用户登录后，整个网站都能访问！</p>
<p><strong>方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpSession session = req.getSession();<span class="comment">//从请求中获取session对象，唯一ID</span></span><br><span class="line">String id = session.getId();<span class="comment">//获得唯一ID</span></span><br><span class="line">session.isNew();<span class="comment">//是否为新创建的session</span></span><br><span class="line"></span><br><span class="line">session.setAttribute(<span class="string">"xiaoming"</span>,<span class="keyword">new</span> Student(<span class="string">"1001"</span>,<span class="string">"小明"</span>));<span class="comment">//设置对象</span></span><br><span class="line">session.getAttribute(<span class="string">"xiaoming"</span>);<span class="comment">//获得对象</span></span><br><span class="line"></span><br><span class="line">session.invalidate();<span class="comment">//注销session</span></span><br></pre></td></tr></table></figure>

<p>web.xml中可以设置Session失效时间：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以分钟为单位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Session和Cookie的区别：</p>
<ul>
<li>Cookie是吧用户数据写给用户的浏览器，由浏览器保存，可以多个！</li>
<li>Session把用户数据写到唯一的Session中，由服务端保存（保存重要资源，减少服务器资源浪费！）</li>
<li>Session对象由服务器创建。</li>
</ul>
<blockquote>
<p>Cookie，Session，SevletContext的关系</p>
</blockquote>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210219143300321.png" alt="image-20210219143300321"></p>
<h2 id="7、JSP"><a href="#7、JSP" class="headerlink" title="7、JSP"></a>7、JSP</h2><h3 id="7-1、什么是JSP"><a href="#7-1、什么是JSP" class="headerlink" title="7.1、什么是JSP"></a>7.1、什么是JSP</h3><p><strong>JSP</strong>（全称<strong>J</strong>ava<strong>S</strong>erver <strong>P</strong>ages）是由SUN公司主导创建的一种动态网页技术标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成HTML)、XML或其他格式文档的Web网页，然后返回给请求者。</p>
<p>最大的特点：</p>
<ul>
<li>写JSP就像在写HTML</li>
<li>区别：<ul>
<li>HTML只提供静态数据，即使用到了<code>JavaScript</code>也只是伪动态</li>
<li>JSP页面可以嵌入Java代码，为用户提供动态数据</li>
</ul>
</li>
</ul>
<h3 id="7-2、原理"><a href="#7-2、原理" class="headerlink" title="7.2、原理"></a>7.2、原理</h3><p>JSP编译之后在<code>targrt</code>目录下并未发送任何变化，但是到<code>Tomcat</code>的<code>work</code>目录下发现变成了java文件。</p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210219144702099.png" alt="image-20210219144702099"></p>
<p><strong>浏览器向服务器发送请求，不管访问任何资源，其实都是在访问Servlet</strong></p>
<p>实际上JSP会转换为一个Java类，而这个类继承了<code>org.apache.jasper.runtime.HttpJspBase</code>，而<code>HttpJspBase</code>继承了<code>HttpServlet</code>类</p>
<blockquote>
<p>源码剖析</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;<span class="comment">//销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(<span class="keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="comment">//处理请求的方法</span></span></span><br></pre></td></tr></table></figure>
<p>1、判断请求类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;</span><br><span class="line">     <span class="keyword">final</span> java.lang.String _jspx_method = request.getMethod();</span><br><span class="line">     <span class="keyword">if</span> (<span class="string">"OPTIONS"</span>.equals(_jspx_method)) &#123;</span><br><span class="line">       response.setHeader(<span class="string">"Allow"</span>,<span class="string">"GET, HEAD, POST, OPTIONS"</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (!<span class="string">"GET"</span>.equals(_jspx_method) &amp;&amp; !<span class="string">"POST"</span>.equals(_jspx_method) &amp;&amp; !<span class="string">"HEAD"</span>.equals(_jspx_method)) &#123;</span><br><span class="line">       response.setHeader(<span class="string">"Allow"</span>,<span class="string">"GET, HEAD, POST, OPTIONS"</span>);</span><br><span class="line">       response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="string">"JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS"</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>2、内置了一些对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;<span class="comment">//页面上下文</span></span><br><span class="line">javax.servlet.http.HttpSession session = <span class="keyword">null</span>;	<span class="comment">//session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;	<span class="comment">//ServletContext改名application</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;		<span class="comment">//config配置</span></span><br><span class="line">javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;			<span class="comment">//JSP的输出字符流对象</span></span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;				<span class="comment">//指代当前页的对象</span></span><br><span class="line"></span><br><span class="line">HttpServletRequest request;<span class="comment">//_jspService方法的请求对象</span></span><br><span class="line">HttpServletResponse response；<span class="comment">//_jspService方法的响应对象</span></span><br></pre></td></tr></table></figure>

<p>3、输出页面时执行的一些代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);<span class="comment">//设置页面编码类型</span></span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">                                          <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//获得一些JSP的内置对象</span></span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">      out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure>

<p>4、以上这些对象可以直接在JSP页面使用</p>
<p>当客户端访问一个JSP页面时，发生的事：</p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210219153141502.png" alt="image-20210219153141502"></p>
<h3 id="7-3、JSP基础语法"><a href="#7-3、JSP基础语法" class="headerlink" title="7.3、JSP基础语法"></a>7.3、JSP基础语法</h3><p><strong>JSP表达式</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP表达式--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date()%&gt;</span><br><span class="line">作用：用来将程序的输出，输出到客户端</span><br></pre></td></tr></table></figure>

<p><strong>JSP脚本片段</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    String s = <span class="string">"Hello"</span>;</span><br><span class="line">    out.write(<span class="string">"&lt;h1&gt;"</span>+s+<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>JSP声明</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>JSP声明会被编译到JSP的类中，而JSP脚本，JSP表达式会编译生成到Service方法中。</strong></p>
<p>JSP注释符号：<code>&lt;%--内容--%&gt;</code>，不会输出到浏览器页面。</p>
<p>HTML注释符号：<code>&lt;!--内容--&gt;</code>，会输出到浏览器页面。</p>
<h3 id="7-4、JSP指令"><a href="#7-4、JSP指令" class="headerlink" title="7.4、JSP指令"></a>7.4、JSP指令</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page 参数%&gt;：</span><br><span class="line"></span><br><span class="line">&lt;%@ page pageEncoding=<span class="string">"UTF-8"</span> %&gt;  设置页面编码格式</span><br><span class="line">&lt;%<span class="meta">@page</span> errorPage=<span class="string">""</span> %&gt;	定义此页面为一个错误页面</span><br><span class="line">&lt;%<span class="meta">@page</span> isErrorPage=<span class="string">"true"</span> %&gt;  </span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"com.sun.awt.AWTUtilities"</span> %&gt; 	导入java包</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"common.jsp"</span>%&gt;	把页面合二为一，两个页面变量重复定义会出错！</span><br><span class="line">&lt;jsp:include page=<span class="string">"common.jsp"</span>/&gt;拼接页面</span><br></pre></td></tr></table></figure>

<p><code>web.xml</code>配置自定义错误页面：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">location</span>&gt;</span>error/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-5、9大内置对象"><a href="#7-5、9大内置对象" class="headerlink" title="7.5、9大内置对象"></a>7.5、9大内置对象</h3><ul>
<li><strong>PageContext pageContext;</strong></li>
<li><strong>HttpSession session;</strong></li>
<li><strong>ServletContext application;</strong></li>
<li><strong>ServletConfig config;</strong></li>
<li><strong>JspWriter out;</strong></li>
<li><strong>Object page;</strong></li>
<li><strong>HttpServletRequest request;</strong></li>
<li><strong>HttpServletResponse response;</strong></li>
<li><strong>Exception</strong></li>
</ul>
<blockquote>
<p>在<code>index.jsp</code>中加入如下值：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"name1"</span>);<span class="comment">//保存在页面，只在一个页面中有效</span></span><br><span class="line">request.setAttribute(<span class="string">"name"</span>,<span class="string">"name2"</span>);	<span class="comment">//保存在请求中，只在一次请求中有效</span></span><br><span class="line">session.setAttribute(<span class="string">"name"</span>,<span class="string">"name3"</span>);	<span class="comment">//保存在会话中，从打开浏览器到关闭浏览器有效</span></span><br><span class="line">application.setAttribute(<span class="string">"name"</span>,<span class="string">"name4"</span>);<span class="comment">//保存在ServletContext中，服务器端，从服务器开机到关机有效</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在同一个浏览器的另外一个<code>jsp2.jsp</code>页面中取值：只能取到到name2，name3,</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: CodeFriday</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">2</span>/<span class="number">19</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">45</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;找到的值&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String name1 = (String) pageContext.findAttribute(<span class="string">"name1"</span>);</span><br><span class="line">    String name2 = (String) pageContext.findAttribute(<span class="string">"name2"</span>);</span><br><span class="line">    String name3 = (String) pageContext.findAttribute(<span class="string">"name3"</span>);</span><br><span class="line">    String name4 = (String) pageContext.findAttribute(<span class="string">"name4"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--EL表达式取值--%&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name1&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name2&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name3&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name4&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210219185022492.png" alt="image-20210219185022492"></p>
<blockquote>
<p>修改index.jsp，转发请求到jsp2.jsp</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--JSP表达式--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date()%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"name1"</span>,<span class="string">"name1"</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"name2"</span>,<span class="string">"name2"</span>);</span><br><span class="line">    session.setAttribute(<span class="string">"name3"</span>,<span class="string">"name3"</span>);</span><br><span class="line">    application.setAttribute(<span class="string">"name4"</span>,<span class="string">"name4"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;找到的值&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String name1 = (String) pageContext.findAttribute(<span class="string">"name1"</span>);</span><br><span class="line">    String name2 = (String) pageContext.findAttribute(<span class="string">"name2"</span>);</span><br><span class="line">    String name3 = (String) pageContext.findAttribute(<span class="string">"name3"</span>);</span><br><span class="line">    String name4 = (String) pageContext.findAttribute(<span class="string">"name4"</span>);</span><br><span class="line">    pageContext.forward(<span class="string">"/jsp2.jsp"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--EL表达式取值--%&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name1&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name2&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name3&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name4&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>取到的值：</p>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210219185207428.png" alt="image-20210219185207428"></p>
<blockquote>
<p>另外一个浏览器，单独请求jsp2.jsp，开启另外一个会话，只能去到application中的值</p>
</blockquote>
<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210219185257933.png" alt="image-20210219185257933"></p>
<h3 id="7-6、JSP标签，JSTL标签，EL表达式"><a href="#7-6、JSP标签，JSTL标签，EL表达式" class="headerlink" title="7.6、JSP标签，JSTL标签，EL表达式"></a>7.6、JSP标签，JSTL标签，EL表达式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSTL表达式的包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JSTL表达式依赖的标签库 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.taglibs/taglibs-standard-impl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>EL表达式：${}</p>
</blockquote>
<ul>
<li>获取数据</li>
<li>执行运算</li>
<li>获取web开发常用对象</li>
</ul>
<blockquote>
<p>JSP标签</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">""</span>/&gt;拼接页面</span><br><span class="line">&lt;jsp:forward page=<span class="string">"/jsp2.jsp"</span>&gt;<span class="comment">//跳转页面</span></span><br><span class="line">    &lt;jsp:param name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;<span class="comment">//携带的参数</span></span><br><span class="line">    &lt;jsp:param name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>

<p>上述跳转等价于：<code>项目/jsp2.jsp?username=root&amp;password=123456</code></p>
<p>jsp1.jsp：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:forward page=<span class="string">"/jsp2.jsp"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>jsp2.jsp：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jsp1跳转的值：&lt;/h1&gt;</span><br><span class="line">&lt;%=request.getParameter(<span class="string">"username"</span>)%&gt;</span><br><span class="line">&lt;%=request.getParameter(<span class="string">"password"</span>)%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210219202220358.png" alt="image-20210219202220358"></p>
<blockquote>
<p>JSTL</p>
</blockquote>
<p>JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。标签的功能和java代码一样。</p>
<ul>
<li><strong>核心标签</strong></li>
</ul>
<p>引用标签库需要加上：<code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></p>
<blockquote>
<p><code>&lt;c:out&gt;</code> 标签</p>
</blockquote>
<p>语法格式：<code>&lt;c:out value=&quot;&lt;string&gt;&quot; default=&quot;&lt;string&gt;&quot; escapeXml=&quot;&lt;true|false&gt;&quot;/&gt;</code></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value（必要）</td>
<td align="center">要输出的内容</td>
</tr>
<tr>
<td align="center">default</td>
<td align="center">输出的默认内容</td>
</tr>
<tr>
<td align="center">escapeXml</td>
<td align="center">是否忽略XML特殊字符</td>
</tr>
</tbody></table>
<p>测试：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;c:out 标签实例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--当value为<span class="keyword">null</span>时--%&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;null&#125;"</span> <span class="keyword">default</span>=<span class="string">"默认值"</span> escapeXml=<span class="string">"true"</span>/&gt;&lt;br&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"&amp;lt忽略xml字符时&amp;gt"</span> <span class="keyword">default</span>=<span class="string">"默认值"</span> escapeXml=<span class="string">"true"</span>/&gt;&lt;br&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"&amp;lt不忽略xml字符时&amp;gt"</span> <span class="keyword">default</span>=<span class="string">"默认值"</span> escapeXml=<span class="string">"false"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">默认值</span><br><span class="line">&amp;lt忽略xml字符时&amp;gt</span><br><span class="line"><span class="tag">&lt;<span class="name">不忽略xml字符时</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>&lt;c:set&gt;</code>标签</p>
</blockquote>
<p>语法格式：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:set</span><br><span class="line">   <span class="keyword">var</span>=<span class="string">"&lt;string&gt;"</span></span><br><span class="line">   value=<span class="string">"&lt;string&gt;"</span></span><br><span class="line">   target=<span class="string">"&lt;string&gt;"</span></span><br><span class="line">   property=<span class="string">"&lt;string&gt;"</span></span><br><span class="line">   scope=<span class="string">"&lt;string&gt;"</span>/&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">要存储的值</td>
</tr>
<tr>
<td align="center">target</td>
<td align="center">要修改的属性所属的对象</td>
</tr>
<tr>
<td align="center">property</td>
<td align="center">要修改的属性</td>
</tr>
<tr>
<td align="center">var</td>
<td align="center">存储信息的变量</td>
</tr>
<tr>
<td align="center">scope</td>
<td align="center">var属性的作用域（四大作用域）</td>
</tr>
</tbody></table>
<p>如果指定了target属性，那么property属性也需要被指定。</p>
<p>测试代码：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"name"</span> scope=<span class="string">"session"</span> value=<span class="string">"CodeFriday"</span>/&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;name&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>&lt;c:if&gt;</code>标签</p>
</blockquote>
<p>语法格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;c:if test&#x3D;&quot;&lt;boolean&gt;&quot; var&#x3D;&quot;&lt;string&gt;&quot; scope&#x3D;&quot;&lt;string&gt;&quot;&gt;</span><br><span class="line">   ...</span><br><span class="line">&lt;&#x2F;c:if&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"><strong>属性</strong></th>
<th align="center"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">test（必要）</td>
<td align="center">条件</td>
</tr>
<tr>
<td align="center">var</td>
<td align="center">用于存储条件结果的变量</td>
</tr>
<tr>
<td align="center">scope</td>
<td align="center">var属性的作用域</td>
</tr>
</tbody></table>
<blockquote>
<p><code>&lt;c:choose&gt;</code>, <code>&lt;c:when&gt;</code>, <code>&lt;c:otherwise&gt;</code>标签</p>
</blockquote>
<p>语法格式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"&lt;boolean&gt;"</span>&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"&lt;boolean&gt;"</span>&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>

<p>等价于<code>switch-case</code>，<code>&lt;c:choose&gt;</code>，<code>&lt;c:otherwise&gt;</code>均无属性！</p>
<p><code>&lt;c:when&gt;</code>标签的属性如下：</p>
<table>
<thead>
<tr>
<th align="center"><strong>属性</strong></th>
<th align="center"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">test（必要）</td>
<td align="center">条件</td>
</tr>
</tbody></table>
<blockquote>
<p><code>&lt;c:forEach&gt;</code>, <code>&lt;c:forTokens&gt;</code>标签</p>
</blockquote>
<p><strong>forEach 语法格式</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach</span><br><span class="line">    items=<span class="string">"&lt;object&gt;"</span></span><br><span class="line">    begin=<span class="string">"&lt;int&gt;"</span></span><br><span class="line">    end=<span class="string">"&lt;int&gt;"</span></span><br><span class="line">    step=<span class="string">"&lt;int&gt;"</span></span><br><span class="line">    <span class="keyword">var</span>=<span class="string">"&lt;string&gt;"</span></span><br><span class="line">    varStatus=<span class="string">"&lt;string&gt;"</span>&gt;</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;c:out 标签实例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    arrayList.add(<span class="number">0</span>,<span class="string">"Item1"</span>);</span><br><span class="line">    arrayList.add(<span class="number">1</span>,<span class="string">"Item2"</span>);</span><br><span class="line">    arrayList.add(<span class="number">2</span>,<span class="string">"Item3"</span>);</span><br><span class="line">    arrayList.add(<span class="number">3</span>,<span class="string">"Item4"</span>);</span><br><span class="line">    arrayList.add(<span class="number">4</span>,<span class="string">"Item5"</span>);</span><br><span class="line">    session.setAttribute(<span class="string">"items"</span>,arrayList);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;items&#125;"</span> <span class="keyword">var</span>=<span class="string">"itemx"</span> begin=<span class="string">"0"</span> end=<span class="string">"4"</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;itemx&#125;"</span>/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>forTokens 语法格式</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:forTokens</span><br><span class="line">    items=<span class="string">"&lt;string&gt;"</span></span><br><span class="line">    delims=<span class="string">"&lt;string&gt;"</span></span><br><span class="line">    begin=<span class="string">"&lt;int&gt;"</span></span><br><span class="line">    end=<span class="string">"&lt;int&gt;"</span></span><br><span class="line">    step=<span class="string">"&lt;int&gt;"</span></span><br><span class="line">    <span class="keyword">var</span>=<span class="string">"&lt;string&gt;"</span></span><br><span class="line">    varStatus=<span class="string">"&lt;string&gt;"</span>&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"><strong>属性</strong></th>
<th align="center"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">items</td>
<td align="center">要被循环的信息</td>
</tr>
<tr>
<td align="center">begin</td>
<td align="center">开始的元素（0=第一个元素，1=第二个元素）</td>
</tr>
<tr>
<td align="center">end</td>
<td align="center">最后一个元素（0=第一个元素，1=第二个元素）</td>
</tr>
<tr>
<td align="center">step</td>
<td align="center">每一次迭代的步长</td>
</tr>
<tr>
<td align="center">var</td>
<td align="center">代表当前条目的变量名称</td>
</tr>
<tr>
<td align="center">varStatus</td>
<td align="center">代表循环状态的变量名称</td>
</tr>
</tbody></table>
<p><code>&lt;c:forTokens&gt;</code>标签多出的属性：delims表示分隔符</p>
<ul>
<li><del><strong>格式化标签</strong></del></li>
<li><del><strong>SQL 标签</strong></del></li>
<li><del><strong>XML 标签</strong></del></li>
<li><del><strong>JSTL 函数</strong></del></li>
</ul>
<h2 id="8、JavaBean"><a href="#8、JavaBean" class="headerlink" title="8、JavaBean"></a>8、JavaBean</h2><p>实体类，JavaBean特定写法</p>
<ul>
<li>必须有一个无参构造</li>
<li>属性必须私有</li>
<li>必须有对应的get/set方法</li>
</ul>
<p>一般用来和数据库字段做映射ORM；</p>
<p>ORM：对象关系映射</p>
<ul>
<li>表—-&gt;类</li>
<li>字段—-&gt;属性</li>
<li>行记录—-&gt;对象</li>
</ul>
<h2 id="9、MVC三层架构"><a href="#9、MVC三层架构" class="headerlink" title="9、MVC三层架构"></a>9、MVC三层架构</h2><p><img src="/2021/02/18/JavaWeb%E5%AD%A6%E4%B9%A0/image-20210220122100864.png" alt="image-20210220122100864"></p>
<ul>
<li><p>Model</p>
<ul>
<li>业务处理：业务逻辑（Service）</li>
<li>数据持久层：CRUD（DAO）</li>
</ul>
</li>
<li><p>View</p>
<ul>
<li>展示数据</li>
<li>提供链接发起Servlet请求</li>
</ul>
</li>
<li><p>Controller</p>
<ul>
<li>接收请求（Request，拿到请求参数、Session信息）</li>
<li>交给业务层处理对应的请求</li>
<li>控制视图跳转</li>
</ul>
</li>
</ul>
<h2 id="10、Filter过滤器"><a href="#10、Filter过滤器" class="headerlink" title="10、Filter过滤器"></a>10、Filter过滤器</h2><p>一般在web服务器和服务器资源之间：</p>
<ul>
<li>处理乱码问题</li>
<li>过滤垃圾请求</li>
</ul>
<p>测试场景：解决中文乱码，原来在servlet中设置request和response对象的编码，但是每个请求都需要，因此提出公共部分得到过滤器。</p>
<p>1、导入包：<code>javax.servlet.Filter</code>，是一个接口</p>
<p>2、实现接口，重写三个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//web服务器启动时初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter初始化···"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//web服务器关闭时销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter已销毁！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter执行前···"</span>);</span><br><span class="line">        <span class="comment">//chain表示链，可以多个过滤器</span></span><br><span class="line">        chain.doFilter(request,response);<span class="comment">//让程序继续执行，如果不写请求会被拦截停止，必须写的死代码</span></span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter执行后···"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、配置<code>web.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.codefriday.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--过滤/servlet下的所有请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="11、Listener监听器"><a href="#11、Listener监听器" class="headerlink" title="11、Listener监听器"></a>11、Listener监听器</h2><p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext context = se.getSession().getServletContext();</span><br><span class="line">        Integer count = (Integer)context.getAttribute(<span class="string">"Count"</span>);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="keyword">null</span>)&#123;</span><br><span class="line">            context.setAttribute(<span class="string">"Count"</span>,<span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            count = <span class="keyword">new</span> Integer(count.intValue()+<span class="number">1</span>);</span><br><span class="line">            context.setAttribute(<span class="string">"Count"</span>,count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext context = se.getSession().getServletContext();</span><br><span class="line">        se.getSession().invalidate();</span><br><span class="line">        Integer count = (Integer)context.getAttribute(<span class="string">"Count"</span>);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="keyword">null</span>)&#123;</span><br><span class="line">            context.setAttribute(<span class="string">"Count"</span>,<span class="keyword">new</span> Integer(<span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            count = <span class="keyword">new</span> Integer(count.intValue()-<span class="number">1</span>);</span><br><span class="line">            context.setAttribute(<span class="string">"Count"</span>,count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>web.xml</code>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.codefriday.listener.TestListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>第四阶段</category>
      </categories>
      <tags>
        <tag>第四阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>GUI实时聊天</title>
    <url>/2021/02/17/GUI%E5%AE%9E%E6%97%B6%E8%81%8A%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="Github仓库地址"><a href="#Github仓库地址" class="headerlink" title="Github仓库地址"></a>Github仓库地址</h2><p><a href="https://github.com/jinyalong/Multithreading_UDP_GUI_Chat" target="_blank" rel="noopener">https://github.com/jinyalong/Multithreading_UDP_GUI_Chat</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>通信协议选择UDP，由于UDP不需要连接，因此只能单向发送所以还需要多线程，同时开启两个线程，一个线程负责接收消息，一个线程负责发送消息，然后还写了个窗口，黑框框运行程序太难看，因此用到了GUI。</p>
</blockquote>
<p>多线程聊天已经实现过，只需要稍微改动结合一下GUI使用即可。</p>
<p>多线程聊天博客链接：<a href="https://www.codefriday.cn/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/" target="_blank" rel="noopener">https://www.codefriday.cn/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</a></p>
<h2 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h2><p>主要绘制一个窗体大小，设置了不可拉伸、可见性以及默认的关闭事件！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Start</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">"UDP多线程聊天程序"</span>);</span><br><span class="line">        <span class="comment">//frame.add(new JPanel());</span></span><br><span class="line">        frame.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        Window.addComponents(frame);</span><br><span class="line">        frame.setBounds(<span class="number">10</span>,<span class="number">10</span>,<span class="number">520</span>,<span class="number">400</span>);<span class="comment">//窗口大小</span></span><br><span class="line">        frame.setResizable(<span class="keyword">false</span>);<span class="comment">//不可拉伸</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);<span class="comment">//设置可见性</span></span><br><span class="line">        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<span class="comment">//默认关闭事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="程序窗口类"><a href="#程序窗口类" class="headerlink" title="程序窗口类"></a>程序窗口类</h2><p>使用绝对布局，手动计算每个组件的位置，窗体大小！</p>
<p><img src="/2021/02/17/GUI%E5%AE%9E%E6%97%B6%E8%81%8A%E5%A4%A9/image-20210217191348281.png" alt="image-20210217191348281"></p>
<blockquote>
<p>逻辑</p>
</blockquote>
<p>只需为连接和发送消息两个按钮添加监听事件。</p>
<p>连接按钮被按下时，设置IP，端口等信息不可编辑，未加验证！！！也就是输入不合法未检测<del>~</del></p>
<p>然后获取输入框的信息并开启两个线程，一个发送信息，一个接收信息。</p>
<blockquote>
<p>发送信息</p>
</blockquote>
<p>设置一个全局变量表示是否需要发送信息，然后<code>TalkSend</code>线程中是一个<code>while</code>循环检测标志位，是否有发送信息的任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TextField field = <span class="keyword">null</span>;<span class="comment">//对方IP</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TextField field1 = <span class="keyword">null</span>;<span class="comment">//对方端口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TextField field2 = <span class="keyword">null</span>;<span class="comment">//自己端口，跑这个程序的端口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TextField field3 = <span class="keyword">null</span>;<span class="comment">//自己名字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JTextField field4 = <span class="keyword">null</span>;<span class="comment">//发送的消息内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TextField field5 = <span class="keyword">null</span>;<span class="comment">//接收消息的端口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JButton btn1 = <span class="keyword">null</span>;<span class="comment">//连接按钮</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JButton btn2 = <span class="keyword">null</span>;<span class="comment">//发送按钮</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JTextArea textArea = <span class="keyword">null</span>;<span class="comment">//消息文本域</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//全局状态，表示是否点了发送信息，处理完之后标志位翻转</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> IsConn = <span class="keyword">false</span>;<span class="comment">//全局状态，是否连接中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addComponents</span><span class="params">(JFrame frame)</span></span>&#123;</span><br><span class="line">        <span class="comment">//ip地址</span></span><br><span class="line">        Label ToIP = <span class="keyword">new</span> Label(<span class="string">"To IP："</span>);</span><br><span class="line">        ToIP.setBounds(<span class="number">10</span>,<span class="number">10</span>,<span class="number">65</span>,<span class="number">25</span>);</span><br><span class="line">        ToIP.setBackground(Color.cyan);</span><br><span class="line">        field = <span class="keyword">new</span> TextField(<span class="string">"127.0.0.1"</span>,<span class="number">20</span>);</span><br><span class="line">        field.setBounds(<span class="number">80</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">25</span>);</span><br><span class="line">        frame.add(ToIP);</span><br><span class="line">        frame.add(field);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对方端口</span></span><br><span class="line">        Label ToPort = <span class="keyword">new</span> Label(<span class="string">"To Port："</span>);</span><br><span class="line">        ToPort.setBounds(<span class="number">170</span>,<span class="number">10</span>,<span class="number">65</span>,<span class="number">25</span>);</span><br><span class="line">        ToPort.setBackground(Color.cyan);</span><br><span class="line">        field1 = <span class="keyword">new</span> TextField(<span class="string">"9999"</span>,<span class="number">20</span>);</span><br><span class="line">        field1.setBounds(<span class="number">245</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">25</span>);</span><br><span class="line">        frame.add(ToPort);</span><br><span class="line">        frame.add(field1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自己端口</span></span><br><span class="line">        Label FromPort = <span class="keyword">new</span> Label(<span class="string">"From Port："</span>);</span><br><span class="line">        FromPort.setBounds(<span class="number">335</span>,<span class="number">10</span>,<span class="number">65</span>,<span class="number">25</span>);</span><br><span class="line">        FromPort.setBackground(Color.cyan);</span><br><span class="line">        field2 = <span class="keyword">new</span> TextField(<span class="string">"6666"</span>);</span><br><span class="line">        field2.setBounds(<span class="number">410</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">25</span>);</span><br><span class="line">        frame.add(FromPort);</span><br><span class="line">        frame.add(field2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接名字</span></span><br><span class="line">        Label YourName = <span class="keyword">new</span> Label(<span class="string">"YourName："</span>);</span><br><span class="line">        YourName.setBounds(<span class="number">10</span>,<span class="number">45</span>,<span class="number">65</span>,<span class="number">25</span>);</span><br><span class="line">        YourName.setBackground(Color.cyan);</span><br><span class="line">        field3 = <span class="keyword">new</span> TextField(<span class="string">"Bob"</span>,<span class="number">20</span>);</span><br><span class="line">        field3.setBounds(<span class="number">80</span>,<span class="number">45</span>,<span class="number">80</span>,<span class="number">25</span>);</span><br><span class="line">        frame.add(YourName);</span><br><span class="line">        frame.add(field3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自己的接收端口</span></span><br><span class="line">        Label YourPort = <span class="keyword">new</span> Label(<span class="string">"YourPort："</span>);</span><br><span class="line">        YourPort.setBounds(<span class="number">170</span>,<span class="number">45</span>,<span class="number">65</span>,<span class="number">25</span>);</span><br><span class="line">        YourPort.setBackground(Color.cyan);</span><br><span class="line">        field5 = <span class="keyword">new</span> TextField(<span class="string">"5555"</span>,<span class="number">20</span>);</span><br><span class="line">        field5.setBounds(<span class="number">245</span>,<span class="number">45</span>,<span class="number">80</span>,<span class="number">25</span>);</span><br><span class="line">        frame.add(YourPort);</span><br><span class="line">        frame.add(field5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接按钮</span></span><br><span class="line">        btn1 = <span class="keyword">new</span> JButton(<span class="string">"连接"</span>);</span><br><span class="line">        btn1.setBounds(<span class="number">400</span>,<span class="number">45</span>,<span class="number">100</span>,<span class="number">25</span>);</span><br><span class="line">        frame.add(btn1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消息记录</span></span><br><span class="line">        Label Message = <span class="keyword">new</span> Label(<span class="string">"Message:"</span>);</span><br><span class="line">        Message.setBounds(<span class="number">10</span>,<span class="number">80</span>,<span class="number">65</span>,<span class="number">25</span>);</span><br><span class="line">        Message.setBackground(Color.cyan);</span><br><span class="line">        textArea = <span class="keyword">new</span> JTextArea();</span><br><span class="line">        textArea.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">        JScrollPane jp = <span class="keyword">new</span> JScrollPane(textArea);</span><br><span class="line">        textArea.setEditable(<span class="keyword">false</span>);</span><br><span class="line">        textArea.setBounds(<span class="number">85</span>,<span class="number">80</span>,<span class="number">410</span>,<span class="number">200</span>);</span><br><span class="line">        jp.setBounds(<span class="number">85</span>,<span class="number">80</span>,<span class="number">410</span>,<span class="number">200</span>);</span><br><span class="line">        frame.add(Message);</span><br><span class="line">        frame.add(jp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消息内容</span></span><br><span class="line">        field4 = <span class="keyword">new</span> JTextField();</span><br><span class="line">        field4.setBounds(<span class="number">85</span>,<span class="number">290</span>,<span class="number">300</span>,<span class="number">25</span>);</span><br><span class="line">        frame.add(field4);</span><br><span class="line">        <span class="comment">//消息发送按钮</span></span><br><span class="line">        btn2 = <span class="keyword">new</span> JButton(<span class="string">"发送消息"</span>);</span><br><span class="line">        btn2.setBounds(<span class="number">400</span>,<span class="number">290</span>,<span class="number">100</span>,<span class="number">25</span>);</span><br><span class="line">        frame.add(btn2);</span><br><span class="line"></span><br><span class="line">        Label author = <span class="keyword">new</span> Label(<span class="string">"by:codefriday  QQ:853851430"</span>);</span><br><span class="line">        author.setFont(<span class="keyword">new</span> Font(<span class="string">"楷体"</span>,Font.BOLD,<span class="number">16</span>));</span><br><span class="line">        author.setBounds(<span class="number">10</span>,<span class="number">325</span>,<span class="number">400</span>,<span class="number">25</span>);</span><br><span class="line">        frame.add(author);</span><br><span class="line"></span><br><span class="line">        btn1.addActionListener(<span class="keyword">new</span> ActionListener() &#123;<span class="comment">//相应连接/断开连接按钮</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(IsConn == <span class="keyword">false</span>)&#123;</span><br><span class="line">                    String ToIP = field.getText();</span><br><span class="line">                    <span class="keyword">int</span> ToPort = Integer.parseInt(field1.getText());</span><br><span class="line">                    <span class="keyword">int</span> FromPort = Integer.parseInt(field2.getText());</span><br><span class="line">                    String name = field3.getText();</span><br><span class="line">                    <span class="keyword">int</span> YourPort = Integer.parseInt(field5.getText());</span><br><span class="line">                    <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(FromPort,ToIP,ToPort)).start();</span><br><span class="line">                    <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(YourPort,name)).start();</span><br><span class="line"></span><br><span class="line">                    IsConn = <span class="keyword">true</span>;</span><br><span class="line">                    field.setEditable(<span class="keyword">false</span>);</span><br><span class="line">                    field1.setEditable(<span class="keyword">false</span>);</span><br><span class="line">                    field2.setEditable(<span class="keyword">false</span>);</span><br><span class="line">                    field3.setEditable(<span class="keyword">false</span>);</span><br><span class="line">                    field5.setEditable(<span class="keyword">false</span>);</span><br><span class="line">                    btn1.setText(<span class="string">"断开连接"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    textArea.setText(<span class="string">""</span>);</span><br><span class="line">                    IsConn = <span class="keyword">false</span>;</span><br><span class="line">                    field.setEditable(<span class="keyword">true</span>);</span><br><span class="line">                    field1.setEditable(<span class="keyword">true</span>);</span><br><span class="line">                    field2.setEditable(<span class="keyword">true</span>);</span><br><span class="line">                    field3.setEditable(<span class="keyword">true</span>);</span><br><span class="line">                    field5.setEditable(<span class="keyword">true</span>);</span><br><span class="line">                    btn1.setText(<span class="string">"连接"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        btn2.addActionListener(<span class="keyword">new</span> ActionListener() &#123;<span class="comment">//发送消息</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TalkSend线程"><a href="#TalkSend线程" class="headerlink" title="TalkSend线程"></a>TalkSend线程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkSend</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fromPort;</span><br><span class="line">    <span class="keyword">private</span> String toIP;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toPort;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkSend</span><span class="params">(<span class="keyword">int</span> fromPort, String toIP, <span class="keyword">int</span> toPort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fromPort = fromPort;</span><br><span class="line">        <span class="keyword">this</span>.toIP = toIP;</span><br><span class="line">        <span class="keyword">this</span>.toPort = toPort;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(fromPort);</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Window.flag==<span class="keyword">true</span>)&#123;</span><br><span class="line">                    String msg = Window.field4.getText();</span><br><span class="line">                    Window.field4.setText(<span class="string">""</span>);</span><br><span class="line">                    Window.flag = <span class="keyword">false</span>;</span><br><span class="line">                    Window.textArea.append(<span class="string">"你说:"</span>+<span class="string">":"</span>+msg+<span class="string">'\n'</span>);</span><br><span class="line">                    DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(msg.getBytes(),<span class="number">0</span>,msg.getBytes().length, InetAddress.getByName(toIP),toPort);</span><br><span class="line">                    socket.send(packet);</span><br><span class="line">                    <span class="keyword">if</span>(msg.equals(<span class="string">"bye"</span>))&#123;</span><br><span class="line">                        Window.IsConn = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TalkReceive线程"><a href="#TalkReceive线程" class="headerlink" title="TalkReceive线程"></a>TalkReceive线程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkReceive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msgFrom;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toPort;</span><br><span class="line">    DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkReceive</span><span class="params">(<span class="keyword">int</span> toPort,String msgFrom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msgFrom = msgFrom;</span><br><span class="line">        <span class="keyword">this</span>.toPort = toPort;</span><br><span class="line">        buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(toPort);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer,<span class="number">0</span>,buffer.length);</span><br><span class="line">                socket.receive(packet);</span><br><span class="line">                <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">                String msg = <span class="keyword">new</span> String(data,<span class="number">0</span>,data.length);</span><br><span class="line">                Window.textArea.append(msgFrom+<span class="string">":"</span>+msg+<span class="string">'\n'</span>);</span><br><span class="line">                <span class="keyword">if</span>(msg.equals(<span class="string">"bye"</span>))&#123;</span><br><span class="line">                    Window.IsConn = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>然后打包成jar包，方便同时运行两个进行测试！</strong></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="/2021/02/17/GUI%E5%AE%9E%E6%97%B6%E8%81%8A%E5%A4%A9/image-20210217192725134.png" alt="image-20210217192725134"></p>
<h2 id="jar包下载地址"><a href="#jar包下载地址" class="headerlink" title="jar包下载地址"></a>jar包下载地址</h2><p>链接：<a href="https://share.weiyun.com/CJRLkmBx" target="_blank" rel="noopener">https://share.weiyun.com/CJRLkmBx</a> 密码：rq3tpg</p>
]]></content>
      <categories>
        <category>实战项目</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2021/02/17/MySQL/</url>
    <content><![CDATA[<h2 id="1、概述及准备工作"><a href="#1、概述及准备工作" class="headerlink" title="1、概述及准备工作"></a>1、概述及准备工作</h2><p>数据库（DB，DateBase）</p>
<p>概念：安装在操作系统（Windows，Linux，Mac…）上的软件，用于存储和管理数据。</p>
<blockquote>
<p>数据库分类</p>
</blockquote>
<p><strong>关系型数据库：</strong>（SQL）</p>
<ul>
<li>MySQL，Oracle，Sql Server，DB2，SQLlite</li>
<li>通过表和表之间，行和列之间关系进行数据的存储。</li>
</ul>
<p><strong>非关系型数据库：</strong>（NoSQL）——Not Only</p>
<ul>
<li>Redis，MongDB</li>
<li>以对象存储，通过对象自身的属性来决定。</li>
</ul>
<blockquote>
<p>DBMS（数据库管理系统）</p>
</blockquote>
<ul>
<li>数据库的管理软件，科学有效的管理数据，维护和获取数据。</li>
<li>MySQL本质就是一个数据库管理系统！</li>
</ul>
<p><img src="/2021/02/17/MySQL/image-20210210132615008.png" alt="image-20210210132615008"></p>
<blockquote>
<p>MySQL简介</p>
</blockquote>
<p><img src="/2021/02/17/MySQL/image-20210210132719212.png" alt="image-20210210132719212"></p>
<p>官网：<a href="https://www.mysql.com" target="_blank" rel="noopener">https://www.mysql.com</a></p>
<p>5.7：稳定版</p>
<blockquote>
<p>压缩包版MySQL安装5.7</p>
</blockquote>
<p>压缩包下载地址：<a href="https://dev.mysql.com/downloads/mysql/5.7.html" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/5.7.html</a></p>
<p>1、官网下载压缩包，并解压到相关目录</p>
<p>2、配置环境变量：<code>此电脑-右键属性-高级系统设置-环境变量</code>，<code>Path</code>目录新增Mysql压缩包bin目录的路径</p>
<p><img src="/2021/02/17/MySQL/image-20210210141411892.png" alt="image-20210210141411892"></p>
<p>3、在MySQL目录下新建<code>my.ini</code>配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span>  </span><br><span class="line"><span class="comment">#第一个为Mysql解压目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\Environment\mysql-<span class="number">5.7</span>.<span class="number">33</span>\</span><br><span class="line"><span class="comment">#第二个为data目录，无需自己新建！！！会自动生成</span></span><br><span class="line"><span class="attr">datadir</span>=D:\Environment\mysql-<span class="number">5.7</span>.<span class="number">33</span>\data\</span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment">#第一次登录跳过密码</span></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>

<p>4、<strong>管理员模式</strong>启动<code>CMD</code>，切换到MySQL目录下的<code>bin</code>目录，执行指令<code>mysqld install</code>，可能会提示缺少<code>dll</code>文件安装失败，需要到微软官网下载一个插件！</p>
<p><img src="/2021/02/17/MySQL/20200618113646466.png" alt="在这里插入图片描述"></p>
<p><strong>下载 vcredist 地址：</strong><a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=40784" target="_blank" rel="noopener">https://www.microsoft.com/zh-CN/download/details.aspx?id=40784</a></p>
<p><img src="/2021/02/17/MySQL/image-20210210141900322.png" alt="image-20210210141900322"></p>
<p>5、初始化，会创建<code>data</code>文件夹。执行指令<code>mysqld --initialize-insecure --user=mysql</code></p>
<p>6、执行指令<code>net start mysql</code>启动mysql服务</p>
<p><img src="/2021/02/17/MySQL/image-20210210142049821.png" alt="image-20210210142049821"></p>
<p>7、执行指令<code>mysql -u root -p</code>登入mysql，由于之前的设置是不需要密码就直接登录的，看到输入密码的提示直接回车即可。然后命令行提示变成<code>mysql&gt;</code>即为成功了。</p>
<p>8、执行命令修改密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update mysql.user set authentication_string=password('123456') where user='root' and Host = 'localhost';</span><br></pre></td></tr></table></figure>

<p>9、 <code>flush privileges;</code>刷新权限，然后把<code>my.ini</code>中最后一行跳过密码验证删除。(<code>skip-grant-tables</code>)</p>
<p>10、停止mysql服务的命令<code>net stop mysql</code>；</p>
<p><img src="/2021/02/17/MySQL/image-20210210143321098.png" alt="image-20210210143321098"></p>
<blockquote>
<p>安装SQLyog</p>
</blockquote>
<p>命令行操作数据库不直观，因此下载一些可视化软件，在此我使用了MySQLyog</p>
<p>官网：<a href="https://store.webyog.com/product/sqlyogpricing" target="_blank" rel="noopener">https://store.webyog.com/product/sqlyogpricing</a></p>
<p>网上嫖注册码<del>~</del></p>
<h2 id="2、操作数据库"><a href="#2、操作数据库" class="headerlink" title="2、操作数据库"></a>2、操作数据库</h2><h3 id="2-1、基础命令"><a href="#2-1、基础命令" class="headerlink" title="2.1、基础命令"></a>2.1、基础命令</h3><blockquote>
<p>连接数据库</p>
</blockquote>
<p>命令行连接：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456	<span class="comment">--连接数据库</span></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'123456'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span> <span class="keyword">and</span> Host = <span class="string">'localhost'</span>;	<span class="comment">--修改密码</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;	<span class="comment">--刷新权限</span></span><br><span class="line"><span class="comment">----------------------------------------</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;		<span class="comment">--	查看所有数据库</span></span><br><span class="line"></span><br><span class="line">mysql&gt; use school;</span><br><span class="line">Database changed	<span class="comment">-- 	切换数据库命令——use 数据库名</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;		<span class="comment">--	查看数据库中所有的表</span></span><br><span class="line"><span class="keyword">describe</span> student;	<span class="comment">--	显示表的详细信息</span></span><br><span class="line"></span><br><span class="line">mysql&gt; describe student;</span><br><span class="line">+<span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line">| Field | Type         | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line">| id    | int(10)      | NO   | PRI | NULL    |       |</span><br><span class="line">| name  | varchar(100) | NO   |     | NULL    |       |</span><br><span class="line">| age   | int(3)       | NO   |     | NULL    |       |</span><br><span class="line">+<span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 名字;	<span class="comment">--	创建数据库</span></span><br><span class="line">exit;		<span class="comment">--	退出连接</span></span><br><span class="line">sql的单行注释：	<span class="comment">--</span></span><br><span class="line">sql的多行注释：	<span class="comment">/**/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>数据库语言分类</p>
</blockquote>
<p><strong>数据库xxx语言</strong></p>
<p><strong>DDL——定义</strong></p>
<p><strong>DML——操作，管理</strong></p>
<p><strong>DQL——查询</strong></p>
<p><strong>DCL——控制</strong></p>
<h3 id="2-2、数据库的列类型"><a href="#2-2、数据库的列类型" class="headerlink" title="2.2、数据库的列类型"></a>2.2、数据库的列类型</h3><blockquote>
<p>数值</p>
</blockquote>
<ul>
<li><p>tinyint              1个字节</p>
</li>
<li><p>smallint           2个字节</p>
</li>
<li><p>mediumint      3个字节</p>
</li>
<li><p><strong>int 标准的整数 4个字节</strong></p>
</li>
<li><p>bigint                 8个字节</p>
</li>
<li><p>float   浮点数     4字节</p>
</li>
<li><p>double               8字节</p>
</li>
<li><p>decimal 字符串形式浮点数     金融计算的时候一般用精确的decimal</p>
</li>
</ul>
<blockquote>
<p>字符串</p>
</blockquote>
<ul>
<li><p>char        字符串固定大小，0-255，</p>
</li>
<li><p><strong>varchar  可变字符串  0-65535</strong>  </p>
</li>
<li><p>tinytext   微型文本   2^8-1</p>
</li>
<li><p><strong>text          文本串       2^16-1  保存大文本。</strong></p>
</li>
</ul>
<blockquote>
<p>时间日期</p>
</blockquote>
<ul>
<li>date    YYYY-MM-DD    日期格式</li>
<li>time    HH:mm:ss    时间格式</li>
<li><strong>datetime    YYYY-MM-DD HH:mm:ss    最常用的时间格式</strong></li>
<li><strong>timestamp    时间戳，1970-01-01到现在的毫秒数。</strong></li>
<li>year    年份表示</li>
</ul>
<blockquote>
<p>null</p>
</blockquote>
<ul>
<li>没有值，未知</li>
<li><strong>注意：不要使用null值进行运算。</strong></li>
</ul>
<h3 id="2-3、数据库的字段属性"><a href="#2-3、数据库的字段属性" class="headerlink" title="2.3、数据库的字段属性"></a>2.3、数据库的字段属性</h3><blockquote>
<p>Unsigned</p>
</blockquote>
<ul>
<li>Unsigned：无符号的整数</li>
<li>不能声明为负数</li>
</ul>
<blockquote>
<p>zerofill</p>
</blockquote>
<ul>
<li>0填充的</li>
<li>不足的位数使用0填充</li>
</ul>
<blockquote>
<p>自增</p>
</blockquote>
<ul>
<li>自动在上一条记录的基础上加1</li>
<li>通常用来设计唯一的逐渐，必须是整数类型</li>
<li>可以自定义设计主键的开始值和步长</li>
</ul>
<blockquote>
<p>非空 NULL NOT NULL</p>
</blockquote>
<ul>
<li>NULL表示该字段必须赋值，否则报错</li>
</ul>
<blockquote>
<p>默认 default</p>
</blockquote>
<ul>
<li>设置默认值</li>
</ul>
<blockquote>
<p>规范（拓展）</p>
</blockquote>
<p>每个数据表必须包含以下五个字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id	主键</span><br><span class="line">version	用于做乐观锁</span><br><span class="line">is_delete	伪删除</span><br><span class="line">gmt_create	创建时间</span><br><span class="line">gmt_update	修改时间</span><br></pre></td></tr></table></figure>

<h3 id="2-4、创建表"><a href="#2-4、创建表" class="headerlink" title="2.4、创建表"></a>2.4、创建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 学会表</span></span><br><span class="line"><span class="comment">-- id,name,pwd,sex,birth,address,email</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">    <span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">    <span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'男'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">    <span class="string">`birth`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">    <span class="string">`address`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line">    <span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮件'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) </span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=<span class="string">`student`</span>utf8</span><br></pre></td></tr></table></figure>

<p><strong>格式：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="string">`表名称`</span>(</span><br><span class="line">    <span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">    <span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">`字段名`</span> 列类型 [属性] [索引] [注释]</span><br><span class="line">)[表类型][字符集设置][表注释]</span><br></pre></td></tr></table></figure>

<p>常用命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> school <span class="comment">-- CREATE DATABASE `school` /*!40100 DEFAULT CHARACTER SET utf8 */</span></span><br><span class="line"><span class="comment">-- 查看创建数据库的sql</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CREATE TABLE `student` (</span></span><br><span class="line"><span class="comment">  `id` int(4) NOT NULL AUTO_INCREMENT COMMENT '学号',</span></span><br><span class="line"><span class="comment">  `name` varchar(30) NOT NULL DEFAULT '匿名' COMMENT '姓名',</span></span><br><span class="line"><span class="comment">  `pwd` varchar(32) NOT NULL DEFAULT '123456' COMMENT '密码',</span></span><br><span class="line"><span class="comment">  `sex` varchar(2) NOT NULL DEFAULT '男' COMMENT '性别',</span></span><br><span class="line"><span class="comment">  `birth` datetime DEFAULT NULL COMMENT '出生日期',</span></span><br><span class="line"><span class="comment">  `address` varchar(100) DEFAULT NULL COMMENT '地址',</span></span><br><span class="line"><span class="comment">  `email` varchar(50) DEFAULT NULL COMMENT '邮件',</span></span><br><span class="line"><span class="comment">  PRIMARY KEY (`id`)</span></span><br><span class="line"><span class="comment">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">DESCRIBE</span> student</span><br></pre></td></tr></table></figure>

<h3 id="2-5、数据表的类型"><a href="#2-5、数据表的类型" class="headerlink" title="2.5、数据表的类型"></a>2.5、数据表的类型</h3><p><strong>数据库引擎：</strong></p>
<p>INNODB    默认使用</p>
<p>MYISAM    早些年使用</p>
<table>
<thead>
<tr>
<th></th>
<th align="center">MYISAM</th>
<th align="center">INNODB</th>
</tr>
</thead>
<tbody><tr>
<td>事务支持</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td>数据行锁定</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td>外检约束</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td>全文索引</td>
<td align="center">支持</td>
<td align="center">不支持</td>
</tr>
<tr>
<td>表空间大小</td>
<td align="center">较小</td>
<td align="center">较大，约为两倍</td>
</tr>
</tbody></table>
<p>常规使用操作：</p>
<ul>
<li>MYISAM：    节约空间，速度较快</li>
<li>INNODB：    安全性高，支持外键，可以多表多用户操作</li>
</ul>
<blockquote>
<p>在物理空间存在的位置</p>
</blockquote>
<p>所有数据库文件都存在data目录下，一个文件夹对应一个数据库，本质还是文件存储。</p>
<p>MySQL引擎在物理文件上的区别：</p>
<ul>
<li>INNODB在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</li>
<li>MYISAM对应的文件<ul>
<li>*.frm      -表结构的定义文件</li>
<li>*.MYD    -数据文件</li>
<li>*.MYI      -索引文件</li>
</ul>
</li>
</ul>
<blockquote>
<p>数据库表的字符集编码</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET=utf8</span><br></pre></td></tr></table></figure>

<p>不设置的话，会是mysql默认的编码，不支持中文。</p>
<h3 id="2-6、修改和删除表"><a href="#2-6、修改和删除表" class="headerlink" title="2.6、修改和删除表"></a>2.6、修改和删除表</h3><blockquote>
<p>修改</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 旧表名 <span class="keyword">RENAME</span> <span class="keyword">AS</span> 新表名	<span class="comment">--修改表名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 字段列属性			<span class="comment">--增加字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段名 字段新属性			<span class="comment">--修改字段的约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">CHANGE</span> 旧字段名 新字段名 属性		<span class="comment">--重命名字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名						<span class="comment">--删除表的字段</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> 表名						<span class="comment">--删除表，加条件判断是否存在</span></span><br></pre></td></tr></table></figure>

<p>所有创建和删除尽量加上条件判断，以免报错。</p>
<h2 id="3、MySQL数据管理"><a href="#3、MySQL数据管理" class="headerlink" title="3、MySQL数据管理"></a>3、MySQL数据管理</h2><h3 id="3-1、外键"><a href="#3-1、外键" class="headerlink" title="3.1、外键"></a>3.1、外键</h3><blockquote>
<p>创建表时设置外键</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`grade`</span>(</span><br><span class="line">    <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级id'</span>,</span><br><span class="line">    <span class="string">`gradename`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`gradeid`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'男'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`birth`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮件'</span>,</span><br><span class="line">  <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学生的年级'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_gradeid`</span> (<span class="string">`gradeid`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_gradeid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`gradeid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`gradeid`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"><span class="comment">-- 定义外键</span></span><br><span class="line"><span class="comment">-- 约束外键 引用到其他数据表的其他列</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>表存在后设置外键</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`grade`</span>(</span><br><span class="line">    <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级id'</span>,</span><br><span class="line">    <span class="string">`gradename`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`gradeid`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'男'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`birth`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮件'</span>,</span><br><span class="line">  <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学生的年级'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"><span class="comment">-- 定义外键</span></span><br><span class="line"><span class="comment">-- 约束外键 引用到其他数据表的其他列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`FK_gradeid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(<span class="string">`gradeid`</span>) <span class="keyword">REFERENCES</span> grade(<span class="string">`gradeid`</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE `表名` ADD CONSTRAINT 外键名 FOREIGN KEY(主表字段名) REFERENCES 从表名(从表字段)</span></span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<p>当有数据库级别外键存在时，若要删除从表，必须先删除主表。</p>
<h3 id="3-2、DML语言"><a href="#3-2、DML语言" class="headerlink" title="3.2、DML语言"></a>3.2、DML语言</h3><p><strong>数据库=数据存储+数据管理</strong></p>
<p><strong>DML语言</strong>：数据操作语言</p>
<ul>
<li><p>insert</p>
</li>
<li><p>update</p>
</li>
<li><p>delete</p>
</li>
</ul>
<h3 id="3-3、添加"><a href="#3-3、添加" class="headerlink" title="3.3、添加"></a>3.3、添加</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名([字段<span class="number">1</span>，字段<span class="number">2</span>，...]) <span class="keyword">VALUES</span>(<span class="string">'值1'</span>，<span class="string">'值2'</span>...)</span><br><span class="line"><span class="comment">-- 如果省略的字段，会自动从第一个开始匹配</span></span><br><span class="line">插入多行时用()包起来每一行的值！</span><br></pre></td></tr></table></figure>

<h3 id="3-4、修改"><a href="#3-4、修改" class="headerlink" title="3.4、修改"></a>3.4、修改</h3><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">set</span> 列名=<span class="keyword">value</span>,[列名=<span class="keyword">value</span>,...] <span class="keyword">WHERE</span> [条件]</span><br><span class="line">注意：</span><br><span class="line">列名是数据库的列，尽量加上<span class="string">``</span></span><br><span class="line">条件，筛选的条件，可以使用运算符</span><br><span class="line"><span class="keyword">value</span>可以是一个具体的值也可以是一个变量</span><br></pre></td></tr></table></figure>

<blockquote>
<p>条件运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>条件等于具体的值</td>
</tr>
<tr>
<td>&lt;&gt;或!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>BETWEEM…AND…</td>
<td>条件的值在某个区间</td>
</tr>
<tr>
<td>AND</td>
<td>多个条件同时满足</td>
</tr>
<tr>
<td>OR</td>
<td>条件选择</td>
</tr>
</tbody></table>
<h3 id="3-5、删除"><a href="#3-5、删除" class="headerlink" title="3.5、删除"></a>3.5、删除</h3><blockquote>
<p>delete</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="string">`表名`</span> [<span class="keyword">WHERE</span> 条件]</span><br><span class="line"><span class="comment">-- 不加条件时全部删除</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>truncate</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> 表名<span class="comment">-- 清空表</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>区别</p>
</blockquote>
<ul>
<li>TRUNCATE重新设置自增列，计数器归零</li>
<li>TRUNCATE不会影响事务</li>
</ul>
<p><code>DELETE删除的问题</code>，重启数据库，现象</p>
<ul>
<li>INNODB：自增列从1开始，存在内存中</li>
<li>MYISAM：继续从上一个自增量开始，存在文件中</li>
</ul>
<h2 id="4、DQL查询数据"><a href="#4、DQL查询数据" class="headerlink" title="4、DQL查询数据"></a>4、DQL查询数据</h2><p>（Data Query Language-数据查询语言）</p>
<blockquote>
<p>SELECT语法：</p>
</blockquote>
<p><img src="/2021/02/17/MySQL/image-20210215140103536.png" alt="image-20210215140103536"></p>
<h3 id="4-1、指定查询字段"><a href="#4-1、指定查询字段" class="headerlink" title="4.1、指定查询字段"></a>4.1、指定查询字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询整个表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定的字段</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'字段1'</span>,<span class="string">'字段2'</span>... <span class="keyword">FROM</span> 表名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名，给结果起一个新名字 AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`字段1`</span> <span class="keyword">AS</span> 新字段名,<span class="string">'字段2'</span> <span class="keyword">AS</span> ‘新字段名’ <span class="keyword">FROM</span> 表名 <span class="keyword">AS</span> 新表名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 Concat(a,b)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'字段注释'</span>,字段名) <span class="keyword">AS</span> 新字段名 <span class="keyword">FROM</span> 表名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>distinct</p>
</blockquote>
<p>作用：去除SELECT查询结果中重复的数据，重复数据只显示一条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="string">`字段名`</span> <span class="keyword">FROM</span> <span class="string">`表名`</span> <span class="comment">--去重</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>数据库的列（表达式）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>() <span class="comment">-- 查询数据库版本</span></span><br><span class="line"><span class="keyword">SELECT</span> @@auto_increment_increment <span class="comment">-- 查询自增量</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`列名`</span>+<span class="number">1</span> <span class="keyword">AS</span> <span class="string">`提分后`</span> <span class="keyword">FROM</span> <span class="string">`表名`</span> <span class="comment">-- 数据库列字段值+1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>*<span class="number">2</span> <span class="keyword">AS</span> 计算结果 <span class="comment">-- 用来计算表达式</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2、where条件字句"><a href="#4-2、where条件字句" class="headerlink" title="4.2、where条件字句"></a>4.2、where条件字句</h3><p><strong>作用：检索数据中符合条件的值</strong>，结果为布尔值</p>
<blockquote>
<p>逻辑运算符</p>
</blockquote>
<ul>
<li>and    &amp;&amp;</li>
<li>or      ||</li>
<li>Not    !</li>
</ul>
<blockquote>
<p>模糊查询：比较运算符</p>
</blockquote>
<ul>
<li>IS NULL——为空 </li>
<li>IS NOT NULL——不为空</li>
<li>BETWEEN…AND——在区间中</li>
<li>LIKE——<code>a like b</code>，SQL匹配，如果a匹配b，则结果为真，配合<code>%</code>和<code>_</code>，<code>%</code>匹配多个，<code>_</code>匹配一个字</li>
<li>IN——<code>a in（a1,a2,a3...）</code>——假设a是（a1,a2,a3…）其中一个则为真</li>
</ul>
<h3 id="4-3、联表查询"><a href="#4-3、联表查询" class="headerlink" title="4.3、联表查询"></a>4.3、联表查询</h3><blockquote>
<p>JOIN对比</p>
</blockquote>
<p><img src="/2021/02/17/MySQL/sql-join.png" alt="img"></p>
<p><strong>实际上两个表的字段有重复的，然后通过这个重复的字段去查询两个表中的数据来合成一个表。同时在选择重复字段时，必须确定这个字段选用哪个表的。</strong></p>
<ul>
<li>left join：查询左表中有的所有值并合并右表</li>
<li>inner join：查询两个表都有的字段，交集</li>
<li>right join：查询右表所有，把左表综合进去</li>
</ul>
<blockquote>
<p>自连接</p>
</blockquote>
<p>自己的表和自己表连接，核心：一张表看做两张一样的表。</p>
<p>自连接是指使用表的别名实现表与其自身连接的查询方法。</p>
<p>假设在【成绩表】有【主键ID】【学生姓名】【课程名称】【成绩】等字段。</p>
<p><img src="/2021/02/17/MySQL/20190514105101377.png" alt="img"><br>现在要查询 “语文成绩&gt;=数学成绩”的学生姓名，这时就可以使用自连接查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 【学生姓名】</span><br><span class="line"><span class="keyword">from</span> 【成绩表】 <span class="keyword">AS</span> a,【成绩表】 <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">where</span> a.【主键<span class="keyword">ID</span>】=b.【主键<span class="keyword">ID</span>】</span><br><span class="line"><span class="keyword">and</span> a.【成绩】&gt;=b.【成绩】</span><br><span class="line"><span class="keyword">and</span> a.【课程名称】=<span class="string">'语文'</span></span><br><span class="line"><span class="keyword">and</span> b.【课程名称】=<span class="string">'数学'</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4、分页和排序"><a href="#4-4、分页和排序" class="headerlink" title="4.4、分页和排序"></a>4.4、分页和排序</h3><blockquote>
<p>排序</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 升序ASC，降序DESC</span></span><br><span class="line">ORDER BY 排序的字段 ASC/DESC</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分页</p>
</blockquote>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：limit 起始值，页面大小<span class="comment">--从0开始</span></span><br></pre></td></tr></table></figure>

<h3 id="4-5、子查询"><a href="#4-5、子查询" class="headerlink" title="4.5、子查询"></a>4.5、子查询</h3><p>where（计算出来的值）</p>
<p>本质：在where语句中嵌套一个子查询语句。还可以嵌套查询。</p>
<h2 id="5、MySQL函数"><a href="#5、MySQL函数" class="headerlink" title="5、MySQL函数"></a>5、MySQL函数</h2><h3 id="5-1、常用函数"><a href="#5-1、常用函数" class="headerlink" title="5.1、常用函数"></a>5.1、常用函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数值类：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ABS</span>(<span class="number">-1</span>)	<span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEILING</span>(<span class="number">5.5</span>) <span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FLOOR</span>(<span class="number">5.5</span>) <span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RAND</span>() <span class="comment">-- 0~1之间的随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SIGN</span>(<span class="number">0</span>) <span class="comment">-- 判断一个数的符号，0-0,负数：-1,正数：1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串类：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">'codefriday'</span>) <span class="comment">-- 字符串长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>() <span class="comment">-- 系统时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOCALTIME</span>() <span class="comment">-- 本地时间</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2、聚合函数"><a href="#5-2、聚合函数" class="headerlink" title="5.2、聚合函数"></a>5.2、聚合函数</h3><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>COUNT(字段)</td>
<td>查询记录的条数，忽略null，count(*),count(1)都是计算行数，不忽略null</td>
</tr>
<tr>
<td>SUM()</td>
<td>求和</td>
</tr>
<tr>
<td>AVG()</td>
<td>平均值</td>
</tr>
<tr>
<td>MAX()</td>
<td>最大值</td>
</tr>
<tr>
<td>MIN()</td>
<td>最小值</td>
</tr>
</tbody></table>
<blockquote>
<p>分组过滤</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">GROUP BY ... <span class="comment">-- 指定结果按照哪几个字段分组</span></span><br><span class="line">HAVING ...   <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3、数据库级别的MD5加密"><a href="#5-3、数据库级别的MD5加密" class="headerlink" title="5.3、数据库级别的MD5加密"></a>5.3、数据库级别的MD5加密</h3><p><strong>MD5信息摘要算法</strong>（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，主要增强算法复杂度和不可逆性。</p>
<p>MD5破解原理只是收录了很多加密后的MD5字符串当做字典。</p>
<p>直接使用<code>MD5()</code>函数，由于不可逆性，校验时传入的明文密码先经过MD5再比对。</p>
<h2 id="6、事务"><a href="#6、事务" class="headerlink" title="6、事务"></a>6、事务</h2><h3 id="6-1、事务定义"><a href="#6-1、事务定义" class="headerlink" title="6.1、事务定义"></a>6.1、事务定义</h3><p><strong>要么都成功，要么都失败</strong>，一组SQL必须一起执行完，不能被打断！</p>
<blockquote>
<p>事务的ACID原则——原子性，一致性，隔离性，持久性</p>
</blockquote>
<p><strong>原子性(Atomicity)：</strong>是指一个事务要么全部执行，要么不执行，也就是说一个事务不可能只执行了一半就停止了。比如你从取款机取钱，这个事务可以分成两个步骤：1划卡，2出钱。不可能划了卡，而钱却没出来。这两步必须同时完成，要么就不完成。</p>
<p><strong>一致性(Consistency)：</strong>是指事务的运行并不改变数据库中数据的一致性。例如，完整性约束了a+b=10，一个事务改变了a，那么b也应该随之改变。</p>
<p><strong>独立性(Isolation）：</strong>事务的独立性也称作隔离性，是指两个以上的事务不会出现交错执行的状态。因为这样可能会导致数据不一致，更加具体的来讲，就是事务之间的操作是独立的。</p>
<p><strong>持久性(Durability）：</strong>事务的持久性是指事务执行成功以后，该事务对数据库所作的更改便是持久的保存在数据库之中，不会无缘无故的回滚。</p>
<blockquote>
<p>隔离级别</p>
</blockquote>
<p><strong>脏读：</strong>一个事务读取了另外一个事务未提交的数据。</p>
<p><strong>不可重复读：</strong>在一个事务内读取一个表，多次读取结果不同！</p>
<p><strong>虚读（幻读）：</strong>是指一个事务读取到了别的事务插入的数据，导致前后读取不一致（一般是行影响）</p>
<h3 id="6-2、执行事务"><a href="#6-2、执行事务" class="headerlink" title="6.2、执行事务"></a>6.2、执行事务</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MYSQL默认自动提交事务。</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span> <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span> <span class="comment">-- 开启自动提交，默认开启的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 流程：</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>; <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span> <span class="comment">-- 开启一个事务</span></span><br><span class="line"><span class="keyword">INSERT</span> xxx</span><br><span class="line"><span class="keyword">INSERT</span> xxx</span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment">-- 提交事务并持久化，持久化后不可回滚</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>; <span class="comment">-- 回滚</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>; <span class="comment">-- 恢复默认值</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>模拟转账场景</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> shop <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci</span><br><span class="line"><span class="keyword">USE</span> shop</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">account</span>( </span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT, </span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`money`</span>, </span><br><span class="line">    <span class="built_in">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,   <span class="comment">-- 第一个参数表示位数，第二个参数表示小数位数</span></span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>) </span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8; </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">account</span>(<span class="string">`name`</span>,<span class="string">`money`</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'A'</span>,<span class="number">1000.00</span>),</span><br><span class="line">(<span class="string">'B'</span>,<span class="number">2000.00</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> money=money<span class="number">-500</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'A'</span>  <span class="comment">-- A转出500</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> money=money+<span class="number">500</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'B'</span>  <span class="comment">-- B收到500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="7、索引"><a href="#7、索引" class="headerlink" title="7、索引"></a>7、索引</h2><blockquote>
<p>MySQL官方对索引的定义为:索引(Index)是帮助MySQL高效获取数据的数据结构。</p>
<p>提取句子主干，就可以得到索引的本质:索引是数据结构。</p>
</blockquote>
<h3 id="7-1、索引分类"><a href="#7-1、索引分类" class="headerlink" title="7.1、索引分类"></a>7.1、索引分类</h3><ul>
<li>主键索引（PRIMARY KEY）<ul>
<li>唯一的标识，主键不可重复，只能有一个列作为主键索引</li>
</ul>
</li>
<li>唯一索引（UNIQUE KEY）<ul>
<li>避免重复的列出现，不可重复，一个表可以有多个唯一索引</li>
</ul>
</li>
<li>常规索引（KEY/INDEX）<ul>
<li>默认的，index，key关键字设置</li>
</ul>
</li>
<li>全文索引（FULLTEXT）<ul>
<li>在特定数据库引擎才有，MYISAM</li>
<li>快速定位数据</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="comment">-- 分析sql执行情况</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student;	<span class="comment">-- 非全文索引</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(studentname) AGAINST(<span class="string">'刘'</span>) <span class="comment">-- 全文索引，数据量小不起作用</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2、测试索引"><a href="#7-2、测试索引" class="headerlink" title="7.2、测试索引"></a>7.2、测试索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`app_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`gender`</span> <span class="built_in">TINYINT</span>(<span class="number">4</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1000001</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1、插入100万数据.</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="comment">-- 写函数之前必须要写$$标志</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data ()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    WHILE i&lt;num DO</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`app_user`</span>(<span class="string">`name`</span>,<span class="string">`email`</span>,<span class="string">`phone`</span>,<span class="string">`gender`</span>)<span class="keyword">VALUES</span>(<span class="keyword">CONCAT</span>(<span class="string">'用户'</span>,i),<span class="string">'19224305@qq.com'</span>,<span class="string">'123456789'</span>,<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">    RETURN i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、执行此函数 生成一百万条数据大约要执行半分钟</span></span><br><span class="line"><span class="keyword">SELECT</span> mock_data() </span><br><span class="line"><span class="comment">-- 3、查询表中数据</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/17/MySQL/image-20210215160802012.png" alt="image-20210215160802012"></p>
<blockquote>
<p>添加索引后查询结果：</p>
</blockquote>
<p><img src="/2021/02/17/MySQL/image-20210215161143273.png" alt="image-20210215161143273"></p>
<h3 id="7-3、索引原则"><a href="#7-3、索引原则" class="headerlink" title="7.3、索引原则"></a>7.3、索引原则</h3><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据表不需要加索引</li>
<li>索引一般加在常用来查询的字段</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<p>Hash类型索引</p>
<p>BTREE：INNODB默认的索引</p>
<h2 id="8、权限管理和备份"><a href="#8、权限管理和备份" class="headerlink" title="8、权限管理和备份"></a>8、权限管理和备份</h2><h3 id="8-1、权限管理"><a href="#8-1、权限管理" class="headerlink" title="8.1、权限管理"></a>8.1、权限管理</h3><blockquote>
<p>SQL命令</p>
</blockquote>
<p><strong>用户表：mysql.user</strong></p>
<p>本质就是对这张表的增删改查</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户 CREATE USER 用户名 IDENTIFIED BY '密码'</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> codefriday <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码（当前登录的用户）</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码(指定用户)</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> 用户名 = <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> 原来的名字 <span class="keyword">TO</span> 新的名字</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权,所有权限，但是 GRANT权限只有root有，不能给被人授权</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看权限</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> 用户名</span><br><span class="line"><span class="comment">-- 管理员权限查看</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> root@localhost</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限 REVOKE 哪些权限，在哪个库，给谁撤销</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGS <span class="keyword">ON</span> *.* <span class="keyword">FROM</span> 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 用户名</span><br></pre></td></tr></table></figure>

<h3 id="8-2、MYSQL备份"><a href="#8-2、MYSQL备份" class="headerlink" title="8.2、MYSQL备份"></a>8.2、MYSQL备份</h3><ul>
<li>保证重要数据不丢失</li>
<li>数据转移</li>
</ul>
<blockquote>
<p>备份的方式</p>
</blockquote>
<ul>
<li>直接拷贝物理文件</li>
<li>在Sqlyog这种可视化工具中手动导出备份</li>
<li>使用命令行导出mysqldump</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mysqldump -h主机 -uroot -p密码 数据库 [表1 表2...] &gt; 物理磁盘位置</span></span><br><span class="line">mysqldump -uroot -pcodefriday school student &gt; D:/1.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入操作，先登录之后，切换到指定数据库</span></span><br><span class="line">mysql&gt;<span class="built_in">source</span> 备份文件物理磁盘地址</span><br></pre></td></tr></table></figure>



<h2 id="9、规范数据库设计"><a href="#9、规范数据库设计" class="headerlink" title="9、规范数据库设计"></a>9、规范数据库设计</h2><h3 id="9-1、为什么需要设计"><a href="#9-1、为什么需要设计" class="headerlink" title="9.1、为什么需要设计"></a>9.1、为什么需要设计</h3><p><strong>当数据库比较复杂时，需要设计</strong></p>
<ul>
<li>数据冗余，浪费空间</li>
<li>数据库插入删除麻烦，要屏蔽物理外键</li>
<li>程序性能差，比如查询数据库效率不高。</li>
</ul>
<blockquote>
<p>软件开发中，关于数据库设计</p>
</blockquote>
<ul>
<li>分析需求：分析业务和需求处理的数据库的需求</li>
<li>概要设计：设计关系图E-R图</li>
</ul>
<h3 id="9-2、三大范式"><a href="#9-2、三大范式" class="headerlink" title="9.2、三大范式"></a>9.2、三大范式</h3><blockquote>
<p>第一范式（1NF）</p>
</blockquote>
<p><strong>要求数据库表的每一列都是不可分割的原子数据项。</strong></p>
<blockquote>
<p>第二范式（2NF）</p>
</blockquote>
<p><strong>前提：满足第一范式。</strong></p>
<p><strong>第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</strong></p>
<p><strong>每张表只描述一件事情。</strong></p>
<blockquote>
<p>第三范式（3NF）</p>
</blockquote>
<p><strong>前提：满足一二范式。</strong></p>
<p><strong>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</strong></p>
<blockquote>
<p>规范性 和 性能</p>
</blockquote>
<p>阿里规约：关联查询不得超过三张表</p>
<ul>
<li>考虑商业化需求和目标，数据库性能更重要</li>
<li>在规范性能问题时考虑规范性</li>
<li>故意增加某些冗余字段，减少联合查询的表数量</li>
<li>故意增加计算列（从大数据量降低为小数据量的查询：索引）</li>
</ul>
<h2 id="10、JDBC"><a href="#10、JDBC" class="headerlink" title="10、JDBC"></a>10、JDBC</h2><h3 id="10-1、数据库驱动"><a href="#10-1、数据库驱动" class="headerlink" title="10.1、数据库驱动"></a>10.1、数据库驱动</h3><p>不同数据库有着不同的驱动程序，有数据库厂商提供驱动程序。</p>
<p><strong>Oracle数据库：</strong><br>驱动程序包名：ojdbc14.jar<br>驱动类的名字：oracle.jdbc.driver.OracleDriver<br>JDBC URL：jdbc:oracle:thin:@dbip:port:databasename<br>说明：驱动程序包名有可能会变<br>JDBC URL中各个部分含义如下：<br>dbip –为数据库服务器的IP地址，如果是本地可写：localhost或127.0.0.1。<br>port –为数据库的监听端口，需要看安装时的配置，缺省为1521。<br>databasename –为数据库的SID，通常为全局数据库的名字。</p>
<p><strong>SQL Server数据库：</strong><br>驱动程序包名：msbase.jar mssqlserver.jar msutil.jar<br>驱动类的名字：com.microsoft.jdbc.sqlserver.SQLServerDriver<br>JDBC URL：jdbc:microsoft:sqlserver://dbip:port;DatabaseName=databasename<br>说明：驱动程序包名有可能会变<br>JDBC URL中各个部分含义如下：<br>dbip –为数据库服务器的IP地址，如果是本地可写：localhost或127.0.0.1。<br>port –为数据库的监听端口，需要看安装时的配置，缺省为1433。<br>databasename –数据库的名字。</p>
<p><strong>MySQL数据库：</strong><br>驱动程序包名：mysql-connector-Java-3.1.11-bin.jar<br>驱动类的名字：com.mysql.jdbc.Driver<br>JDBC URL：jdbc:mysql://dbip:port/databasename<br>说明：驱动程序包名有可能会变<br>JDBC URL其中各个部分含义如下：<br>dbip –为数据库服务器的IP地址，如果是本地可写：localhost或127.0.0.1。<br>port –为数据库的监听端口，需要看安装时的配置，缺省为3306。<br>databasename –数据库的名字。</p>
<h3 id="10-2、JDBC"><a href="#10-2、JDBC" class="headerlink" title="10.2、JDBC"></a>10.2、JDBC</h3><p>Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。</p>
<p><img src="/2021/02/17/MySQL/image-20210215180551671.png" alt="image-20210215180551671"></p>
<p><code>java.sql</code>，<code>javax.sql</code></p>
<h3 id="10-3、第一个JDBC程序"><a href="#10-3、第一个JDBC程序" class="headerlink" title="10.3、第一个JDBC程序"></a>10.3、第一个JDBC程序</h3><blockquote>
<p>第一个测试程序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//2.连接的url以及用户</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8"</span>;</span><br><span class="line">        String user = <span class="string">"root"</span>;</span><br><span class="line">        String pwd = <span class="string">"codefriday"</span>;</span><br><span class="line">        <span class="comment">//3.获得连接</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, pwd);</span><br><span class="line">        <span class="comment">//4.获得执行对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//5.执行一个sql</span></span><br><span class="line">        String sql = <span class="string">"SELECT * FROM account"</span>;</span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">"id="</span> + resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"name="</span> + resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"money="</span> + resultSet.getObject(<span class="string">"money"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>DriverManager</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.加载驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//2.连接的url以及用户</span></span><br><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8"</span>;</span><br><span class="line">String user = <span class="string">"root"</span>;</span><br><span class="line">String pwd = <span class="string">"codefriday"</span>;</span><br><span class="line"><span class="comment">//3.获得连接</span></span><br><span class="line">Connection connection = DriverManager.getConnection(url, user, pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//connection代表数据库</span></span><br><span class="line"><span class="comment">//可以设置事务提交，事务回滚</span></span><br></pre></td></tr></table></figure>

<p><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>本质是加载<code>com.mysql.jdbc.Driver</code>这个类，然后会执行静态代码块注册一个驱动，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.mysql.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">extends</span> <span class="title">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>URL</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mysql默认端口：3306</span></span><br><span class="line"><span class="comment">//jdbc:mysql://主机地址:端口号/数据库名?参数1&amp;参数2&amp;...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//oracle默认端口：1521</span></span><br><span class="line"><span class="comment">//jdbc:oracle:thin:@localhost:1521:sid</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Statement：执行SQL的对象（PrepareStatement）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">statement.executeQuery() <span class="comment">// 执行查询操作，返回结果集ResultSet</span></span><br><span class="line">statement.execute(); <span class="comment">//可以执行任何sql</span></span><br><span class="line">statement.executeUpdate();<span class="comment">// 更新，插入，删除，返回受影响的行数</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ResultSet</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过数据表字段名获取结果</span></span><br><span class="line">resultSet.getObject();</span><br><span class="line">resultSet.getString();</span><br><span class="line">resultSet.getInt();</span><br><span class="line">resultSet.getDate();</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>遍历：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.next();<span class="comment">//移动到下一行</span></span><br><span class="line">resultSet.beforeFirst();<span class="comment">//移动到最前面</span></span><br><span class="line">resultSet.afterLast();<span class="comment">//移动到最后面</span></span><br><span class="line">resultSet.previous();<span class="comment">//移动到前一行</span></span><br><span class="line">resultSet.absolute(<span class="number">3</span>);<span class="comment">//移动到指定行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>释放资源</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//6.关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"><span class="comment">//用完必须释放，很占用内存资源</span></span><br></pre></td></tr></table></figure>

<h3 id="10-4、Statement对象"><a href="#10-4、Statement对象" class="headerlink" title="10.4、Statement对象"></a>10.4、Statement对象</h3><blockquote>
<p>代码测试</p>
</blockquote>
<p>编写工具类读取配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.demo02.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String Driver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String Url = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String User = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String Password = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = jdbcUtils.class.getClassLoader().getResourceAsStream("db.properties");</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line">            Driver = properties.getProperty(<span class="string">"Driver"</span>);</span><br><span class="line">            Url = properties.getProperty(<span class="string">"Url"</span>);</span><br><span class="line">            User = properties.getProperty(<span class="string">"User"</span>);</span><br><span class="line">            Password = properties.getProperty(<span class="string">"Password"</span>);</span><br><span class="line">            Class.forName(Driver);<span class="comment">//驱动只需要加载一次</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(Url,User,Password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection con, Statement st, ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            st.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(con!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            con.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">Url</span>=<span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">User</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">Password</span>=<span class="string">codefriday</span></span><br></pre></td></tr></table></figure>

<p>测试插入操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codefriday.demo02.utils.jdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  jdbcUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            String sql = <span class="string">"INSERT INTO account(`name`,`money`) VALUES('C',10000.00)"</span>;</span><br><span class="line">            <span class="keyword">int</span> s = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span>(s&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            jdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：使用手动拼接字符串的话，会导致SQL注入问题，也就是输入过滤不严格导致的！</strong></p>
<h3 id="10-5、PreparedStatement对象"><a href="#10-5、PreparedStatement对象" class="headerlink" title="10.5、PreparedStatement对象"></a>10.5、PreparedStatement对象</h3><p>可以防止SQL注入，效率更高！</p>
<p>区别：预编译sql，使用<code>?</code>代替参数，设置参数后提交执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codefriday.demo02.utils.jdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement psm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = jdbcUtils.getConnection();</span><br><span class="line">            String sql = <span class="string">"insert into account(`name`,`money`) values(?,?)"</span>;</span><br><span class="line">            psm = conn.prepareStatement(sql);</span><br><span class="line">            psm.setString(<span class="number">1</span>,<span class="string">"E"</span>);</span><br><span class="line">            psm.setBigDecimal(<span class="number">2</span>,<span class="keyword">new</span> BigDecimal(<span class="number">100.00</span>));</span><br><span class="line">            <span class="keyword">int</span> i = psm.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入成功！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            jdbcUtils.release(conn,psm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>防止SQL注入的本质：把传递进来的参数当做字符，用``包裹起来，遇到转义字符会被直接转义。</p>
<h3 id="10-6、JDBC操作事务"><a href="#10-6、JDBC操作事务" class="headerlink" title="10.6、JDBC操作事务"></a>10.6、JDBC操作事务</h3><p>模拟A和B转账的事务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codefriday.demo02.utils.jdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement psm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = jdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭自动提交，事务自动开启</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            String sql = <span class="string">"update account set money=money+100 where name = 'A'"</span>;</span><br><span class="line">            psm = conn.prepareStatement(sql);</span><br><span class="line">            psm.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟事务被意外中断</span></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            String sql1 = <span class="string">"update account set money=money-100 where name = 'B'"</span>;</span><br><span class="line">            psm = conn.prepareStatement(sql1);</span><br><span class="line">            psm.executeUpdate();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//捕获到异常回滚，其实会自动回滚</span></span><br><span class="line">            conn.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            jdbcUtils.release(conn,psm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-9、连接池"><a href="#10-9、连接池" class="headerlink" title="10.9、连接池"></a>10.9、连接池</h3><p>类似于线程池的池化技术，预先准备资源，开启连接和释放连接消耗资源。</p>
<p>常用连接数——最小连接数</p>
<p>最大连接数——最高允许多少连接</p>
<p>编写连接池：实现DataSource接口</p>
<p>DBCP，C3P0，Druid（阿里巴巴）</p>
<blockquote>
<p>DBCP使用实例</p>
</blockquote>
<p><strong>依赖的jar包：</strong></p>
<p><img src="/2021/02/17/MySQL/image-20210217132653078.png" alt="image-20210217132653078"></p>
<p>下载地址：<a href="http://commons.apache.org/" target="_blank" rel="noopener">http://commons.apache.org/</a></p>
<p><strong>工具类编写，此处忽略释放资源的方法！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.demo03.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp2.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dbcpUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            InputStream in = dbcpUtils.class.getClassLoader().getResourceAsStream("dbconfig.properties");</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>dbconfig.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">codefriday</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#初试连接数</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">30</span></span><br><span class="line"><span class="comment">#最大活跃数</span></span><br><span class="line"><span class="attr">maxTotal</span>=<span class="string">30</span></span><br><span class="line"><span class="comment">#最大idle数</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#最小idle数</span></span><br><span class="line"><span class="attr">minIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment">#最长等待时间(毫秒)</span></span><br><span class="line"><span class="attr">maxWaitMillis</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment">#程序中的连接不使用后是否被连接池回收(该版本要使用removeAbandonedOnMaintenance和removeAbandonedOnBorrow)</span></span><br><span class="line"><span class="comment">#removeAbandoned=true</span></span><br><span class="line"><span class="attr">removeAbandonedOnMaintenance</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">removeAbandonedOnBorrow</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#连接在所指定的秒数内未使用才会被删除(秒)(为配合测试程序才配置为1秒)</span></span><br><span class="line"><span class="attr">removeAbandonedTimeout</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure>

<p><strong>编写测试函数：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codefriday.demo03.utils.dbcpUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testdbcp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  dbcpUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            String sql = <span class="string">"INSERT INTO account(`name`,`money`) VALUES('C',10000.00)"</span>;</span><br><span class="line">            <span class="keyword">int</span> s = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span>(s&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			st.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>C3P0</p>
</blockquote>
<p>可以使用xml自动化配置，也可以使用java代码调用setxxx配置信息。</p>
<p><strong>工具类编写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.demo04.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">c3p0utils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ds = <span class="keyword">new</span> ComboPooledDataSource();<span class="comment">//读取默认配置文件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();<span class="comment">//自动加载xml默认配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>XML配置文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认配置，如果没有指定则使用这个配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span></span><br><span class="line">      &lt;![CDATA[jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=UTF-8]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>codefriday<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 初始化池大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最大空闲时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最多有多少个连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最少几个连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 每次最多可以执行多少个批处理语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 命名的配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"BarryLee"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/aa<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 如果池中数据连接不够时一次增长多少个 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- he's important, but there's only one of him --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codefriday.demo04.utils.c3p0utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestC3P0</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  c3p0utils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            String sql = <span class="string">"INSERT INTO account(`name`,`money`) VALUES('C',10000.00)"</span>;</span><br><span class="line">            <span class="keyword">int</span> s = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span>(s&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			st.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>第三阶段</category>
      </categories>
      <tags>
        <tag>第三阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>前端实战，小米闪购官网</title>
    <url>/2021/02/09/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%8C%E5%B0%8F%E7%B1%B3%E9%97%AA%E8%B4%AD%E5%AE%98%E7%BD%91/</url>
    <content><![CDATA[<h2 id="GitHub仓库地址"><a href="#GitHub仓库地址" class="headerlink" title="GitHub仓库地址"></a>GitHub仓库地址</h2><p><a href="https://github.com/jinyalong/xiaomi-SecKill" target="_blank" rel="noopener">https://github.com/jinyalong/xiaomi-SecKill</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前有过学校0基础写web端页面的经历，自己的写的像shit一样，看着大佬的漂亮页面只能我草。花了几天学习了前端三大基石：<code>HTML</code>+<code>CSS</code>+<code>JS</code>，但是这只是前端的皮毛，真正的开发也不是用原生三大件搞开发，都用框架，然后还接触了一点点<code>JQuery</code>，写更少的代码做更多的事。后面会继续学习框架以及“大前端”！</p>
<p><strong>在此，为了巩固一下学的三大件，简单复刻了一下小米闪购官网，主要用到的还是<code>CSS</code>，<code>JS</code>占比很小。</strong></p>
<p>小米闪购官网：<a href="https://www.mi.com/seckill" target="_blank" rel="noopener">https://www.mi.com/seckill</a></p>
<h2 id="网站结构"><a href="#网站结构" class="headerlink" title="网站结构"></a>网站结构</h2><p>首先要复刻一个网站，先分析它的页面组成。主要分了三大块，然后再继续细分！</p>
<blockquote>
<p>网页结构：</p>
</blockquote>
<ul>
<li>body<ul>
<li>顶部导航栏</li>
<li>header</li>
<li>商品界面主体</li>
</ul>
</li>
</ul>
<p><img src="/2021/02/09/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%8C%E5%B0%8F%E7%B1%B3%E9%97%AA%E8%B4%AD%E5%AE%98%E7%BD%91/image-20210209212004273.png" alt="image-20210209212004273"></p>
<h2 id="顶部导航栏"><a href="#顶部导航栏" class="headerlink" title="顶部导航栏"></a>顶部导航栏</h2><blockquote>
<p>html结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topbar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topbar-nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>小米商城<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sep"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>MIUI<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>IoT<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>云服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>天星数科<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>有品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>小爱开放平台<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            &lt;a href=""&gt;企业团购&lt;/a&gt;&lt;&lt;span&gt;|&lt;/span&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>资质证照<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>协议规则<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>下载App<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>智能生活<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topbar-cart"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>&amp;#xe60c<span class="tag">&lt;/<span class="name">i</span>&gt;</span>购物车<span class="tag">&lt;<span class="name">span</span>&gt;</span>（0）<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topbar-info clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"sep"</span>&gt;</span>消息通知<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>结构分析：</strong></p>
<p><img src="/2021/02/09/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%8C%E5%B0%8F%E7%B1%B3%E9%97%AA%E8%B4%AD%E5%AE%98%E7%BD%91/image-20210209213106957.png" alt="image-20210209213106957"></p>
<blockquote>
<p>CSS</p>
</blockquote>
<p><strong>主要注意点有，鼠标移动到会变色，并且都是一些a标签，以及设置了浮动使得<code>ul li</code>能横向展示，但是浮动一定要记得清除，并且用伪类解决父级边框塌陷问题！</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">1.5</span> <span class="string">"Helvetica Neue"</span>,Helvetica,Arial,<span class="string">"Microsoft Yahei"</span>,<span class="string">"Hiragino Sans GB"</span>,<span class="string">"Heiti SC"</span>,<span class="string">"WenQuanYi Micro Hei"</span>,sans-serif;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#b0b0b0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*解决父级边框塌陷问题*/</span></span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1226px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar-nav</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#b0b0b0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar-cart</span>,<span class="selector-class">.topbar-info</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar-cart</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar-nav</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#424242</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar-cart</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#424242</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar-cart</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff6700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar-cart</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar-cart</span> <span class="selector-tag">i</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: -<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar-info</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar-info</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#424242</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topbar-info</span> <span class="selector-class">.sep</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><blockquote>
<p>html结构</p>
</blockquote>
<p>在此全部商品分类的悬浮显示窗口未实现！</p>
<p>主要分一个logo，导航栏，搜索框。</p>
<p>搜索框和上面一个顶部导航栏的购物车图片均是矢量图，需要导入小米官网上爬到的相关<code>CSS</code>文件才能用。</p>
<p>logo的话官网有移动鼠标悬停时切换的动画，未实现，直接截图当静态背景图片了~</p>
<p>此时也用了浮动！！！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-logo"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">title</span>=<span class="string">"小米官网"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-nav"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav-list clearfix"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-category"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>全部商品分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>小米手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Redmi 红米<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>电视<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>笔记本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>家电<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>路由器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>智能硬件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>社区<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-search"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">class</span>=<span class="string">"search-text"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"&amp;#xe616"</span> <span class="attr">class</span>=<span class="string">"search-btn iconfont"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-logo</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">62px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">22px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">55px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-nav</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">820px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/*border: 1px solid black;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-search</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">296px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">25px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*border: 1px solid black;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-logo</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../image/milog.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-nav</span> <span class="selector-class">.nav-list</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">820px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">88px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-nav</span> <span class="selector-class">.nav-list</span> <span class="selector-class">.nav-category</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">127px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-nav</span> <span class="selector-class">.nav-list</span> <span class="selector-class">.nav-category</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">26px</span> <span class="number">0</span> <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-nav</span> <span class="selector-class">.nav-list</span> <span class="selector-class">.nav-item</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-nav</span> <span class="selector-class">.nav-list</span> <span class="selector-class">.nav-item</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">26px</span> <span class="number">10px</span> <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-nav</span> <span class="selector-class">.nav-list</span> <span class="selector-class">.nav-item</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff6700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-search</span> <span class="selector-class">.search-form</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">296px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-search</span> <span class="selector-class">.search-form</span> <span class="selector-class">.search-text</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">51px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">245px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-search</span> <span class="selector-class">.search-form</span> <span class="selector-class">.search-btn</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">52px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#616161</span>;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-search</span> <span class="selector-class">.search-form</span> <span class="selector-class">.search-btn</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff6700</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SecKill主体</p>
</blockquote>
<p><strong>首先是一张背景图片。</strong></p>
<p><strong>然后时一个横向导航栏选项卡！</strong></p>
<p><strong>最后就是商品展示部分：</strong></p>
<p>中间五个ul的重复主要是为了顶部不同栏目切换而设计的。</p>
<p>每个商品对应到<code>ul</code>里面的一个<code>li</code>元素</p>
<p><code>li</code>元素又细分图片和描述两部分。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seckill"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seckill-head"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seckill-nav"</span> <span class="attr">id</span>=<span class="string">"seckill-nav"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"tabs"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>14:00<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>抢购中<span class="tag">&lt;<span class="name">br</span>&gt;</span>距结束 <span class="tag">&lt;<span class="name">timer</span>  <span class="attr">id</span>=<span class="string">"timer"</span>&gt;</span>02:41:00<span class="tag">&lt;/<span class="name">timer</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>20:00<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>即将开始<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>22:00<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>即将开始<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>00:00<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>明日开始<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>10:00<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>明日开始<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--选项卡--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--商品--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seckill-goods"</span> <span class="attr">id</span>=<span class="string">"goods"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"clearfix active"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>米家自动泡沫洗洁精机套装 白色<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>感应出泡，高效清洁<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                69.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    79元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>小米电视4A 70英寸 黑色 70英寸 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>大屏更享受<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                3299.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    3999元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>米家扫拖机器人G1 白色 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>能扫会拖，整屋清洁一步到位<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                899.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    999元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>小米电视4A 70英寸 黑色 70英寸 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>大屏更享受<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                3299.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    3999元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>米家扫拖机器人G1 白色 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>能扫会拖，整屋清洁一步到位<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                899.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    999元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>米家自动泡沫洗洁精机套装 白色<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>感应出泡，高效清洁<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                69.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    79元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>米家自动泡沫洗洁精机套装 白色<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>感应出泡，高效清洁<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                69.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    79元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>米家扫拖机器人G1 白色 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>能扫会拖，整屋清洁一步到位<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                899.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    999元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>小米电视4A 70英寸 黑色 70英寸 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>大屏更享受<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                3299.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    3999元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>米家扫拖机器人G1 白色 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>能扫会拖，整屋清洁一步到位<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                899.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    999元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>米家自动泡沫洗洁精机套装 白色<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>感应出泡，高效清洁<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                69.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    79元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>小米电视4A 70英寸 黑色 70英寸 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>大屏更享受<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                3299.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    3999元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>米家扫拖机器人G1 白色 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>能扫会拖，整屋清洁一步到位<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                899.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    999元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>小米电视4A 70英寸 黑色 70英寸 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>大屏更享受<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                3299.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    3999元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"seckill-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>米家自动泡沫洗洁精机套装 白色<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>感应出泡，高效清洁<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                69.00元</span><br><span class="line">                                <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">                                    79元</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn-buy"</span>&gt;</span>登录后抢购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"seckill-notice"</span>&gt;</span></span><br><span class="line">                *小米秒杀活动规则：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                1.秒杀商品是否参加活动、最终秒杀成功的商品，以订单结算页显示为准，活动包括但不限于优惠券、赠品、满减、满赠等；<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                2.秒杀商品数量有限，活动以下单支付成功为准，请加入购物车后尽快下单支付;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                3.秒杀价不含运费，最终以订单结算页价格为准；<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                4.订单中商品的数量、颜色、型号等，以订单结算页为准。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                温馨提示：因可能存在系统缓存、页面更新导致价格变动异常等不确定性情况出现，如您发现活动商品标价或促销信息有异常，请您立即联系小米客服，以便我们及时补正。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*seckill*/</span><br><span class="line"><span class="selector-class">.seckill</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-head</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">19px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">170px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"../image/seckill-head.jpg"</span>) <span class="number">50%</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-nav</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">68px</span> <span class="number">0</span> <span class="number">22px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1226px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-navfixed</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">68px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-nav</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">68px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#414141</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-nav</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">68px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">68px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-nav</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-nav</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-nav</span> <span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fe393a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> <span class="selector-tag">em</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-class">.bg</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">190px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-class">.info</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">210px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-class">.bg</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">190px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-tag">li</span> <span class="selector-class">.info</span> <span class="selector-class">.name</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-tag">li</span> <span class="selector-class">.info</span> <span class="selector-class">.desc</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.54</span>);</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-tag">li</span> <span class="selector-class">.info</span> <span class="selector-class">.price</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f1393a</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-tag">li</span> <span class="selector-class">.info</span> <span class="selector-class">.price</span> <span class="selector-tag">del</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.54</span>);</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-tag">li</span> <span class="selector-class">.btn-buy</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f1393a</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#f1393a</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seckill-goods</span> <span class="selector-class">.seckill-box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seckill-notice</span>&#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.27</span>);</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JS补充功能"><a href="#JS补充功能" class="headerlink" title="JS补充功能"></a>JS补充功能</h2><h3 id="选项卡点击切换背景颜色"><a href="#选项卡点击切换背景颜色" class="headerlink" title="选项卡点击切换背景颜色"></a>选项卡点击切换背景颜色</h3><p><img src="/2021/02/09/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%8C%E5%B0%8F%E7%B1%B3%E9%97%AA%E8%B4%AD%E5%AE%98%E7%BD%91/image-20210209214249324.png" alt="image-20210209214249324"></p>
<p><strong>设计思路：</strong></p>
<p>此处实际对应了<code>ul</code>的五个<code>li</code>标签，设计一个类名为<code>active</code>，当<code>li</code>类名含有这个值时背景颜色改为红色（其实不是红色~），<code>JS</code>代码中绑定一个鼠标键点击时间，遍历<code>li</code>，清空其他<code>li</code>标签的<code>active</code>这个类名，为自己添加上即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`use strict`</span>;</span><br><span class="line"><span class="comment">//获得秒杀导航栏li对象数组</span></span><br><span class="line"><span class="keyword">var</span> tabs = <span class="built_in">document</span>.getElementById(<span class="string">'tabs'</span>).getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"><span class="comment">//把每个li绑定一个函数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt;tabs.length;i++)&#123;</span><br><span class="line">    tabs[i].onclick = showlist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次点击判断，将自己的class设置成active，其他则清空</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showlist</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tabs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tabs[i] === <span class="keyword">this</span>)&#123;</span><br><span class="line">            tabs[i].className = <span class="string">"active"</span>;</span><br><span class="line">            <span class="comment">//lists[i].className = "clearfix active";</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tabs[i].className = <span class="string">""</span>;</span><br><span class="line">            <span class="comment">//lists[i].className = "clearfix";</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不同导航栏切换不同商品列表"><a href="#不同导航栏切换不同商品列表" class="headerlink" title="不同导航栏切换不同商品列表"></a>不同导航栏切换不同商品列表</h3><p>在此我只是打乱了一下三个商品的顺序！</p>
<p>思路和上面一致，设置<code>ul</code>的<code>display</code>属性为<code>none</code>即为不显示！始终只显示一个<code>ul</code>即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lists = <span class="built_in">document</span>.getElementById(<span class="string">'goods'</span>).getElementsByTagName(<span class="string">'ul'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showlist</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tabs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tabs[i] === <span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="comment">//tabs[i].className = "active";</span></span><br><span class="line">            lists[i].className = <span class="string">"clearfix active"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//tabs[i].className = "";</span></span><br><span class="line">            lists[i].className = <span class="string">"clearfix"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="导航栏下滑时固定在最上面"><a href="#导航栏下滑时固定在最上面" class="headerlink" title="导航栏下滑时固定在最上面"></a>导航栏下滑时固定在最上面</h2><p>这个主要检测侧边栏滚动条高度达到每个阈值时，把导航栏<code>position</code>属性设为<code>fixed</code>，同样的配合<code>CSS</code>修改。</p>
<p><img src="/2021/02/09/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%8C%E5%B0%8F%E7%B1%B3%E9%97%AA%E8%B4%AD%E5%AE%98%E7%BD%91/image-20210209215253552.png" alt="image-20210209215253552"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nav = <span class="built_in">document</span>.getElementById(<span class="string">'seckill-nav'</span>);</span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> height = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">    <span class="keyword">if</span>(height&gt;=<span class="number">260</span>)&#123;</span><br><span class="line">        nav.className=<span class="string">"seckill-nav seckill-navfixed"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        nav.className=<span class="string">"seckill-nav"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h3><p>自己琢磨写了一种很烂的方法，<code>bug</code>肯定有的，但是深深体会到<code>JavaScript</code>的随便！！！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//倒计时功能：</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">document</span>.getElementById(<span class="string">'timer'</span>);</span><br><span class="line"><span class="keyword">var</span> hh = timer.textContent[<span class="number">0</span>]+timer.textContent[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> mm = timer.textContent[<span class="number">3</span>]+timer.textContent[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> ss = timer.textContent[<span class="number">6</span>]+timer.textContent[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">setInterval (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    timer.innerText = showtime();</span><br><span class="line">    &#125;, <span class="number">1000</span>);  <span class="comment">//反复执行函数本身</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showtime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ss--;</span><br><span class="line">    <span class="keyword">if</span>(ss==<span class="number">-1</span>)&#123;</span><br><span class="line">        ss = <span class="number">59</span>;</span><br><span class="line">        mm--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mm==<span class="number">-1</span>)&#123;</span><br><span class="line">        mm=<span class="number">59</span>;</span><br><span class="line">        hh--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(hh&lt;<span class="number">0</span>) hh=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> hh+<span class="string">':'</span>+mm+<span class="string">':'</span>+ss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="/2021/02/09/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%8C%E5%B0%8F%E7%B1%B3%E9%97%AA%E8%B4%AD%E5%AE%98%E7%BD%91/image-20210209215434047.png" alt="image-20210209215434047"></p>
]]></content>
      <categories>
        <category>实战项目</category>
      </categories>
      <tags>
        <tag>第二阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2021/02/06/JavaScript/</url>
    <content><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>前端三大件：Html+CSS+JavaScript</p>
<p>JavaScript 和 Java 是完全不同的语言，不论是概念还是设计。</p>
<p>JavaScript 在 1995 年由 Brendan Eich 发明，并于 1997 年成为一部 ECMA 标准。</p>
<p><strong>是一门全球最火的脚本语言，不需要编译，由浏览器直接解释运行。</strong></p>
<p>一个合格的后端人员，必须精通<code>JavaScript</code></p>
<h2 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h2><h3 id="2-1、引入js"><a href="#2-1、引入js" class="headerlink" title="2.1、引入js"></a>2.1、引入js</h3><p>1、内部标签</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般放在head标签底部，或者body标签底部</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、外部引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"abc.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2、基本语法"><a href="#2-2、基本语法" class="headerlink" title="2.2、基本语法"></a>2.2、基本语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.定义变量 var</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"hello"</span>;</span><br><span class="line"><span class="comment">// 2.条件控制</span></span><br><span class="line"><span class="keyword">if</span>(exp)&#123;&#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;&#125;<span class="keyword">else</span>&#123;&#125;<span class="comment">//可嵌套</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>浏览器控制台指令</p>
</blockquote>
<p><code>console.log(变量名)</code>，打印一个变量</p>
<h3 id="2-3、数据类型"><a href="#2-3、数据类型" class="headerlink" title="2.3、数据类型"></a>2.3、数据类型</h3><p>数值，文本，图形，音频，视频…</p>
<ul>
<li><code>number</code>：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//js不区分小数和整数，统一用number</span></span><br><span class="line"><span class="number">123</span> <span class="comment">//整数</span></span><br><span class="line"><span class="number">123.1</span> <span class="comment">//小数</span></span><br><span class="line"><span class="literal">NaN</span> <span class="comment">//not a number</span></span><br><span class="line"><span class="literal">Infinity</span> <span class="comment">//表示无限大</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>字符串：单引号或者双引号，‘hello’ “workday”</p>
</li>
<li><p>布尔值：true false</p>
</li>
<li><p>逻辑运算：&amp;&amp; || ！</p>
</li>
<li><p>比较运算符：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">=		<span class="comment">//赋值</span></span><br><span class="line">==		<span class="comment">//等于，类型不一样值一样也会判断为true</span></span><br><span class="line">===		<span class="comment">//绝对等于，类型一样值一样才为true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>NaN===Nan，为false，这个与所有数值都不相等，包括自己</p>
</li>
<li><p>只能通过isNaN()来判断</p>
</li>
<li><p>浮点数存在精度问题。</p>
</li>
<li><p>null和undefined：空，未定义</p>
</li>
<li><p>数组：类型可以不同：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="literal">true</span>,<span class="literal">null</span>,<span class="number">12.3</span>];</span><br><span class="line"><span class="comment">//取下标越界，输出undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象是大括号，数组中括号，对象中存<code>属性：值</code>用逗号隔开，最后一个不需要逗号</li>
</ul>
<h3 id="2-4、严格检查模式"><a href="#2-4、严格检查模式" class="headerlink" title="2.4、严格检查模式"></a>2.4、严格检查模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="meta">    'use strict'</span><span class="comment">//使用严格检查模式，必须写在第一行</span></span><br><span class="line">	<span class="comment">//ES6,let定义局部变量</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、数据类型"><a href="#3、数据类型" class="headerlink" title="3、数据类型"></a>3、数据类型</h2><h3 id="3-1、字符串"><a href="#3-1、字符串" class="headerlink" title="3.1、字符串"></a>3.1、字符串</h3><p>1、单引号或者双引号包裹</p>
<p>2、特殊符号使用转义字符</p>
<p>3、多行字符串用`包裹</p>
<p>4、模板字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="string">`use strict`</span></span><br><span class="line">        <span class="keyword">let</span> name = <span class="string">"codefriday"</span>;</span><br><span class="line">        <span class="keyword">let</span> mes = <span class="string">`hello,<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(mes);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>5、字符串长度：<code>str.length</code></p>
<p>6、字符串不可变</p>
<p>7、大小写转换，调用方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.toUpperCase()</span><br><span class="line">str.toLowerCase()</span><br><span class="line"><span class="comment">//索引t字符第一次出现</span></span><br><span class="line">str.indexOf(<span class="string">'t'</span>)</span><br><span class="line"><span class="comment">//substr</span></span><br><span class="line">str.substr(<span class="number">1</span>)<span class="comment">//从第一个字符获取到最后一个</span></span><br><span class="line">str.sunstr(<span class="number">1</span>,<span class="number">3</span>)<span class="comment">//[1,3)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2、数组"><a href="#3-2、数组" class="headerlink" title="3.2、数组"></a>3.2、数组</h3><ul>
<li>可以包含任意数据类型</li>
</ul>
<p>1、长度可以赋值，数组大小就会改变，如果赋值过小，元素就会丢失。</p>
<p>2、<code>indexOf</code>通过元素获得下标索引，字符串和数字不同！</p>
<p>3、<code>slice()</code>截取数组的一部分。</p>
<p>4、<code>push</code>，<code>pop</code>操作有效，在数组最后面操作</p>
<p>5、<code>unshift</code>，<code>shift</code>：压入头部，弹出头部。</p>
<p>6、<code>sort</code>排序，<code>reverse</code>翻转，<code>concat</code>拼接返回新的</p>
<p>7、连接符<code>join</code>，打印拼接数组，使用特点字符串连接。</p>
<p>8、多维数组。</p>
<h3 id="3-3、对象"><a href="#3-3、对象" class="headerlink" title="3.3、对象"></a>3.3、对象</h3><p>所有键都是字符串，值是任意对象。</p>
<p>1、若干键值对，定义格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名&#123;</span><br><span class="line">    属性名：属性值,</span><br><span class="line">    属性名：属性值,</span><br><span class="line">    属性名：属性值</span><br><span class="line">&#125;</span><br><span class="line">使用<span class="string">`对象名.属性名`</span>引用</span><br></pre></td></tr></table></figure>

<p>2、使用一个不存在的对象属性不会报错！<code>undefined</code></p>
<p>3、动态删减属性，通过<code>delete</code>删除，动态添加直接赋值一个新的属性。</p>
<p>4、查询对象是否有某个属性，<code>xxx in xxx</code>，可以查询到继承中的属性。</p>
<p>5、查询自己的属性用haveownPrority</p>
<h3 id="3-4、流程控制"><a href="#3-4、流程控制" class="headerlink" title="3.4、流程控制"></a>3.4、流程控制</h3><p><code>if</code>判断，<code>while</code>循环，<code>for</code>循环，<code>do-while</code>，<code>for</code>循环</p>
<p>数组循环：<code>forEach</code>，<code>for...in</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">45</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line">numbers.forEach(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(array[index]==value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-6、Map和Set"><a href="#3-6、Map和Set" class="headerlink" title="3.6、Map和Set"></a>3.6、Map和Set</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;第一个程序&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/使用二维数组初始化</span></span><br><span class="line"><span class="regexp">       var map = new Map([[2,3],[3,4]]);</span></span><br><span class="line"><span class="regexp">       map.set(1,2);</span></span><br><span class="line"><span class="regexp">       map.set(true,'world')</span></span><br><span class="line"><span class="regexp">       var v =map.get(true);</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;hello&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>遍历Map和Set </p>
</blockquote>
<p>使用<code>iterator</code>迭代。</p>
<p><code>for...of</code></p>
<h2 id="4、函数"><a href="#4、函数" class="headerlink" title="4、函数"></a>4、函数</h2><h3 id="4-1、函数定义"><a href="#4-1、函数定义" class="headerlink" title="4.1、函数定义"></a>4.1、函数定义</h3><p>第一种：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">上述abs()函数的定义如下：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>指出这是一个函数定义；</span></span><br><span class="line"><span class="function"><span class="title">abs</span>是函数的名称；</span></span><br><span class="line"><span class="function">(<span class="params">x</span>)括号内列出函数的参数，多个参数以,分隔；</span></span><br><span class="line"><span class="function"></span>&#123; ... &#125;之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。</span><br></pre></td></tr></table></figure>

<p>第二种：由于JavaScript的函数也是一个对象，上述定义的<code>abs()</code>函数实际上是一个函数对象，而函数名<code>abs</code>可以视为指向该函数的变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>undefined</code>。</p>
<ul>
<li>传入参数可以不一样，可多可少</li>
</ul>
<blockquote>
<p>arguments</p>
</blockquote>
<p>它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<code>arguments</code>类似<code>Array</code>但它不是一个<code>Array</code>。</p>
<blockquote>
<p>rest参数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a = '</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b = '</span> + b);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rest参数只能写在最后，前面用<code>...</code>标识。</p>
<p><code>return</code>语句和返回值分两行写会有问题！！！<code>return</code>后自动加分号！</p>
<h3 id="4-2、变量作用域"><a href="#4-2、变量作用域" class="headerlink" title="4.2、变量作用域"></a>4.2、变量作用域</h3><p>如果一个变量在函数内部申明，则该变量的作用域是整个函数体。</p>
<p>函数内部可以定义函数，如果同名函数，内部函数变量屏蔽外面的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">...rest</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> x = <span class="string">'外部变量'</span>;</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> x = <span class="string">'A'</span>;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">`内部函数x=<span class="subst">$&#123;x&#125;</span>`</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       inner();</span><br><span class="line">   &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/06/JavaScript/image-20210206200807726.png" alt="image-20210206200807726"></p>
<h4 id="4-2-2、变量提升"><a href="#4-2-2、变量提升" class="headerlink" title="4.2.2、变量提升"></a>4.2.2、变量提升</h4><p>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部。</p>
<h4 id="4-2-3、全局作用域"><a href="#4-2-3、全局作用域" class="headerlink" title="4.2.3、全局作用域"></a>4.2.3、全局作用域</h4><p>不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象<code>window</code>，全局作用域的变量实际上被绑定到<code>window</code>的一个属性。</p>
<ul>
<li>定义的函数也绑定到windows</li>
<li>alert也是一个绑定到windows的函数</li>
<li>这说明JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报<code>ReferenceError</code>错误。</li>
</ul>
<h4 id="4-2-4、名字空间"><a href="#4-2-4、名字空间" class="headerlink" title="4.2.4、名字空间"></a>4.2.4、名字空间</h4><p>全局变量会绑定到<code>window</code>上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</p>
<p>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：</p>
<p><strong>先定义一个对象，然后定义函数还是变量都当做属性放到自己对象里！</strong></p>
<h4 id="4-2-5、局部作用域"><a href="#4-2-5、局部作用域" class="headerlink" title="4.2.5、局部作用域"></a>4.2.5、局部作用域</h4><p>由于JavaScript的变量作用域实际上是函数内部，我们在<code>for</code>循环等语句块中是无法定义具有局部作用域的变量的：</p>
<p><strong>应该使用ES6中引入的<code>let</code>关键字！</strong></p>
<h4 id="4-2-6、常量"><a href="#4-2-6、常量" class="headerlink" title="4.2.6、常量"></a>4.2.6、常量</h4><p>ES6标准引入关键字<code>const</code>定义常量。</p>
<h4 id="4-2-7、解构赋值"><a href="#4-2-7、解构赋值" class="headerlink" title="4.2.7、解构赋值"></a>4.2.7、解构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// x, y, z分别被赋值为数组对应元素:</span></span><br><span class="line"><span class="keyword">var</span> [x, y, z] = [<span class="string">'hello'</span>, <span class="string">'JavaScript'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，对数组元素进行解构赋值时，多个变量要用[...]括起来。</span></span><br><span class="line"><span class="comment">//如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致：</span></span><br><span class="line"><span class="keyword">let</span> [x, [y, z]] = [<span class="string">'hello'</span>, [<span class="string">'JavaScript'</span>, <span class="string">'ES6'</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构赋值还可以忽略某些元素：</span></span><br><span class="line"><span class="keyword">let</span> [, , z] = [<span class="string">'hello'</span>, <span class="string">'JavaScript'</span>, <span class="string">'ES6'</span>]; <span class="comment">// 忽略前两个元素，只对z赋值第三个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果需要从一个对象中取出若干属性，也可以使用解构赋值</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    gender: <span class="string">'male'</span>,</span><br><span class="line">    passport: <span class="string">'G-12345678'</span>,</span><br><span class="line">    school: <span class="string">'No.4 middle school'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;name, age, passport&#125; = person;</span><br></pre></td></tr></table></figure>

<h3 id="4-3、方法"><a href="#4-3、方法" class="headerlink" title="4.3、方法"></a>4.3、方法</h3><h4 id="4-3-1、方法的定义"><a href="#4-3-1、方法的定义" class="headerlink" title="4.3.1、方法的定义"></a>4.3.1、方法的定义</h4><p>在一个对象中绑定函数，称为这个对象的方法。</p>
<p>此时可以使用<code>this</code>关键字指代对象来获取并操作对象的其他属性：</p>
<blockquote>
<p>代码测试</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> student= &#123;</span><br><span class="line">           name : <span class="string">'Tom'</span>,</span><br><span class="line">           birth : <span class="number">2000</span>,</span><br><span class="line">           age:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="number">2021</span>-<span class="keyword">this</span>.birth;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="built_in">console</span>.log(student.age);<span class="comment">//输出的是一个函数的定义</span></span><br><span class="line">       <span class="built_in">console</span>.log(student.age());<span class="comment">//调用了该函数</span></span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>在一个方法内部，<code>this</code>是一个特殊变量，它始终指向当前对象。</p>
<p>要保证<code>this</code>指向正确，必须用<code>obj.xxx()</code>的形式调用！</p>
<p><strong>单独调用函数不带对象时：</strong></p>
<ul>
<li>use strict状态下，this指向undefined</li>
<li>this指向window</li>
</ul>
<h4 id="4-3-2、apply"><a href="#4-3-2、apply" class="headerlink" title="4.3.2、apply"></a>4.3.2、apply</h4><p>要指定函数的<code>this</code>指向哪个对象，可以用函数本身的<code>apply</code>方法，它接收两个参数，第一个参数就是需要绑定的<code>this</code>变量，第二个参数是<code>Array</code>，表示函数本身的参数。</p>
<p>另一个与<code>apply()</code>类似的方法是<code>call()</code>，唯一区别是：</p>
<ul>
<li><code>apply()</code>把参数打包成<code>Array</code>再传入；</li>
<li><code>call()</code>把参数按顺序传入。</li>
</ul>
<p>比如调用<code>Math.max(3, 5, 4)</code>，分别用<code>apply()</code>和<code>call()</code>实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>]); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.max.call(<span class="literal">null</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h4 id="4-4-3、装饰器"><a href="#4-4-3、装饰器" class="headerlink" title="4.4.3、装饰器"></a>4.4.3、装饰器</h4><p>利用<code>apply()</code>，我们还可以动态改变函数的行为。</p>
<p>JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。</p>
<p>假设想要统计内置函数<code>parseInt</code>调用了多少次.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">var</span> oldparseInt = <span class="built_in">parseInt</span>;<span class="comment">//保存windows内置函数</span></span><br><span class="line">       <span class="built_in">window</span>.parseInt = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">           count++;</span><br><span class="line">           <span class="keyword">return</span> oldparseInt.apply(<span class="literal">null</span>,<span class="built_in">arguments</span>);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4、高阶函数"><a href="#4-4、高阶函数" class="headerlink" title="4.4、高阶函数"></a>4.4、高阶函数</h3><p>JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p>
<blockquote>
<p>实例：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,f</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> f(a)+f(b);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>foo(1,-10,Math.abs)</code>==&gt;<code>Math.abs(1)+Math.abs(-10)</code></p>
<blockquote>
<p>map</p>
</blockquote>
<p>假设一个数组<code>arr</code>需要对每个元素都使用某个函数处理。可以使用<code>arr.map(函数名)</code>来得到结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">//定义一个求平方的函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x*x;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">       <span class="comment">//求每个元素的平方</span></span><br><span class="line">       <span class="keyword">var</span> result=arr.map(pow);</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">        <span class="comment">//result=[1, 4, 9, 16, 25]</span></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>map()</code>传入的参数是<code>pow</code>，即函数对象本身。</p>
<blockquote>
<p>reduce</p>
</blockquote>
<p>Array的<code>reduce()</code>把一个函数作用在这个<code>Array</code>的<code>[x1, x2, x3...]</code>上，这个函数必须接收两个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>filter</p>
</blockquote>
<p>它用于把<code>Array</code>的某些元素过滤掉，然后返回剩下的元素。</p>
<p><code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>true</code>还是<code>false</code>决定保留还是丢弃该元素。</p>
<p>帅选出奇数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">       <span class="built_in">console</span>.log(arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> x%<span class="number">2</span>;</span><br><span class="line">       &#125;))</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>sort</p>
</blockquote>
<p>它还可以接收一个比较函数来实现自定义的排序。</p>
<p>通常规定，对于两个元素<code>x</code>和<code>y</code>，如果认为<code>x &lt; y</code>，则返回<code>-1</code>，如果认为<code>x == y</code>，则返回<code>0</code>。</p>
<blockquote>
<p>Array</p>
</blockquote>
<p><code>Array</code>对象还提供了很多非常实用的高阶函数。</p>
<ul>
<li><p><code>every()</code>方法可以判断数组的所有元素是否满足测试条件。</p>
</li>
<li><p><code>find()</code>方法用于查找符合条件的第一个元素，如果找到了，返回这个元素，否则，返回<code>undefined</code></p>
</li>
<li><p><code>findIndex()</code>和<code>find()</code>类似，也是查找符合条件的第一个元素，不同之处在于<code>findIndex()</code>会返回这个元素的索引，如果没有找到，返回<code>-1</code></p>
</li>
<li><p><code>forEach()</code>和<code>map()</code>类似，它也把每个元素依次作用于传入的函数，但不会返回新的数组。<code>forEach()</code>常用于遍历数组，因此，传入的函数不需要返回值.</p>
</li>
</ul>
<h4 id="4-4-1、闭包"><a href="#4-4-1、闭包" class="headerlink" title="4.4.1、闭包"></a>4.4.1、闭包</h4><blockquote>
<p>函数作为返回值</p>
</blockquote>
<p>使用高阶函数reduce求和，编写的求和函数如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line">      <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> x+y;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>该函数会立刻返回结果，而把函数函数当做返回值时。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazy_sum</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">	sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">     	   <span class="keyword">return</span> x+y;</span><br><span class="line">   	 	&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当调用<code>lazy_sum([1,2,3,4,5])</code>得到的实际是一个函数，不会立刻求值！</p>
<p><img src="/2021/02/06/JavaScript/image-20210207121206177.png" alt="image-20210207121206177"></p>
<p><strong>请再注意一点，当我们调用<code>lazy_sum()</code>时，每次调用都会返回一个新的函数，即使传入相同的参数。</strong></p>
<blockquote>
<p>闭包</p>
</blockquote>
<p>当一个函数返回了一个函数后，其内部的局部变量还被新函数引用。</p>
<p>代码测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++) &#123;</span><br><span class="line">                arr.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> i*i;</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> results = count();</span><br><span class="line">        <span class="keyword">var</span> f1 = results[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> f2 = results[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">var</span> f3 = results[<span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<p>最终f1~f3引用到的i都是循环结束的i，即为4；</p>
<p>绑定i的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++) &#123;</span><br><span class="line">                arr.push((<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> n * n;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> results = count();</span><br><span class="line">        <span class="keyword">var</span> f1 = results[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> f2 = results[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">var</span> f3 = results[<span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<h2 id="5、标准对象"><a href="#5、标准对象" class="headerlink" title="5、标准对象"></a>5、标准对象</h2><h3 id="5-1、Date"><a href="#5-1、Date" class="headerlink" title="5.1、Date"></a>5.1、Date</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(now);</span><br><span class="line">        <span class="built_in">console</span>.log(now.getDate());</span><br><span class="line">        <span class="built_in">console</span>.log(now.getFullYear());</span><br><span class="line">        <span class="built_in">console</span>.log(now.getMonth());</span><br><span class="line">        <span class="built_in">console</span>.log(now.getDate());</span><br><span class="line">        <span class="built_in">console</span>.log(now.getHours());</span><br><span class="line">        <span class="built_in">console</span>.log(now.getMinutes());</span><br><span class="line">        <span class="built_in">console</span>.log(now.getSeconds());</span><br><span class="line">        <span class="built_in">console</span>.log(now.getDay());</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/06/JavaScript/image-20210207124829693.png" alt="image-20210207124829693"></p>
<p> <strong>JavaScript的Date对象月份值从0开始，牢记0=1月，1=2月，2=3月，……，11=12月。</strong></p>
<p><strong>使用Date.parse()时传入的字符串使用实际月份01<del>12，转换为Date对象后getMonth()获取的月份值为0</del>11。</strong></p>
<p>时间戳是一个自增的整数，它表示从1970年1月1日零时整的GMT时区开始的那一刻，到现在的毫秒数。</p>
<h3 id="5-2、RegExp（正则）"><a href="#5-2、RegExp（正则）" class="headerlink" title="5.2、RegExp（正则）"></a>5.2、RegExp（正则）</h3><p>第一种方式是直接通过<code>/正则表达式/</code>写出来，第二种方式是通过<code>new RegExp(&#39;正则表达式&#39;)</code>创建一个RegExp对象。</p>
<p>RegExp对象的<code>test()</code>方法用于测试给定的字符串是否符合条件。</p>
<blockquote>
<p>切分字符串</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'a,b;; c  d'</span>.split(<span class="regexp">/[\s\,\;]+/</span>); <span class="comment">// ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3、JSON"><a href="#5-3、JSON" class="headerlink" title="5.3、JSON"></a>5.3、JSON</h3><p>在JSON中，一共就这么几种数据类型：</p>
<ul>
<li>number：和JavaScript的<code>number</code>完全一致；</li>
<li>boolean：就是JavaScript的<code>true</code>或<code>false</code>；</li>
<li>string：就是JavaScript的<code>string</code>；</li>
<li>null：就是JavaScript的<code>null</code>；</li>
<li>array：就是JavaScript的<code>Array</code>表示方式——<code>[]</code>；</li>
<li>object：就是JavaScript的<code>{ ... }</code>表示方式。</li>
</ul>
<p>以及上面的任意组合。</p>
<p><strong>并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号<code>&quot;&quot;</code>，Object的键也必须用双引号<code>&quot;&quot;</code>。</strong></p>
<blockquote>
<p>序列化</p>
</blockquote>
<p>把json格式转字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    age: <span class="number">14</span>,</span><br><span class="line">    gender: <span class="literal">true</span>,</span><br><span class="line">    height: <span class="number">1.65</span>,</span><br><span class="line">    grade: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'middle-school'</span>: <span class="string">'\"W3C\" Middle School'</span>,</span><br><span class="line">    skills: [<span class="string">'JavaScript'</span>, <span class="string">'Java'</span>, <span class="string">'Python'</span>, <span class="string">'Lisp'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">JSON</span>.stringify(xiaoming);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure>

<p>JSON.stringify();</p>
<ul>
<li>第一参数为JSON对象</li>
<li>第二个参数用于控制如何筛选对象的键值，如果我们只想输出指定的属性，可以传入<code>Array</code>。还可以传入一个函数，这样对象的每个键值对都会被函数先处理。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(xiaoming, convert, <span class="string">'  '</span>);</span><br></pre></td></tr></table></figure>



<ul>
<li>第三个参数表示缩进一个空格就是换行！</li>
</ul>
<blockquote>
<p>反序列化</p>
</blockquote>
<p>拿到一个JSON格式的字符串，我们直接用<code>JSON.parse()</code>把它变成一个JavaScript对象。</p>
<h2 id="6、面向对象"><a href="#6、面向对象" class="headerlink" title="6、面向对象"></a>6、面向对象</h2><p>面向原型继承，<code>__proto__</code></p>
<p>在JavaScript中，没有类的概念，只有实例化的对象！</p>
<p><code>Object.create()</code>方法可以传入一个原型对象，并创建一个基于该原型的新对象，但是新对象什么属性都没有</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line">        <span class="keyword">var</span> Person = &#123;</span><br><span class="line">            name : <span class="string">'person'</span>,</span><br><span class="line">            age : <span class="number">18</span>,</span><br><span class="line">            speak : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Person Speak'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> Student = <span class="built_in">Object</span>.create(Person);</span><br><span class="line">        <span class="built_in">console</span>.log(Student.name);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建对象</p>
</blockquote>
<p>JavaScript对每个创建的对象都会设置一个原型，指向它的原型对象。</p>
<p>当我们用<code>obj.xxx</code>访问一个对象的属性时，JavaScript引擎先在当前对象上查找该属性，如果没有找到，就到其原型对象上找，如果还没有找到，就一直上溯到<code>Object.prototype</code>对象，最后，如果还没有找到，就只能返回<code>undefined</code>。</p>
<blockquote>
<p>构造函数</p>
</blockquote>
<p>除了用<code>{...}</code>创建一个对象，还可以用一种构造函数的方法。</p>
<ul>
<li>先定义一个构造函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.hello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">"hello!!!"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">'xiaoming'</span>);</span><br><span class="line">        xiaoming.hello();</span><br></pre></td></tr></table></figure>

<p>实际就是一个普通函数，但是可以使用<code>new</code>关键字来调用。</p>
<p><em>注意</em>，如果不写<code>new</code>，这就是一个普通函数，它返回<code>undefined</code>。但是，如果写了<code>new</code>，它就变成了一个构造函数，它绑定的<code>this</code>指向新创建的对象，并默认返回<code>this</code>，也就是说，不需要在最后写<code>return this;</code>。</p>
<blockquote>
<p>class继承</p>
</blockquote>
<p>1、定义一个类，属性，方法</p>
<p><code>class</code>关键字是在ES6引入的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    hello()&#123;</span><br><span class="line">        alert(<span class="string">'Hello!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">"xiaoming"</span>);</span><br></pre></td></tr></table></figure>

<p>2、继承</p>
<p><code>extends</code>关键字</p>
<p><img src="/2021/02/06/JavaScript/image-20210207151134646.png" alt="image-20210207151134646"></p>
<h2 id="7、操作BOM对象（重点）"><a href="#7、操作BOM对象（重点）" class="headerlink" title="7、操作BOM对象（重点）"></a>7、操作BOM对象（重点）</h2><blockquote>
<p>浏览器介绍</p>
</blockquote>
<p>JavaScript诞生是为了能够在浏览器中运行。</p>
<p>BOM：浏览器对象模型。</p>
<ul>
<li>IE 6~11</li>
<li>Chrome</li>
<li>Safari</li>
<li>FireFox</li>
</ul>
<p>以上浏览器指的是内核！</p>
<blockquote>
<p>window</p>
</blockquote>
<p>window代表浏览器尺寸</p>
<p><img src="/2021/02/06/JavaScript/image-20210207152446555.png" alt="image-20210207152446555"></p>
<blockquote>
<p>Navigator封装了浏览器信息</p>
</blockquote>
<p><img src="/2021/02/06/JavaScript/image-20210207153117495.png" alt="image-20210207153117495"></p>
<blockquote>
<p>screen</p>
</blockquote>
<p>代表屏幕。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">screen.width</span><br><span class="line"><span class="number">1920</span></span><br><span class="line">screen.height</span><br><span class="line"><span class="number">1080</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>location（重要）</p>
</blockquote>
<p>代表当前页面的URL信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">host: <span class="string">"www.baidu.com"</span></span><br><span class="line">hostname: <span class="string">"www.baidu.com"</span></span><br><span class="line">href: <span class="string">"https://www.baidu.com/"</span></span><br><span class="line">origin: <span class="string">"https://www.baidu.com"</span></span><br><span class="line">location.assign(<span class="string">'https://www.codefriday.cn'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>document</p>
</blockquote>
<p>document代表当前页面，HTML DOM文档树</p>
<p>获取具体文档树节点，可以获取<code>cookie</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie</span><br></pre></td></tr></table></figure>

<p>劫持cookie原理：别人恶意引入一段js获取了cookie上传到服务器。</p>
<blockquote>
<p>history</p>
</blockquote>
<p>代表浏览器的历史记录。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.back()<span class="comment">//后退</span></span><br><span class="line">history.forword()<span class="comment">//前进</span></span><br></pre></td></tr></table></figure>

<h2 id="8、操作DOM对象"><a href="#8、操作DOM对象" class="headerlink" title="8、操作DOM对象"></a>8、操作DOM对象</h2><p>DOM：文档对象模型！</p>
<blockquote>
<p>核心</p>
</blockquote>
<p>浏览器网页就是一个Dom树形结构！</p>
<ul>
<li>更新</li>
<li>遍历：得到Dom节点</li>
<li>删除</li>
<li>添加</li>
</ul>
<p>要操作个Dom节点，必须先获得这个Dom节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类似CSS选择器</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName()<span class="comment">//标签名</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByClassName()<span class="comment">//类</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById()<span class="comment">//id</span></span><br></pre></td></tr></table></figure>

<p>这是原生代码，尽量使用Jquery！！！</p>
<blockquote>
<p>更新节点</p>
</blockquote>
<p>操作文本：</p>
<ul>
<li><code>innerText</code>修改文本的值</li>
<li><code>innerHTML</code>：修改为超文本！可以解析HTML标签！</li>
</ul>
<p>操作CSS：</p>
<ul>
<li>获得节点的<code>style</code>：<code>id.style.color=&#39;red&#39;</code></li>
</ul>
<blockquote>
<p>删除节点</p>
</blockquote>
<p>步骤：</p>
<ul>
<li>先获取父节点</li>
<li>再通过父节点删除</li>
</ul>
<blockquote>
<p>插入节点 </p>
</blockquote>
<p>通过<code>innerHTML</code>会覆盖了。</p>
<p>追加：移动已经有的节点。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">'p1'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">'father'</span>);</span></span><br><span class="line"><span class="actionscript">    father.appenChild(<span class="string">'p1'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过js新建一个标签</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line"><span class="comment">//修改style，使用appenChild插入</span></span><br></pre></td></tr></table></figure>

<ul>
<li>insertBefore：<code>parentElement.insertBefore(newElement, referenceElement);</code>，子节点会插入到<code>referenceElement</code>之前。</li>
</ul>
<h2 id="9、操作表单"><a href="#9、操作表单" class="headerlink" title="9、操作表单"></a>9、操作表单</h2><blockquote>
<p>获得信息</p>
</blockquote>
<ul>
<li>文本框，对应的<code>&lt;input type=&quot;text&quot;&gt;</code>，用于输入文本；</li>
<li>口令框，对应的<code>&lt;input type=&quot;password&quot;&gt;</code>，用于输入口令；</li>
<li>单选框，对应的<code>&lt;input type=&quot;radio&quot;&gt;</code>，用于选择一项；</li>
<li>复选框，对应的<code>&lt;input type=&quot;checkbox&quot;&gt;</code>，用于选择多项；</li>
<li>下拉框，对应的<code>&lt;select&gt;</code>，用于选择一项；</li>
<li>隐藏文本，对应的<code>&lt;input type=&quot;hidden&quot;&gt;</code>，用户不可见，但表单提交时会把隐藏文本发送到服务器。</li>
</ul>
<p><code>.value</code>获得输入框的值，对于单元框多选框值已经确定了，应该用<code>.checked</code>判断是否被选中。</p>
<blockquote>
<p>提交表单</p>
</blockquote>
<ul>
<li><p>表单绑定函数：<code>onsubmit = return yourFunction()</code>，函数用来校验！</p>
</li>
<li><p>密码框可以增加一个隐藏的密码框，给隐藏密码框name属性，再加密写回隐藏框中。</p>
</li>
</ul>
<h2 id="10、JQuery"><a href="#10、JQuery" class="headerlink" title="10、JQuery"></a>10、JQuery</h2><p>其实本质就是一个封装库，更方便的使用！</p>
<blockquote>
<p>导入JQuery</p>
</blockquote>
<ul>
<li><p>下载<a href="https://jquery.com/download/" target="_blank" rel="noopener">https://jquery.com/download/</a></p>
<p>然后放在项目本地文件中</p>
</li>
<li><p>直接script引用在线的JQuery，CDN加速的链接</p>
</li>
</ul>
<p>公式：<code>$(selector).action();</code>选择器+事件。</p>
<ul>
<li>$代表JQuery</li>
<li>selector代表选择器</li>
<li>action表示绑定的事件。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;TestJquery&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="http:/</span><span class="regexp">/libs.baidu.com/</span>jquery/<span class="number">2.0</span><span class="number">.0</span>/jquery.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;button id="</span>btn<span class="string">"&gt;点我&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    $('#btn').click(function ()&#123;</span></span><br><span class="line"><span class="string">        alert("</span>Hello,Jquery!<span class="string">");</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>选择器</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'p'</span>).click();<span class="comment">//标签选择器</span></span><br><span class="line">$(<span class="string">'#id'</span>).click();<span class="comment">//id选择器</span></span><br><span class="line">$(<span class="string">'.class'</span>).click();<span class="comment">//类选择器</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>事件</p>
</blockquote>
<p>鼠标事件，键盘事件，其他事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TestJquery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.0.0/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#window</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"zb"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"window"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       $(<span class="string">'#window'</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           $(<span class="string">'#zb'</span>).text(<span class="string">'X = '</span>+e.pageX+<span class="string">' Y = '</span>+e.pageY);</span></span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
      <tags>
        <tag>第二阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3</title>
    <url>/2021/02/04/CSS3/</url>
    <content><![CDATA[<h2 id="1、什么是CSS"><a href="#1、什么是CSS" class="headerlink" title="1、什么是CSS"></a>1、什么是CSS</h2><p>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p>
<blockquote>
<p>发展史</p>
</blockquote>
<p><code>CSS1.0</code></p>
<p><code>CSS2.0</code> DIV（块）+CSS，HTML与CSS结构分离的思想，网页变得简单，SEO</p>
<p><code>CSS2.1</code> 浮动，定位</p>
<p><code>CSS3.0</code> 圆角，阴影，动画… 浏览器兼容性</p>
<blockquote>
<p>基础语法</p>
</blockquote>
<p><strong>规范：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>标签中可以写CSS代码</span><br><span class="line">语法：</span><br><span class="line">    选择器&#123;</span><br><span class="line">        声明1；</span><br><span class="line">        生命2；</span><br><span class="line">    &#125;   </span><br><span class="line"><span class="xml">单独写一个css文件，使用<span class="tag">&lt;<span class="name">link</span>&gt;</span>标签关联</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/04/CSS3/image-20210204122726886.png" alt="image-20210204122726886"></p>
<p><code>CSS</code>优势：</p>
<p>1、内容和表现分离</p>
<p>2、网页结构表现统一，可以实现复用</p>
<p>3、样式十分丰富</p>
<p>4、建议使用独立于<code>html</code>的<code>css</code>文件</p>
<p>5、利用<code>SEO</code>，容易被搜索引擎收录</p>
<blockquote>
<p>CSS的四种导入方式</p>
</blockquote>
<ul>
<li><p>2.1、行内样式</p>
<p>在标签元素中，编写一个style属性，编写一个style属性，编写样式即可。</p>
</li>
<li><p>2.2、内部样式 </p>
<p><code>style</code>标签</p>
</li>
<li><p>2.3、外部样式</p>
<p><code>css</code>文件，<code>link</code>标签</p>
</li>
</ul>
<p><strong>优先级：就近原则，谁离得更近就是生效</strong></p>
<p>外部样式的两种写法：</p>
<ul>
<li>链接式：<code>link</code>标签，推荐</li>
<li>导入式：<code>&lt;style&gt;@import url(&quot;css/style.css&quot;)&lt;/style&gt;</code>，<code>CSS2.1</code>特有的</li>
</ul>
<h2 id="2、选择器"><a href="#2、选择器" class="headerlink" title="2、选择器"></a>2、选择器</h2><p><strong>作用：选择页面上的某一类或者或者某一个元素</strong></p>
<h3 id="2-1、基本选择器"><a href="#2-1、基本选择器" class="headerlink" title="2.1、基本选择器"></a>2.1、基本选择器</h3><ul>
<li>标签选择器：选择到页面上所有这个标签的元素，一类标签</li>
<li>类选择器：为标签定义<code>class</code>属性，可以为任何值，使用<code>.class的名称{}</code>选择到，不同标签可以归为一类</li>
<li>id选择器：标签id全局唯一，格式使用<code>#id{}</code>选择使用</li>
</ul>
<p><strong>优先级：</strong><code>id选择器&gt;class选择器&gt;标签选择器</code></p>
<h3 id="2-2、层次选择器"><a href="#2-2、层次选择器" class="headerlink" title="2.2、层次选择器"></a>2.2、层次选择器</h3><p>1、后代选择器：所有后代</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、子选择器：只选择子类</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、相邻兄弟选择器：只对下邻居有效，只选择一个</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.active</span> + <span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、通用选择器：当前选中元素后面的所有同级<code>p</code>标签</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.active</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3、结构伪类选择器"><a href="#2-3、结构伪类选择器" class="headerlink" title="2.3、结构伪类选择器"></a>2.3、结构伪类选择器</h3><p>伪类：条件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="comment">/*定位到第一个元素p的父元素下的第3个子元素，计数不看种类，对同类标签才有效*/</span></span><br><span class="line">        <span class="selector-tag">h1</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#3015c7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*定位第一个标签的父元素，然后数到第一个同类标签*/</span></span><br><span class="line">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*鼠标悬浮时产生效果*/</span></span><br><span class="line">        <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: bisque;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/04/CSS3/image-20210204210526173.png" alt="image-20210204210526173"></p>
<h3 id="2-4、属性选择器（常用）"><a href="#2-4、属性选择器（常用）" class="headerlink" title="2.4、属性选择器（常用）"></a>2.4、属性选择器（常用）</h3><p>id+class的结合</p>
<blockquote>
<p>html代码</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>属性选择器 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.demo</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            display: block;</span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 50px;</span><br><span class="line">            background: cyan;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            margin-right: 5px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            font: bold 20px/50px Arial;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">class</span>=<span class="string">"links items first"</span> <span class="attr">id</span>=<span class="string">"first"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.codefriday.cn"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"我的博客"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"3.pdf"</span> <span class="attr">class</span>=<span class="string">"links items"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://"</span> <span class="attr">class</span>=<span class="string">"links items"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"5.pdf"</span> <span class="attr">class</span>=<span class="string">"links items"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"6.jpg"</span> <span class="attr">class</span>=<span class="string">"links items"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"7.doc"</span> <span class="attr">class</span>=<span class="string">"links items"</span> <span class="attr">id</span>=<span class="string">"senven"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"8.doc"</span> <span class="attr">class</span>=<span class="string">"links items"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"9.com"</span> <span class="attr">class</span>=<span class="string">"links items"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"10.com"</span> <span class="attr">class</span>=<span class="string">"links items"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>CSS选择</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*a标签带有id属性的*/</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-attr">[id]</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*a标签id属性确定值的*/</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-attr">[id=senven]</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*a标签class属性包含first的*/</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-attr">[class*=first]</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*a标签href属性以https开头的元素*/</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-attr">[href^=https]</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*a标签href属性以doc结尾的元素*/</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-attr">[href$=doc]</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: yellow;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、美化网页元素"><a href="#3、美化网页元素" class="headerlink" title="3、美化网页元素"></a>3、美化网页元素</h2><p><strong>span标签：重点要突出的字(约定俗成)</strong></p>
<h3 id="3-1、字体样式"><a href="#3-1、字体样式" class="headerlink" title="3.1、字体样式"></a>3.1、字体样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span> : 字体</span><br><span class="line"><span class="selector-tag">font-size</span>   : 大小</span><br><span class="line"><span class="selector-tag">font-weight</span> : 字体粗细</span><br><span class="line"><span class="selector-tag">color</span>		: 颜色</span><br></pre></td></tr></table></figure>

<h3 id="3-2、文本样式"><a href="#3-2、文本样式" class="headerlink" title="3.2、文本样式"></a>3.2、文本样式</h3><p>1、颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">单词</span><br><span class="line"><span class="selector-tag">RGB</span></span><br><span class="line"><span class="selector-tag">RGBA</span> <span class="selector-tag">A</span>表示透明度0<span class="selector-tag">-1</span></span><br></pre></td></tr></table></figure>

<p>2、对齐方式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span> : 排版（<span class="selector-tag">left</span>,<span class="selector-tag">right</span>,<span class="selector-tag">center</span>）</span><br></pre></td></tr></table></figure>

<p>3、首行缩进</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-indent</span><span class="selector-pseudo">:2em</span>  <span class="selector-tag">em</span>表示缩进字的个数</span><br></pre></td></tr></table></figure>

<p>4、行高</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">line-height</span>:</span><br><span class="line">设置和块大小一样时，就达到上下居中的效果</span><br></pre></td></tr></table></figure>

<p>5、装饰</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-decoration</span>:</span><br><span class="line"><span class="selector-tag">line-inderline</span>  下划线</span><br><span class="line"><span class="selector-tag">line-through</span>	中划线</span><br><span class="line"><span class="selector-tag">line-overline</span>	上划线</span><br></pre></td></tr></table></figure>

<h3 id="3-3、阴影"><a href="#3-3、阴影" class="headerlink" title="3.3、阴影"></a>3.3、阴影</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">:颜色 水平便宜（右为正） 垂直偏移（下为正） 阴影大小</span><br><span class="line"><span class="selector-tag">text-shadow</span>: <span class="selector-tag">aquamarine</span> <span class="selector-tag">-10px</span> <span class="selector-tag">-10px</span> 1<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-4、列表样式"><a href="#3-4、列表样式" class="headerlink" title="3.4、列表样式"></a>3.4、列表样式</h3><p>未用css之前：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表样式练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;link rel="stylesheet" href="css/style.css"&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>全部商品分类<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>图书<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>音像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>数字商品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>办公<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>家居<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>家装<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>厨具<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>服饰鞋帽<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>个性化妆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>礼品箱包<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>钟表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>珠宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>食品饮料<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>保健食品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>彩票<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>旅行<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>充值<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>票务<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/04/CSS3/image-20210205143007074.png" alt="image-20210205143007074"></p>
<blockquote>
<p>CSS美化</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#nav</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">background</span>: aliceblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: orangered;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orangered;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/04/CSS3/image-20210205143058092.png" alt="image-20210205143058092"></p>
<h3 id="3-5、背景"><a href="#3-5、背景" class="headerlink" title="3.5、背景"></a>3.5、背景</h3><ul>
<li>背景颜色</li>
<li>背景图片</li>
</ul>
<h3 id="3-6、渐变"><a href="#3-6、渐变" class="headerlink" title="3.6、渐变"></a>3.6、渐变</h3><p>开源调色项目：<a href="https://www.grabient.com/" target="_blank" rel="noopener">https://www.grabient.com/</a></p>
<ul>
<li>径向渐变</li>
<li>圆形渐变</li>
</ul>
<p><img src="/2021/02/04/CSS3/image-20210205150002604.png" alt="image-20210205150002604"></p>
<h2 id="4、盒子模型"><a href="#4、盒子模型" class="headerlink" title="4、盒子模型"></a>4、盒子模型</h2><h3 id="4-1、什么是盒子"><a href="#4-1、什么是盒子" class="headerlink" title="4.1、什么是盒子"></a>4.1、什么是盒子</h3><p><img src="/2021/02/04/CSS3/image-20210205150229956.png" alt="image-20210205150229956"></p>
<p><code>margin</code>：外边距</p>
<p><code>border</code>：边框</p>
<p><code>padding</code>：内边距</p>
<h3 id="4-2、边框"><a href="#4-2、边框" class="headerlink" title="4.2、边框"></a>4.2、边框</h3><ul>
<li><p>样式</p>
</li>
<li><p>粗细</p>
</li>
<li><p>颜色</p>
</li>
</ul>
<blockquote>
<p>练习</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CodeFriday<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            margin: 0px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#8EC5FC</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(62<span class="selector-tag">deg</span>, <span class="selector-id">#8EC5FC</span> 0%, <span class="selector-id">#E0C3FC</span> 100%);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.UI</span>&#123;</span></span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            width: 60%;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span>: 98<span class="selector-class">.5</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#ffa200</span> 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">            border-radius: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.message_show</span>&#123;</span></span><br><span class="line">            width: 75%;</span><br><span class="line">            height: 70%;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#bbc1d5</span> 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">            border-radius: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.message_send</span>&#123;</span></span><br><span class="line">            width: 75%;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span>: 27<span class="selector-class">.2</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#f60404</span> 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">            border-radius: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.user_list</span>&#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 5px;</span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:66</span>%;</span></span><br><span class="line">            height: 97%;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 13<span class="selector-class">.4</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#f60404</span> 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">            border-radius: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--UI界面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"UI"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message_show"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message_send"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user_list"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/04/CSS3/image-20210205170344398.png" alt="image-20210205170344398"></p>
<h3 id="4-3、圆角边框"><a href="#4-3、圆角边框" class="headerlink" title="4.3、圆角边框"></a>4.3、圆角边框</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>:</span><br><span class="line">顺时针方向4个参数！最多为块边长一半！</span><br></pre></td></tr></table></figure>

<h3 id="4-4、盒子阴影"><a href="#4-4、盒子阴影" class="headerlink" title="4.4、盒子阴影"></a>4.4、盒子阴影</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-id">#85FFBD</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 100<span class="selector-tag">px</span>;</span><br><span class="line">颜色，水平偏移，垂直偏移，阴影半径</span><br></pre></td></tr></table></figure>

<h2 id="5、浮动"><a href="#5、浮动" class="headerlink" title="5、浮动"></a>5、浮动</h2><h3 id="5-1、标准文档流"><a href="#5-1、标准文档流" class="headerlink" title="5.1、标准文档流"></a>5.1、标准文档流</h3><p>自上而下布局</p>
<ul>
<li>块级元素：独占一行</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>~<span class="selector-tag">h6</span> <span class="selector-tag">p</span> <span class="selector-tag">div</span> 列表...</span><br></pre></td></tr></table></figure>

<ul>
<li>行内元素，不独占一行</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span> <span class="selector-tag">strong</span>...</span><br></pre></td></tr></table></figure>

<p>行内元素可以包含在块级元素中，反之不可以</p>
<h3 id="5-2、display"><a href="#5-2、display" class="headerlink" title="5.2、display"></a>5.2、display</h3><p><code>block</code>：块元素</p>
<p><code>inline-block</code>：行内、块级元素</p>
<p><code>inline</code>：行内元素</p>
<p><code>none</code>：消失</p>
<h3 id="5-3、浮动"><a href="#5-3、浮动" class="headerlink" title="5.3、浮动"></a>5.3、浮动</h3><p><code>float: left;</code></p>
<p><code>float: right;</code></p>
<h3 id="5-4、父级边框塌陷问题"><a href="#5-4、父级边框塌陷问题" class="headerlink" title="5.4、父级边框塌陷问题"></a>5.4、父级边框塌陷问题</h3><blockquote>
<p>clear清除浮动</p>
</blockquote>
<p><code>left</code>：左侧不允许有浮动元素，有就排到下一行</p>
<p><code>right</code>：右侧不允许有浮动元素，有就排到下一行</p>
<p><code>both</code>：两侧 </p>
<blockquote>
<p>解决方案：</p>
</blockquote>
<p>1、增加父级元素高度</p>
<p>2、增加一个空的div标签，清除浮动</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">.clear&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、overflow</p>
<p>在父级元素中增加一个overflow属性<code>overflow:hidden;</code></p>
<p>4、父类添加伪类：after(推荐！)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">''</span></span><br><span class="line">    display:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、定位"><a href="#6、定位" class="headerlink" title="6、定位"></a>6、定位</h2><h3 id="6-1、相对定位"><a href="#6-1、相对定位" class="headerlink" title="6.1、相对定位"></a>6.1、相对定位</h3><p>相对自己原来的位置偏移，保留原来的位置</p>
<p><img src="/2021/02/04/CSS3/image-20210205201843802.png" alt="image-20210205201843802"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #father&#123;</span><br><span class="line">            border: <span class="number">2</span>px solid red;</span><br><span class="line">            padding: <span class="number">5</span>px;</span><br><span class="line">            width: <span class="number">300</span>px;</span><br><span class="line">            height: <span class="number">300</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        a&#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            text-align: center;</span><br><span class="line">            color: #FFFFFF;</span><br><span class="line">            background: pink;</span><br><span class="line">            line-height: <span class="number">100</span>px;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">        a:hover&#123;</span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">        .link1&#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            top: -<span class="number">100</span>px;</span><br><span class="line">            left: <span class="number">200</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .link2&#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            top: -<span class="number">100</span>px;</span><br><span class="line">            left: <span class="number">100</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .link3&#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            top: -<span class="number">100</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .link4&#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            top: -<span class="number">200</span>px;</span><br><span class="line">            left: <span class="number">200</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"father"</span>&gt;</span><br><span class="line">    &lt;a class="link0" href="https:www.baidu.com"&gt;链接1&lt;/a&gt;</span><br><span class="line">    &lt;a class="link1" href="https:www.codefriday.vn"&gt;链接2&lt;/a&gt;</span><br><span class="line">    &lt;a class="link2" href="#"&gt;链接3&lt;/a&gt;</span><br><span class="line">    &lt;a class="link3" href="#"&gt;链接4&lt;/a&gt;</span><br><span class="line">    &lt;a class="link4" href="#"&gt;链接5&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-2、绝对定位"><a href="#6-2、绝对定位" class="headerlink" title="6.2、绝对定位"></a>6.2、绝对定位</h3><p>定位：基于xxx定位</p>
<p>1、父元素没有定位时，基于浏览器定位。</p>
<p>2、假设父级元素存在定位，通常会基于父级元素绝对定位</p>
<p>3、在父级元素范围类移动</p>
<p>绝对定位不保留原来的位置</p>
<h3 id="6-3、固定定位fixed"><a href="#6-3、固定定位fixed" class="headerlink" title="6.3、固定定位fixed"></a>6.3、固定定位fixed</h3><p>固定在了浏览器窗口上！</p>
<h3 id="6-4、Z-index"><a href="#6-4、Z-index" class="headerlink" title="6.4、Z-index"></a>6.4、Z-index</h3><p>图层的概念。</p>
]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
      <tags>
        <tag>第二阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5</title>
    <url>/2021/02/03/HTML5/</url>
    <content><![CDATA[<h2 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h2><ul>
<li><p>HTML 指的是超文本<strong>标记语言</strong>: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</p>
</li>
<li><p>HTML 不是一种编程语言，而是一种<strong>标记</strong>语言</p>
</li>
<li><p>标记语言是一套<strong>标记标签</strong> (markup tag)</p>
</li>
<li><p>HTML 使用标记标签来<strong>描述</strong>网页</p>
</li>
<li><p>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</p>
</li>
<li><p>HTML文档也叫做 <strong>web 页面</strong></p>
</li>
</ul>
<blockquote>
<p>W3C标准</p>
</blockquote>
<ul>
<li><p><strong>W3C</strong></p>
<ul>
<li><p>World Wide Web Consortium（万维网联盟）</p>
</li>
<li><p>成立于1994年，Web技术领域最权威和具有影响力的国际<strong>中立性技术标准机构</strong></p>
</li>
<li><p><a href="http://www.w3.org/" target="_blank" rel="noopener">http://www.w3.org/</a></p>
</li>
<li><p><a href="http://www.chinaw3.org/" target="_blank" rel="noopener">http://www.chinaw3.org/</a></p>
</li>
</ul>
</li>
<li><p><strong>W3C包括</strong></p>
<ul>
<li><strong>结构</strong>化标准语言（HTML、XML）</li>
<li><strong>表现</strong>标准语言（CSS）</li>
<li><strong>行为</strong>标准语言（DMO、ECMAScript）</li>
</ul>
</li>
</ul>
<blockquote>
<p>HTML基本结构</p>
</blockquote>
<p><img src="/2021/02/03/HTML5/image-20210203181741075.png" alt="image-20210203181741075"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOCTYPE：告诉浏览器，我们要使用什么规范 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- head标签表示网页头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- meta标签，一般用来描述网页信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- meta标签一般用来做SEO --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- title-网页标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">--</span> <span class="attr">body</span>标签代表网页主体 <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="网页基本标签"><a href="#网页基本标签" class="headerlink" title="网页基本标签"></a>网页基本标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--标题标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标签<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--段落标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第一段文字    hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第二段文字    world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--水平线标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--换行标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--和段落标签间隙不太一样--&gt;</span></span><br><span class="line">第一段文字    hello<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">第二段文字    world</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--字体样式标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>字体样式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>这是粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>这是斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--特殊符号--&gt;</span></span><br><span class="line">空   格</span><br><span class="line">空<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>格</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;gt;</span>大于</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;copf;</span>版权</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><p> <img src="/2021/02/03/HTML5/image-20210203185225896.png" alt="image-20210203185225896"></p>
<p><code>src</code>和<code>alt</code>必填。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resource/image/1.png"</span> <span class="attr">alt</span>=<span class="string">"codefriday"</span> <span class="attr">title</span>=<span class="string">"我的头像"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h2><p><img src="/2021/02/03/HTML5/image-20210203190605136.png" alt="image-20210203190605136"></p>
<ul>
<li><p><code>href</code>标签：必填，表示链接地址。</p>
</li>
<li><p><code>target</code>标签：表示窗口在哪里打开</p>
<ul>
<li>_bank：在新标签打开</li>
<li>_self：在自己的网页中打开</li>
</ul>
</li>
</ul>
<blockquote>
<p>页面链接：页面之间的跳转</p>
</blockquote>
<blockquote>
<p>锚链接</p>
</blockquote>
<ul>
<li>定义一个标记点</li>
<li>通过<code>#标记名</code>跳转</li>
</ul>
<blockquote>
<p>功能性链接</p>
</blockquote>
<p>例如：mailto</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>链接标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"top"</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"1.我的第一个网页.html"</span>&gt;</span>页面一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.codefriday.cn"</span> <span class="attr">target</span>=<span class="string">"_top"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resource/image/1.png"</span> <span class="attr">alt</span>=<span class="string">"codefriday"</span> <span class="attr">title</span>=<span class="string">"我的头像"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resource/image/1.png"</span> <span class="attr">alt</span>=<span class="string">"codefriday"</span> <span class="attr">title</span>=<span class="string">"我的头像"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resource/image/1.png"</span> <span class="attr">alt</span>=<span class="string">"codefriday"</span> <span class="attr">title</span>=<span class="string">"我的头像"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resource/image/1.png"</span> <span class="attr">alt</span>=<span class="string">"codefriday"</span> <span class="attr">title</span>=<span class="string">"我的头像"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resource/image/1.png"</span> <span class="attr">alt</span>=<span class="string">"codefriday"</span> <span class="attr">title</span>=<span class="string">"我的头像"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resource/image/1.png"</span> <span class="attr">alt</span>=<span class="string">"codefriday"</span> <span class="attr">title</span>=<span class="string">"我的头像"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#top"</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--功能性链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:853851430@qq.com"</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="行内元素和块元素"><a href="#行内元素和块元素" class="headerlink" title="行内元素和块元素"></a>行内元素和块元素</h2><ul>
<li><p>块元素</p>
<ul>
<li>无论多少内容，该元素独占一行</li>
<li>（p、h1-h6…)</li>
</ul>
</li>
<li><p>行内元素</p>
<ul>
<li>内容撑开的元素，左右都是行内元素的可以排在一行</li>
</ul>
</li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>分类：</strong></p>
<ul>
<li>无序列表</li>
<li>有序列表</li>
<li>自定义列表</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>多线程<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>网络编程<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JUI<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JVM<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>code<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>friday<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义列表</span></span><br><span class="line"><span class="comment">dl:标签</span></span><br><span class="line"><span class="comment">dt:列表名称</span></span><br><span class="line"><span class="comment">dd:列表名字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><ul>
<li><code>table</code>：表格标签</li>
<li><code>tr</code>：行标签</li>
<li><code>td</code>：列标签</li>
<li><code>tr colspan=“3”</code>：跨列</li>
<li><code>td rowspan=”2“</code>：跨行</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="媒体元素"><a href="#媒体元素" class="headerlink" title="媒体元素"></a>媒体元素</h2><p><strong>视频和音频</strong></p>
<blockquote>
<p>视频元素：video</p>
</blockquote>
<ul>
<li>src：资源路径</li>
<li>controls：控制栏</li>
<li>autoplay：自动播放</li>
</ul>
<blockquote>
<p>音频元素：audio</p>
</blockquote>
<ul>
<li>src：资源路径</li>
<li>controls：控制栏</li>
<li>autoplay：自动播放</li>
</ul>
<h2 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h2><p><img src="/2021/02/03/HTML5/image-20210203205202540.png" alt="image-20210203205202540"></p>
<h2 id="iframe内联框架"><a href="#iframe内联框架" class="headerlink" title="iframe内联框架"></a>iframe内联框架</h2><p><img src="/2021/02/03/HTML5/image-20210203205924465.png" alt="image-20210203205924465"></p>
<blockquote>
<p>测试代码</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;iframe框架&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;iframe src="" name="hello" frameborder="0" width="1000px" height="500px" &gt;&lt;/iframe&gt;</span><br><span class="line">&lt;a href="https://www.codefriday.cn" target="hello"&gt;点我跳转&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h2><blockquote>
<p>表单语法</p>
</blockquote>
<p><img src="/2021/02/03/HTML5/image-20210203210834670.png" alt="image-20210203210834670"></p>
<ul>
<li>get方式：url中可以直接看到参数，较为不安全，但高效</li>
<li>post方式：url中看不到参数</li>
</ul>
<blockquote>
<p>表单元素格式：</p>
</blockquote>
<p><img src="/2021/02/03/HTML5/image-20210203212528740.png" alt="image-20210203212528740"></p>
<h2 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h2><ul>
<li><code>input type=&quot;radio&quot;</code></li>
<li><code>value</code>：单选框的值</li>
<li><code>name</code>：表示组，同一组只能选择一个</li>
</ul>
<h2 id="多选框和按钮"><a href="#多选框和按钮" class="headerlink" title="多选框和按钮"></a>多选框和按钮</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多选框--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"play"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>玩</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"game"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>游戏</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"coding"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>写代码</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>input的value属性</p>
</blockquote>
<ul>
<li><p><code>button</code>：按钮标签</p>
</li>
<li><p><code>image</code>：也是一个按钮，会提交表单</p>
</li>
<li><p><code>submit</code>：提交表单按钮</p>
</li>
<li><p><code>reset</code>：清空表单按钮</p>
</li>
<li><p><code>file</code>：文件域</p>
</li>
<li><p><code>range</code>：滑块</p>
</li>
</ul>
<h2 id="列表框、文本域、文件域"><a href="#列表框、文本域、文件域" class="headerlink" title="列表框、文本域、文件域"></a>列表框、文本域、文件域</h2><blockquote>
<p>列表框</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--下拉框--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>国家：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"列表名称"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"china"</span> <span class="attr">selected</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"US"</span> &gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"UC"</span>&gt;</span>英国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>文本域</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文本域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>自我简介：</span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"intro"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文件域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>提交简历:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"files"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>第二阶段</category>
      </categories>
      <tags>
        <tag>第二阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC并发编程</title>
    <url>/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1、什么是JUC"><a href="#1、什么是JUC" class="headerlink" title="1、什么是JUC"></a>1、什么是JUC</h2><p>JUC是<code>java.util.concurrent</code>简称，主要包含以下几个包</p>
<ul>
<li><code>java.util.concurrent</code></li>
<li><code>java.util.concurrent.atomic</code></li>
<li><code>java.util.concurrent.locks</code></li>
</ul>
<h2 id="2、线程与进程"><a href="#2、线程与进程" class="headerlink" title="2、线程与进程"></a>2、线程与进程</h2><blockquote>
<p>线程的状态：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">        NEW,</span><br><span class="line">        RUNNABLE,</span><br><span class="line">        BLOCKED,</span><br><span class="line">        WAITING,</span><br><span class="line">        TIMED_WAITING,</span><br><span class="line">        TERMINATED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>sleep和wait的区别</p>
</blockquote>
<p><strong>（1）来自不同的类</strong></p>
<p>wait =&gt; Object</p>
<p>sleep =&gt; Thread</p>
<p><strong>（2）关于锁的释放</strong></p>
<p>wait会释放锁，但sleep不会</p>
<h2 id="3、Lock锁"><a href="#3、Lock锁" class="headerlink" title="3、Lock锁"></a>3、Lock锁</h2><blockquote>
<p>传统synchronized，锁+队列</p>
</blockquote>
<p>1、修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象； </p>
<p>2、修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象； </p>
<p>3、修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象； </p>
<p>4、修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket t1 = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">40</span>;i++) t1.buy();&#125;,<span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">40</span>;i++) t1.buy();&#125;,<span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">40</span>;i++) t1.buy();&#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>)</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"买到了第"</span> + (tickets--) + <span class="string">"张票，剩余："</span> + tickets);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Lock接口</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210131124819662.png" alt="image-20210131124819662"></p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210131131956970.png" alt="image-20210131131956970"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket1 t1 = <span class="keyword">new</span> Ticket1();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">40</span>;i++) t1.buy();&#125;,<span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">40</span>;i++) t1.buy();&#125;,<span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">40</span>;i++) t1.buy();&#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket1</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">30</span>;</span><br><span class="line">        ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>)</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"买到了第"</span> + (tickets--) + <span class="string">"张票，剩余："</span> + tickets);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Synchronized 和 Lock区别</p>
</blockquote>
<p>1、<code>Synchronized</code>是内置的java关键字，<code>Lock</code>是一个类</p>
<p>2、<code>Synchronized</code>无法判断获取锁的状态，Lock可以判断</p>
<p>3、<code>Synchronized</code>会自动释放锁，Lock必须手动释放，不释放会导致死锁。</p>
<p>4、<code>Synchronized</code>（线程1：阻塞，线程2：等待）；Lock锁不一定会一直等待下去。</p>
<p>5、<code>Synchronized</code>是可重入锁，不可以中断的，非公平；Lock，可重入，可判断锁，公平性可自己设置。</p>
<p>6、<code>Synchronized</code>适合锁少量的代码同步问题；Lock适合大量同步代码。</p>
<h2 id="4、生产者-消费者问题"><a href="#4、生产者-消费者问题" class="headerlink" title="4、生产者/消费者问题"></a>4、生产者/消费者问题</h2><blockquote>
<p>单值缓冲区，单生产者，单消费者，Synchronized</p>
</blockquote>
<p><strong>判断等待，业务，通知</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.PC;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 生产者消费者问题</span></span><br><span class="line"><span class="comment"> * 缓冲区大小为1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buffer buffer = <span class="keyword">new</span> Buffer();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    buffer.increment();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    buffer.decrement();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buffer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;"</span>+num);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        num--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;"</span>+num);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多生产者，多消费者时，if判断有问题</p>
</blockquote>
<p>会出现虚假唤醒！！！</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210131135810795.png" alt="image-20210131135810795"></p>
<p><strong>解决方案：if改为while</strong></p>
<blockquote>
<p>JUC中生产者/消费者问题 Condition</p>
</blockquote>
<p>必须使用两个条件变量量保证，因为消费者可能唤醒消费者，导致所有线程睡眠！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.PC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> CodeFriday </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buffer1 buffer = <span class="keyword">new</span> Buffer1();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    buffer.increment();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A生产者"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    buffer.decrement();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"B消费者"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    buffer.decrement();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"C消费者"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buffer1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    ReentrantLock lock  = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition empty = lock.newCondition();</span><br><span class="line">    Condition full = lock.newCondition();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">                empty.await();</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;"</span>+num);</span><br><span class="line">            full.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">                full.await();</span><br><span class="line">            &#125;</span><br><span class="line">            num--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;"</span>+num);</span><br><span class="line">            empty.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>condition精准唤醒</p>
</blockquote>
<p>背景：一个资源类，其中三个方法，负责打印A，B，C，三个线程操作资源类，一个线程循环调用一种，但是必须安装ABC循环的顺序输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.PC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> CodeFriday </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buffer3 buffer3 = <span class="keyword">new</span> Buffer3();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">                buffer3.PrintA();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">                buffer3.PrintB();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">                buffer3.PrintC();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buffer3</span></span>&#123;</span><br><span class="line">    ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition c1 = lock.newCondition();</span><br><span class="line">    Condition c2 = lock.newCondition();</span><br><span class="line">    Condition c3 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(num!=<span class="number">1</span>)&#123;</span><br><span class="line">                c1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"A"</span>);</span><br><span class="line">            num++;</span><br><span class="line">            c2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(num!=<span class="number">2</span>)&#123;</span><br><span class="line">                c2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"B"</span>);</span><br><span class="line">            num++;</span><br><span class="line">            c3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(num!=<span class="number">3</span>)&#123;</span><br><span class="line">                c3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"C"</span>);</span><br><span class="line">            num=<span class="number">1</span>;</span><br><span class="line">            c1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、八锁现象"><a href="#5、八锁现象" class="headerlink" title="5、八锁现象"></a>5、八锁现象</h2><blockquote>
<p>场景一：主函数确保了两个线程调用同步方法的顺序，先打印 发短信 后打印 打电话</p>
<p>答案：发短信</p>
<p>原因：synchronized修饰的方法锁的是调用该方法的对象，也就是new出来的phone</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.EightLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scene1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone1 phone = <span class="keyword">new</span> Phone1();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>场景二：给打电话方法加上休眠4秒，谁先输出</p>
<p>答案：发短信</p>
<p>原因：被 synchronized 修饰的方式，锁的对象是方法的调用者</p>
<p>调用的是同一个对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.EightLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scene2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone2 phone = <span class="keyword">new</span> Phone2();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>场景三：去掉call方法synchronized，谁先输出</p>
<p>答案：打电话</p>
<p>原因：无synchronized修饰不受锁的影响，发短信线程获得锁休眠对其无影响</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.EightLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scene3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone3 phone = <span class="keyword">new</span> Phone3();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>场景四：两个方法都用synchronized修饰，但是两个线程调用不同对象的方法，谁先输出</p>
<p>答案：打电话</p>
<p>原因：发短信线程休眠锁的对象是phone，但是打电话线程需要的对象是phone_1互不影响</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.EightLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scene4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone4 phone = <span class="keyword">new</span> Phone4();</span><br><span class="line">        Phone4 phone_1 = <span class="keyword">new</span> Phone4();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone_1.call();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone4</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>场景五：同步方法加static修饰，谁先输出？</p>
<p>答案：发短信</p>
<p>原因：只要方法被 static 修饰，锁的对象就是 Class模板对象,这个则全局唯一！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.EightLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scene5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone5 phone = <span class="keyword">new</span> Phone5();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone5</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>场景六：把call的static去掉，谁先输出？</p>
<p>答案：打电话</p>
<p>原因：第一个线程调用sendSms由于是静态同步方法，锁的是class类模板，而第二个线程调用call需要的是对象phone的锁。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.EightLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scene6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone6 phone = <span class="keyword">new</span> Phone6();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone6</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>场景七：static+synchronized修饰两个方法，调用不同对象的方法，谁先输出</p>
<p>答案：发短信</p>
<p>原因：static修饰锁定的class类模板，全局唯一</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.EightLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scene7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone7 phone = <span class="keyword">new</span> Phone7();</span><br><span class="line">        Phone7 phone_1 = <span class="keyword">new</span> Phone7();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone_1.call();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone7</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>场景八：把call方法static去掉，两个线程调用两个对象的方法，谁先输出？</p>
<p>答案：打电话</p>
<p>原因：第一个线程锁的是类模板，第二个锁的是phone_1，互补影响</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.EightLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scene8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone8 phone = <span class="keyword">new</span> Phone8();</span><br><span class="line">        Phone8 phone_1 = <span class="keyword">new</span> Phone8();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone_1.call();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone8</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、集合类不安全"><a href="#6、集合类不安全" class="headerlink" title="6、集合类不安全"></a>6、集合类不安全</h2><blockquote>
<p>List不安全</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.UnSafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 报错：List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span></span><br><span class="line"><span class="comment">         * 解决方案：</span></span><br><span class="line"><span class="comment">         * 1、List&lt;String&gt; list = new Vector&lt;&gt;();</span></span><br><span class="line"><span class="comment">         * 2、List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span><br><span class="line"><span class="comment">         * 3、List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * CopyOnWrite：写入时复制 COW</span></span><br><span class="line"><span class="comment">         * 读写分离，写入时先复制一份，写完覆盖回去</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>CopyOnWriteArrayList</code>方法源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object[] elements = getArray();</span><br><span class="line">            <span class="keyword">int</span> len = elements.length;</span><br><span class="line">            Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">            newElements[len] = e;</span><br><span class="line">            setArray(newElements);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Set不安全</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.UnSafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Set&lt;String&gt; set = new HashSet&lt;&gt;();</span></span><br><span class="line"><span class="comment">         * 报错java.util.ConcurrentModificationException</span></span><br><span class="line"><span class="comment">         * 解决方案：</span></span><br><span class="line"><span class="comment">         * 1、Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class="line"><span class="comment">         * 2、JUC下的 Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>HashSet</code>底层：<code>HashMap</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>add</code>方法：将加入<code>set</code>集合的对象作为<code>Hashmap</code>的<code>key</code>来保证不重复！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>HashMap不安全</p>
</blockquote>
<p><code>HashMap</code>不安全分<code>JDK</code>版本，一般1.8和1.7</p>
<p>1.7版本之前<code>HashMap</code>实现数组+链表（冲突解决策略）</p>
<p>1.8版本之后多引入红黑树，解决冲突链表过长问题</p>
<p><strong>HashMap</strong></p>
<ul>
<li><p>1.7版本中<code>HashMap</code>链表使用头插法，并发会出现死循环</p>
</li>
<li><p>1.8版本中HashMap采用尾插法，但是并发导致节点覆盖</p>
</li>
</ul>
<p><strong>ConcurrentHashMap</strong></p>
<ul>
<li>1.7版本采用分段锁实现</li>
<li>1.8版本采用<code>CAS</code> + <code>synchronized</code></li>
</ul>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.UnSafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ConcurrentModificationException</span></span><br><span class="line"><span class="comment">         * HashMap&lt;String, Integer&gt; hashMap = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">         * 解决方案： ConcurrentHashMap&lt;String, Integer&gt; hashMap = new ConcurrentHashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ConcurrentHashMap&lt;String, Integer&gt; hashMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                hashMap.put(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>),<span class="number">0</span>);</span><br><span class="line">                System.out.println(hashMap);</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7、Callable"><a href="#7、Callable" class="headerlink" title="7、Callable"></a>7、Callable</h2><p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210131173417268.png" alt="image-20210131173417268"></p>
<p><strong>相比Runnable的好处：</strong><br>1、可以返回值</p>
<p>2、可以抛出异常</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210131185551879.png" alt="image-20210131185551879"></p>
<blockquote>
<p>测试代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.TestCallable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        FutureTask task = <span class="keyword">new</span> FutureTask(thread);</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">        System.out.println(task.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"==&gt;call()"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：<br>1、get方法获得返回值会阻塞。</p>
<p>2、有缓存，上述代码只输出一次”==&gt;call()”</p>
<h2 id="8、常用的辅助类"><a href="#8、常用的辅助类" class="headerlink" title="8、常用的辅助类"></a>8、常用的辅助类</h2><h3 id="8-1、CountDownLatch"><a href="#8-1、CountDownLatch" class="headerlink" title="8.1、CountDownLatch"></a>8.1、CountDownLatch</h3><blockquote>
<p>JDK文档描述</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210131190803277.png" alt="image-20210131190803277"></p>
<blockquote>
<p>测试代码</p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCountDownLatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CountDownLatch count = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" go out!"</span>);</span><br><span class="line">                count.countDown();</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        count.await();<span class="comment">//如果计数器不为0，此方法会阻塞，不会继续往下执行</span></span><br><span class="line">        System.out.println(<span class="string">"Close door!"</span>);<span class="comment">//一定最后输出！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际就是一个减法计数器。</p>
<p>原理：</p>
<p><code>CountDownLatch.countDown();</code>数量减1，不会阻塞</p>
<p><code>CountDownLatch.await();</code>等待计数器为0，会唤醒调用它的线程。</p>
<h3 id="8-2、CyclicBarrier"><a href="#8-2、CyclicBarrier" class="headerlink" title="8.2、CyclicBarrier"></a>8.2、CyclicBarrier</h3><blockquote>
<p>JDK文档描述</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210131191619447.png" alt="image-20210131191619447"></p>
<p>简单理解：当一些线程执行完才会最终获得某个结果，集齐7龙珠召唤神龙！</p>
<blockquote>
<p>测试代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCyclicBarrier</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>,()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"召唤神龙成功"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">"获得第"</span>+temp+<span class="string">"颗龙珠~"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-3、Semophore"><a href="#8-3、Semophore" class="headerlink" title="8.3、Semophore"></a>8.3、Semophore</h3><blockquote>
<p>JDK文档描述</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210131193109296.png" alt="image-20210131193109296"></p>
<p>操作系统中的信号量：通俗的说初始化给定一个参数表示做多允许多少条线程<code>acquire</code>，其他线程就会阻塞等待，线程调用<code>release</code>释放资源。</p>
<blockquote>
<p>测试代码：以6个车抢车位为例子</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSemaphore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;抢到车位"</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;离开车位"</span>);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>可做限流！</strong></p>
<p>原理：<br><code>semaphore.acquire();</code>获得操作-1，满了就睡眠。</p>
<p><code>semaphore.release();</code>释放操作+1，唤醒睡眠的线程。</p>
<h2 id="9、读写锁"><a href="#9、读写锁" class="headerlink" title="9、读写锁"></a>9、读写锁</h2><ul>
<li><p>读的时候能多个线程同时读</p>
</li>
<li><p>写的时候只能一个锁写</p>
</li>
</ul>
<blockquote>
<p>操作系统中的实现（C）</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210131200817339.png" alt="image-20210131200817339"></p>
<p><strong>实现思想：</strong></p>
<p>获取读锁时：首先获取lock，增加reader变量追踪读者数量，当第一个读着获取该锁时，读者也会获得写锁，最后释放lock。</p>
<p>一旦一个读者获得读锁，其他读者也可以获得这个读锁，但是，想要获取写锁的线程必须等到所有读者结束。即最后推出的写者在”writelock”上调用<code>sem_post</code>，从而等待的写者能获得该锁。</p>
<p><strong>需要达到互斥的操作：</strong></p>
<ul>
<li>读-写</li>
<li>写-写</li>
</ul>
<p><strong>总结一句话：读要等待写完，写要等待读者全部退出</strong></p>
<blockquote>
<p>Java代码测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReadWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCache cache = <span class="keyword">new</span> MyCache();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                cache.put(temp+<span class="string">""</span>,temp);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                cache.get(temp+<span class="string">""</span>);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCache</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    ReentrantReadWriteLock RWLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="comment">//写</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        RWLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"写入"</span>+key);</span><br><span class="line">            map.put(key,value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"写入完成"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RWLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        RWLock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"读取"</span>+key);</span><br><span class="line">            Object o = map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"读取完成"</span>+key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RWLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：(写不能被打断，读可以同时读)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread-<span class="number">0</span>写入<span class="number">0</span></span><br><span class="line">Thread-<span class="number">0</span>写入完成</span><br><span class="line">Thread-<span class="number">1</span>写入<span class="number">1</span></span><br><span class="line">Thread-<span class="number">1</span>写入完成</span><br><span class="line">Thread-<span class="number">2</span>写入<span class="number">2</span></span><br><span class="line">Thread-<span class="number">2</span>写入完成</span><br><span class="line">Thread-<span class="number">3</span>写入<span class="number">3</span></span><br><span class="line">Thread-<span class="number">3</span>写入完成</span><br><span class="line">Thread-<span class="number">4</span>写入<span class="number">4</span></span><br><span class="line">Thread-<span class="number">4</span>写入完成</span><br><span class="line">Thread-<span class="number">6</span>读取<span class="number">1</span></span><br><span class="line">Thread-<span class="number">6</span>读取完成<span class="number">1</span></span><br><span class="line">Thread-<span class="number">8</span>读取<span class="number">3</span></span><br><span class="line">Thread-<span class="number">7</span>读取<span class="number">2</span></span><br><span class="line">Thread-<span class="number">7</span>读取完成<span class="number">2</span></span><br><span class="line">Thread-<span class="number">8</span>读取完成<span class="number">3</span></span><br><span class="line">Thread-<span class="number">5</span>读取<span class="number">0</span></span><br><span class="line">Thread-<span class="number">9</span>读取<span class="number">4</span></span><br><span class="line">Thread-<span class="number">5</span>读取完成<span class="number">0</span></span><br><span class="line">Thread-<span class="number">9</span>读取完成<span class="number">4</span></span><br></pre></td></tr></table></figure>

<h2 id="10、阻塞队列BlockingQueue"><a href="#10、阻塞队列BlockingQueue" class="headerlink" title="10、阻塞队列BlockingQueue"></a>10、阻塞队列BlockingQueue</h2><p>写入：如果队列满了，就必须阻塞等待取出</p>
<p>取出：如果队列为空，就必须阻塞等待写入</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210131205017912.png" alt="image-20210131205017912"></p>
<p><strong>用途：线程池 多并发处理</strong></p>
<p><strong>依据它的基本原理，我们可以实现Web中的长连接聊天功能</strong></p>
<p><strong>ArrayBlockingQueue：</strong></p>
<ul>
<li><p>一个对象数组+一把锁+两个条件</p>
</li>
<li><p>入队与出队都用同一把锁</p>
</li>
<li><p>在只有入队高并发或出队高并发的情况下，因为操作数组，且不需要扩容，性能很高</p>
</li>
<li><p>采用了数组，必须指定大小，即容量有限</p>
</li>
</ul>
<p><strong>LinkedBlockingQueue：</strong></p>
<ul>
<li><p>一个单向链表+两把锁+两个条件</p>
</li>
<li><p>两把锁，一把用于入队，一把用于出队，有效的避免了入队与出队时使用一把锁带来的竞争。</p>
</li>
<li><p>在入队与出队都高并发的情况下，性能比<code>ArrayBlockingQueue</code>高很多</p>
</li>
</ul>
<p>采用了链表，最大容量为整数最大值，可看做容量无限</p>
<p><strong>4组不同的API：</strong></p>
<table>
<thead>
<tr>
<th>操作\方式</th>
<th>抛出异常</th>
<th>有返回值，不抛出异常</th>
<th>阻塞 等待</th>
<th>超时等待</th>
</tr>
</thead>
<tbody><tr>
<td>添加</td>
<td>add</td>
<td>offer()</td>
<td>put()</td>
<td>offer(,,)</td>
</tr>
<tr>
<td>移除</td>
<td>remove</td>
<td>poll()</td>
<td>take()</td>
<td>poll(,)</td>
</tr>
<tr>
<td>检测队首元素</td>
<td>element</td>
<td>peek()</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<blockquote>
<p>SynchronizedQueue 同步队列</p>
</blockquote>
<blockquote>
<p>JDK描述</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210131223318236.png" alt="image-20210131223318236"></p>
<p>没有容量，put和take方法</p>
<p>进去一个对象，必须等待去除来！</p>
<blockquote>
<p>Java代码测试 put+take线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.SynchronousQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSynchronizedQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronousQueue&lt;Integer&gt; sq = <span class="keyword">new</span> SynchronousQueue();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;put"</span>);</span><br><span class="line">                sq.put(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;put"</span>);</span><br><span class="line">                sq.put(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;put"</span>);</span><br><span class="line">                sq.put(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;take"</span>);</span><br><span class="line">                sq.take();</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;take"</span>);</span><br><span class="line">                sq.take();</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"==&gt;take"</span>);</span><br><span class="line">                sq.take();</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11、线程池"><a href="#11、线程池" class="headerlink" title="11、线程池"></a>11、线程池</h2><blockquote>
<p>池化技术</p>
</blockquote>
<p>线程过多会带来调度开销，进而影响缓存局部性和整体性能。而线程池维护着多个线程，等待着监督管理者分配可并发执行的任务。这避免了在处理短时间任务时创建与销毁线程的代价。线程池不仅能够保证内核的充分利用，还能防止过分调度。可用线程数量应该取决于可用的并发处理器、处理器内核、内存、网络sockets等的数量。 </p>
<p><strong>线程池的好处：</strong></p>
<p>1、降低资源消耗</p>
<p>2、提高响应速度</p>
<p>3、方便管理</p>
<p><strong>线程复用，可以控制最大并发数，管理线程。</strong></p>
<blockquote>
<p>线程池的执行流程：</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6024478-88ee7b20f8f45825.png" alt="img"></p>
<blockquote>
<p>四个常见线程池，Excutors类创建</p>
</blockquote>
<p><strong>CachedThreadPool:</strong>可缓存的线程池，该线程池中没有核心线程，非核心线程的数量为Integer.max_value，就是无限大，当有需要时创建线程来执行任务，没有需要时回收线程，适用于耗时少，任务量大的情况，超过60s释放线程。</p>
<p><strong>SecudleThreadPool:</strong>周期性执行任务的线程池，按照某种特定的计划执行线程中的任务，有核心线程，但也有非核心线程，非核心线程的大小也为无限大。适用于执行周期性的任务。</p>
<p><strong>SingleThreadPool:</strong>只有一条线程来执行任务，适用于有顺序的任务的应用场景。</p>
<p><strong>FixedThreadPool:</strong>定长的线程池，有核心线程，核心线程的即为最大的线程数量，没有非核心线程</p>
<blockquote>
<p>ThreadPoolExecutor七大参数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,//核心线程数</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,//最大线程数</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,//线程存活时间</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,//时间单位</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,//阻塞队列</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,//线程工场</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span><span class="comment">//拒绝策略</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>四大拒绝策略</p>
</blockquote>
<p><strong>线程池最大容量 = 最大线程数+阻塞队列容量</strong></p>
<ul>
<li><p><code>ThreadPoolExecutor.AbortPolicy()</code></p>
<p>超过线程池容量，抛出<code>RejectedExecutionException</code></p>
</li>
<li><p><code>ThreadPoolExecutor.CallerRunsPolicy()</code></p>
<p>由调用者执行被拒绝的线程</p>
</li>
<li><p><code>ThreadPoolExecutor.DiscardPolicy()</code></p>
<p>丢掉任务，但是不抛出异常</p>
</li>
<li><p><code>ThreadPoolExecutor.DiscardOldestPolicy()</code></p>
<p>尝试和最早执行的任务的竞争，竞争失败则直接丢弃，不会抛出异常</p>
</li>
</ul>
<blockquote>
<p>如何选择最大线数</p>
</blockquote>
<ul>
<li>CPU密集型：一般获取CPU的核数，即设置成最大线程数</li>
<li>IO密集型：IO耗费时间更多，一般设置成核数*2</li>
</ul>
<p><strong>如何获取CPU核数？</strong></p>
<p><code>Runtime.getRuntime().availableProcessors()</code></p>
<h2 id="12、四大函数式接口"><a href="#12、四大函数式接口" class="headerlink" title="12、四大函数式接口"></a>12、四大函数式接口</h2><ul>
<li><p>链式编程</p>
<p>调用方法时返回一个this对象，即可调用方法后面再跟调用方法</p>
</li>
<li><p>Lamda表达式</p>
<p>函数式接口的简化编程</p>
</li>
</ul>
<p><strong>函数式接口：只有一个抽象方法的接口类</strong></p>
<blockquote>
<p>函数型接口Function</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210201120745130.png" alt="image-20210201120745130"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.TestFunctionInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**普通实现：匿名内部类。</span></span><br><span class="line"><span class="comment">         *         Function&lt;String, String&gt; function = new Function&lt;String, String&gt;() &#123;</span></span><br><span class="line"><span class="comment">         *             <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">         *             public String apply(String o) &#123;</span></span><br><span class="line"><span class="comment">         *                 return o;</span></span><br><span class="line"><span class="comment">         *             &#125;</span></span><br><span class="line"><span class="comment">         *         &#125;;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//Lambda表达式：第一个o传入参数，第二个o返回参数</span></span><br><span class="line">        Function&lt;String, String&gt; function = o -&gt; o;</span><br><span class="line">        System.out.println(function.apply(<span class="string">"Hello World!"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Predicate断定型接口</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210201121731054.png" alt="image-20210201121731054"></p>
<p>传入一个参数，返回一个boolean值，一般用来做判断用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.TestFunctionInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPredicate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/***</span></span><br><span class="line"><span class="comment">         * 匿名内部类写法：</span></span><br><span class="line"><span class="comment">         * Predicate&lt;Integer&gt; predicate = new Predicate&lt;Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">         *             <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">         *             public boolean test(Integer integer) &#123;</span></span><br><span class="line"><span class="comment">         *                 return integer &gt; 5;</span></span><br><span class="line"><span class="comment">         *             &#125;</span></span><br><span class="line"><span class="comment">         *         &#125;;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        Predicate&lt;Integer&gt; predicate = integer -&gt; integer &gt; <span class="number">5</span>;</span><br><span class="line">        System.out.println(predicate.test(<span class="number">10</span>));</span><br><span class="line">        System.out.println(predicate.test(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Consumer 消费型接口</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210201122653549.png" alt="image-20210201122653549"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.TestFunctionInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 匿名内部类写法：</span></span><br><span class="line"><span class="comment">         * Consumer&lt;String&gt; consumer = new Consumer&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">         *             <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">         *             public void accept(String o) &#123;</span></span><br><span class="line"><span class="comment">         *                 System.out.println(o);</span></span><br><span class="line"><span class="comment">         *             &#125;</span></span><br><span class="line"><span class="comment">         *         &#125;;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        Consumer&lt;String&gt; consumer = o -&gt; System.out.println(o);</span><br><span class="line">        consumer.accept(<span class="string">"Test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Supplier 供给型接口</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210201123229800.png" alt="image-20210201123229800"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.TestFunctionInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSupplier</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 匿名内部类写法</span></span><br><span class="line"><span class="comment">         *  Supplier&lt;Integer&gt; supplier = new Supplier&lt;Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">         *             <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">         *             public Integer get() &#123;</span></span><br><span class="line"><span class="comment">         *                 return new Random().nextInt();</span></span><br><span class="line"><span class="comment">         *             &#125;</span></span><br><span class="line"><span class="comment">         *         &#125;;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Supplier&lt;Integer&gt; supplier = () -&gt; <span class="keyword">new</span> Random().nextInt();</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="13、Stream流式计算"><a href="#13、Stream流式计算" class="headerlink" title="13、Stream流式计算"></a>13、Stream流式计算</h2><blockquote>
<p>什么是Stream流式计算</p>
</blockquote>
<p>大数据=存储+计算</p>
<p>集合、MySQL本质就是存储东西的，计算应该交给流</p>
<blockquote>
<p>filter</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></table></figure>

<p>传入一个<code>Predicate</code>函数式接口用于判断条件，保留返回值为真的结果。</p>
<blockquote>
<p>map</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure>

<p>传入一个<code>Function</code>函数式接口，将流中对象某对象替换成其他对象。</p>
<blockquote>
<p>sorted(Comparator)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">sorted</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> T&gt; comparator)</span></span>;</span><br></pre></td></tr></table></figure>

<p>传入一个比较器排序。</p>
<blockquote>
<p>limit</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">limit</span><span class="params">(<span class="keyword">long</span> maxSize)</span></span>;</span><br></pre></td></tr></table></figure>

<p>输出流中的前<code>maxSize</code>个对象</p>
<blockquote>
<p>forEach</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br></pre></td></tr></table></figure>

<p>传入消费性函数式接口遍历流进行一些附加操作。</p>
<p><strong>共性，一些计算操作都返回了一个Stream流，因此可用作链式编程！</strong></p>
<blockquote>
<p>代码测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.StreamTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目要求：一行代码实现</span></span><br><span class="line"><span class="comment"> * 现在有五个用户，筛选</span></span><br><span class="line"><span class="comment"> * 1、ID必须为偶数</span></span><br><span class="line"><span class="comment"> * 2、年龄必须大于23岁</span></span><br><span class="line"><span class="comment"> * 3、用户名转为大写字母</span></span><br><span class="line"><span class="comment"> * 4、用户名倒叙排序</span></span><br><span class="line"><span class="comment"> * 5、只输出一个用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"a"</span>,<span class="number">21</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">"b"</span>,<span class="number">22</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">"c"</span>,<span class="number">23</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">"d"</span>,<span class="number">24</span>);</span><br><span class="line">        User u5 = <span class="keyword">new</span> User(<span class="number">6</span>,<span class="string">"e"</span>,<span class="number">25</span>);</span><br><span class="line">        List&lt;User&gt; list = Arrays.asList(u1,u2,u3,u4,u5);</span><br><span class="line">        Stream&lt;User&gt; stream = list.stream();</span><br><span class="line">        stream.filter(u-&gt; (u.getId()%<span class="number">2</span>)==<span class="number">0</span>)</span><br><span class="line">                .filter(u-&gt;u.getAge()&gt;<span class="number">23</span>)</span><br><span class="line">                .map(u-&gt;<span class="keyword">new</span> User(u.getId(),u.getName().toUpperCase(Locale.ROOT),u.getAge()))</span><br><span class="line">                .sorted((o1, o2) -&gt; o2.getName().compareTo(o1.getName()))</span><br><span class="line">                .limit(<span class="number">1</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：流式计算=链式编程+函数式接口，函数式接口方便使用Lambda表达式简化编程！</strong></p>
<h2 id="14、ForkJoin"><a href="#14、ForkJoin" class="headerlink" title="14、ForkJoin"></a>14、ForkJoin</h2><blockquote>
<p>什么是ForkJoin</p>
</blockquote>
<p>ForkJoin是由JDK1.7后提供多线并发处理框架。ForkJoin的框架的基本思想是分而治之。</p>
<p>大数据领域：Map Reduce 任务拆分</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210201150712556.png" alt="image-20210201150712556"></p>
<blockquote>
<p>FrokJoin使用方法</p>
</blockquote>
<h4 id="一、-创建Task"><a href="#一、-创建Task" class="headerlink" title="一、 创建Task"></a>一、 创建Task</h4><p>使用ForkJoin框架，需要创建一个ForkJoin的任务，而ForkJoinTask是一个抽象类，我们不需要去继承ForkJoinTask进行使用。因为ForkJoin框架为我们提供了RecursiveAction和RecursiveTask。我们只需要继承ForkJoin为我们提供的抽象类的其中一个并且实现compute方法。</p>
<h4 id="二、使用ForkJoinPool进行执行"><a href="#二、使用ForkJoinPool进行执行" class="headerlink" title="二、使用ForkJoinPool进行执行"></a>二、使用ForkJoinPool进行执行</h4><p>task要通过ForkJoinPool来执行，分割的子任务也会添加到当前工作线程的双端队列中，<br>进入队列的头部。当一个工作线程中没有任务时，会从其他工作线程的队列尾部获取一个任务(工作窃取)。</p>
<h4 id="三、RecursiveTask和RecursiveAction区别"><a href="#三、RecursiveTask和RecursiveAction区别" class="headerlink" title="三、RecursiveTask和RecursiveAction区别"></a>三、RecursiveTask和RecursiveAction区别</h4><p>前者有返回结果，后者没有返回结果。</p>
<p>fork负责分割工作</p>
<blockquote>
<p>ForkJoin特点：工作窃取</p>
</blockquote>
<p>类似多CPU调度中，CPU空闲会从其他地方窃取工作执行。</p>
<p>一般工作集都是双端队列！</p>
<p>这个框架是借助了现代计算机多核的优势并行去处理数据。</p>
<blockquote>
<p>代码测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.ForkJoinTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.OptionalLong;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinTask;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.LongStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ForkJoinTask&lt;Long&gt; task = new MyTask(1L,10_0000_0000L);</span></span><br><span class="line"><span class="comment">         *         ForkJoinPool forkJoinPool = new ForkJoinPool();</span></span><br><span class="line"><span class="comment">         *         Long ans = forkJoinPool.invoke(task);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Long ans = new SimpleCal(1L, 10_0000_0000L).CalculateIt();</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        OptionalLong ans = LongStream.rangeClosed(<span class="number">1L</span>,<span class="number">10_0000_0000L</span>).parallel().reduce(Long::sum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"ans = "</span>+ans+<span class="string">"，耗时："</span>+(end-start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单for循环计算  耗时：12628</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleCal</span></span>&#123;</span><br><span class="line">    Long start;</span><br><span class="line">    Long end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleCal</span><span class="params">(Long start, Long end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">CalculateIt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Long sum = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ForkJoin计算5619</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line">    Long start;</span><br><span class="line">    Long end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(Long start, Long end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(end-start&lt;<span class="number">10000</span>)&#123;</span><br><span class="line">            Long sum = <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">for</span>(Long i = start;i&lt;=end;i++)&#123;</span><br><span class="line">                sum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Long mid = (start+end)/<span class="number">2</span>;</span><br><span class="line">            MyTask left = <span class="keyword">new</span> MyTask(start,mid);</span><br><span class="line">            left.fork();</span><br><span class="line">            MyTask right = <span class="keyword">new</span> MyTask(mid+<span class="number">1</span>,end);</span><br><span class="line">            right.fork();</span><br><span class="line">            <span class="keyword">return</span> left.join() + right.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="15、异步回调"><a href="#15、异步回调" class="headerlink" title="15、异步回调"></a>15、异步回调</h2><blockquote>
<p>同步回调</p>
</blockquote>
<p> 我们常用的一些请求都是同步回调的，同步回调是阻塞的，单个的线程需要等待结果的返回才能继续执行。</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2018052219070510" alt="img"></p>
<blockquote>
<p> 异步回调</p>
</blockquote>
<p>有的时候，我们不希望程序在某个执行方法上一直阻塞，需要先执行后续的方法，那就是这里的异步回调。我们在调用一个方法时，如果执行时间比较长，我们可以传入一个回调的方法，当方法执行完时，让被调用者执行给定的回调方法。</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/20180522190716303" alt="img"></p>
<h2 id="16、JMM"><a href="#16、JMM" class="headerlink" title="16、JMM"></a>16、JMM</h2><blockquote>
<p>Volatile的特点</p>
</blockquote>
<p>1、保证可见性</p>
<p>2、不保证原子性</p>
<p>3、禁止指令重排</p>
<blockquote>
<p>什么是JMM</p>
</blockquote>
<p>JMM：Java内存模型，一个概念。</p>
<p><strong>关于JMM的一些同步的约定：</strong></p>
<p>1、线程解锁前，必须立刻把工作内存的变量覆盖回主存。</p>
<p>2、线程加锁前，必须读取主存最新值到自己的工作内存。</p>
<p>3、加锁和解锁必须是同一把。</p>
<blockquote>
<p>工作内存 和 主存</p>
</blockquote>
<p>可以简单的认为主内存是java虚拟机内存区域中的堆，局部变量和方法参数是在虚拟机栈中定义的。但是在堆中的变量如果在多线程中都使用，就涉及到了堆和不同虚拟机栈中变量的值的一致性问题了。</p>
<ul>
<li><p>主内存：java虚拟机规定所有的变量(不是程序中的变量)都必须在主内存中产生，为了方便理解，可以认为是堆区。可以与前面说的物理机的主内存相比，只不过物理机的主内存是整个机器的内存，而虚拟机的主内存是虚拟机内存中的一部分。</p>
</li>
<li><p>工作内存：java虚拟机中每个线程都有自己的工作内存，该内存是线程私有的为了方便理解，可以认为是虚拟机栈。可以与前面说的高速缓存相比。线程的工作内存保存了线程需要的变量在主内存中的副本。虚拟机规定，线程对主内存变量的修改必须在线程的工作内存中进行，不能直接读写主内存中的变量。不同的线程之间也不能相互访问对方的工作内存。如果线程之间需要传递变量的值，必须通过主内存来作为中介进行传递。</p>
</li>
</ul>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4899162-66736384361f6b8b.png" alt="img"></p>
<p><strong><em>这里需要说明一下：主内存、工作内存与java内存区域中的java堆、虚拟机栈、方法区并不是一个层次的内存划分。这两者是基本上是没有关系的。</em></strong></p>
<blockquote>
<p>工作内存与主内存交互(8中操作)</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210202203941374.png" alt="image-20210202203941374"></p>
<p><strong>lock(锁定)</strong>:作用于主内存的变量，一个变量在同一时间只能一个线程锁定，该操作表示这条线成独占这个变量</p>
<p><strong>unlock(解锁)</strong>:作用于主内存的变量，表示这个变量的状态由处于锁定状态被释放，这样其他线程才能对该变量进行锁定</p>
<p><strong>read(读取)</strong>:作用于主内存变量，表示把一个主内存变量的值传输到线程的工作内存，以便随后的load操作使用</p>
<p><strong>load(载入)</strong>:作用于线程的工作内存的变量，表示把read操作从主内存中读取的变量的值放到工作内存的变量副本中(副本是相对于主内存的变量而言的)</p>
<p><strong>use(使用)</strong>:作用于线程的工作内存中的变量，表示把工作内存中的一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时就会执行该操作</p>
<p><strong>assign(赋值)</strong>:作用于线程的工作内存的变量，表示把执行引擎返回的结果赋值给工作内存中的变量，每当虚拟机遇到一个给变量赋值的字节码指令时就会执行该操作</p>
<p><strong>store(存储)</strong>:作用于线程的工作内存中的变量，把工作内存中的一个变量的值传递给主内存，以便随后的write操作使用</p>
<p><strong>write(写入)</strong>:作用于主内存的变量，把store操作从工作内存中得到的变量的值放入主内存的变量中</p>
<p>对于这8中操作，虚拟机也规定了一系列规则，在执行这8中操作的时候必须遵循如下的规则：</p>
<p><strong>不允许read和load、store和write操作之一单独出现</strong>，也就是不允许从主内存读取了变量的值但是工作内存不接收的情况，或者不允许从工作内存将变量的值回写到主内存但是主内存不接收的情况</p>
<p><strong>不允许一个线程丢弃最近的assign操作</strong>，也就是不允许线程在自己的工作线程中修改了变量的值却不同步/回写到主内存</p>
<p><strong>不允许一个线程回写没有修改的变量到主内存</strong>，也就是如果线程工作内存中变量没有发生过任何assign操作，是不允许将该变量的值回写到主内存</p>
<p><strong>变量只能在主内存中产生</strong>，不允许在工作内存中直接使用一个未被初始化的变量，也就是没有执行load或者assign操作。也就是说在执行use、store之前必须对相同的变量执行了load、assign操作</p>
<p><strong>一个变量在同一时刻只能被一个线程对其进行lock操作</strong>，也就是说一个线程一旦对一个变量加锁后，在该线程没有释放掉锁之前，其他线程是不能对其加锁的，但是同一个线程对一个变量加锁后，可以继续加锁，同时在释放锁的时候释放锁次数必须和加锁次数相同。</p>
<p><strong>对变量执行lock操作，就会清空工作空间该变量的值</strong>，执行引擎使用这个变量之前，需要重新load或者assign操作初始化变量的值</p>
<p><strong>不允许对没有lock的变量执行unlock操作</strong>，如果一个变量没有被lock操作，那也不能对其执行unlock操作，当然一个线程也不能对被其他线程lock的变量执行unlock操作</p>
<p><strong>对一个变量执行unlock之前，必须先把变量同步回主内存中</strong>，也就是执行store和write操作</p>
<p>问题：程序不知道主内存的值已经被修改过了。</p>
<h2 id="17、Volatile"><a href="#17、Volatile" class="headerlink" title="17、Volatile"></a>17、Volatile</h2><blockquote>
<p>1、可见性</p>
</blockquote>
<p><strong>线程知道主存的变量被其他线程修改。</strong></p>
<blockquote>
<p>2、不保证原子性</p>
</blockquote>
<p>原子性：一个任务，要么执行完，要么没执行。</p>
<p>多线程累加一个整数时，用Volatile修饰有问题，可以使用，JUC包下的Automaitc包装类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVolatile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//主线程休眠等待，保证先加完再输出</span></span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>num++实际不是一个原子操作，需要三个指令！！！</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210202213140886.png" alt="image-20210202213140886"></p>
<p>实际原子类中的方法都调用了Unsafe类中的方法，Unsafe类中是一些本地方法JNI，直接和操作系统挂钩。</p>
<blockquote>
<p>什么是指令重排</p>
</blockquote>
<p>程序高效执行，写的代码编译之后的指令会经过代码优化阶段，指令重排等。</p>
<p>编译原理中编译器后端代码生成，代码优化中有~</p>
<p>由于内存屏障，所以保证避免指令重拍现象。</p>
<h2 id="18、单例模式"><a href="#18、单例模式" class="headerlink" title="18、单例模式"></a>18、单例模式</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<p><strong>注意：</strong></p>
<ul>
<li>1、单例类只能有一个实例。</li>
<li>2、单例类必须自己创建自己的唯一实例。</li>
<li>3、单例类必须给所有其他对象提供这一实例。</li>
</ul>
<blockquote>
<p>介绍</p>
</blockquote>
<p><strong>意图：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p>
<p><strong>何时使用：</strong>当您想控制实例数目，节省系统资源的时候。</p>
<p><strong>如何解决：</strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p>
<p><strong>关键代码：</strong>构造函数是私有的。</p>
<blockquote>
<p>饿汉式</p>
</blockquote>
<p>上来直接新建对象！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Single;</span><br><span class="line"><span class="comment">//饿汉式单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可能造成空间浪费</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Hungry</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载类时就new出对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Hungry HUNGRY = <span class="keyword">new</span> Hungry();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>静态内部类实现单例模式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Single;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Holder</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">innerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Holder INSTANCE = <span class="keyword">new</span> Holder();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Holder <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> innerClass.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类的优点是：外部类加载时并不需要立即加载内部类，</span></span><br><span class="line"><span class="comment"> * 内部类不被加载则不去初始化INSTANCE，故而不占内存。</span></span><br><span class="line"><span class="comment"> * 即当Holder第一次被加载时，并不需要去加载innerClass，</span></span><br><span class="line"><span class="comment"> * 只有当getInstance()方法第一次被调用时，才会去初始化INSTANCE,</span></span><br><span class="line"><span class="comment"> * 第一次调用getInstance()方法会导致虚拟机加载innerClass类，</span></span><br><span class="line"><span class="comment"> * 这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>懒汉式</p>
</blockquote>
<p>对象用的时候再加载。</p>
<p><strong>(1)有问题的版本</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Single;</span><br><span class="line"><span class="comment">//懒汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lazyman = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"OK"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//用到时才创建对象</span></span><br><span class="line">        <span class="keyword">if</span>(lazyman==<span class="keyword">null</span>)&#123;</span><br><span class="line">            lazyman = <span class="keyword">new</span> LazyMan();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyman;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//问题：多线程下会破坏单例模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                LazyMan.getInstance();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>(2)DCL懒汉式，仍然存在问题</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Single;</span><br><span class="line"><span class="comment">//懒汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lazyman = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"OK"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//双重检测锁模式，Double-check-lock,DCL懒汉式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//用到时才创建对象</span></span><br><span class="line">        <span class="keyword">if</span>(lazyman==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyman==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    lazyman = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyman;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                LazyMan.getInstance();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>lazyman = new LazyMan();</code>不是原子操作，分以下几个步骤</p>
<ul>
<li>分配内存空间</li>
<li>执行构造方法初始化对象</li>
<li>对象指向这个空间</li>
</ul>
<p>解决方案：<code>private static LazyMan lazyman = null;</code>加<code>volatile</code>修饰</p>
<p><strong>(3)反射可以破坏单例模式</strong></p>
<p>反射获得私有构造器，设置可到达，然后<code>newinstance</code>可以通过构造器新建一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Single;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lazyman = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"OK"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//双重检测锁模式，Double-check-lock,DCL懒汉式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//用到时才创建对象</span></span><br><span class="line">        <span class="keyword">if</span>(lazyman==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyman==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    lazyman = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyman;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LazyMan instance = LazyMan.getInstance();</span><br><span class="line">        <span class="comment">//获得单例类的构造器</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; constructor = LazyMan<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        LazyMan instance2 = constructor.newInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案：在构造器中加一个判断，如果已经被实例，抛出异常。</strong></p>
<p><strong>(4)加判断避免反射</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Single;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lazyman = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LazyMan<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(lazyman!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不要试图用反射新建对象！！！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//双重检测锁模式，Double-check-lock,DCL懒汉式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//用到时才创建对象</span></span><br><span class="line">        <span class="keyword">if</span>(lazyman==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyman==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    lazyman = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyman;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LazyMan instance = LazyMan.getInstance();</span><br><span class="line">        <span class="comment">//获得单例类的构造器</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; constructor = LazyMan<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        LazyMan instance2 = constructor.newInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203121248535.png" alt="image-20210203121248535"></p>
<p><strong>仍然存在问题：</strong></p>
<p>不使用<code>getInstance</code>方法对象就不会被创建，使用反射获得构造器就可以获得两次实例破坏单例模式！</p>
<p><strong>解决方案：</strong></p>
<p>增加一个标志位，可以当做一个密码位，调用构造器时修改密码位即可。实现代码如下。</p>
<p><strong>(5)密码位判断</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Single;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> password = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lazyman = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LazyMan<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(password)&#123;</span><br><span class="line">                password = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不要试图用反射新建对象！！！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//双重检测锁模式，Double-check-lock,DCL懒汉式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//用到时才创建对象</span></span><br><span class="line">        <span class="keyword">if</span>(lazyman==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyman==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    lazyman = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyman;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//LazyMan instance = LazyMan.getInstance();</span></span><br><span class="line">        <span class="comment">//获得单例类的构造器</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; constructor = LazyMan<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        LazyMan instance1 = constructor.newInstance();</span><br><span class="line">        LazyMan instance2 = constructor.newInstance();</span><br><span class="line">        System.out.println(instance1);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>问题：</strong>即使标志位经过加密处理，也可能被解密。通过反编译。</p>
<p><strong>解决方案：</strong></p>
<p>查看<code>newInstance</code>的源码如下：</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203122910178.png" alt="image-20210203122910178"></p>
<p>发现如果是枚举类型就不能破坏单例模式。</p>
<blockquote>
<p>枚举实现单例模式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Single;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingleEnum &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingleEnum <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(SingleEnum.INSTANCE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是发现编译完的class文件中有一个私有构造方法：</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203124419607.png" alt="image-20210203124419607"></p>
<p><strong>尝试用反射获取破坏一下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Single;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingleEnum &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingleEnum <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Constructor&lt;SingleEnum&gt; constructor = SingleEnum<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        SingleEnum instance = constructor.newInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果：</strong></p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203124627741.png" alt="image-20210203124627741"></p>
<p>按道理应该抛出的是<code>newInstance</code>方法中的<code>Cannot reflectively create enum objects</code>异常的，然而却抛出一个找不到构造方法的异常。</p>
<p><strong>使用javap反编译一下：</strong></p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203125041305.png" alt="image-20210203125041305"></p>
<p>发现也存在一个空参构造器。使用更专业的反编译工具！</p>
<p>JAD下载地址：<a href="https://varaneckas.com/jad/" target="_blank" rel="noopener">https://varaneckas.com/jad/</a></p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203131729962.png" alt="image-20210203131729962"></p>
<p>查看源码如下：</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203131758731.png" alt="image-20210203131758731"></p>
<p>存在一个有参构造，因此我们可以获得该构造器。</p>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Single;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingleEnum &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingleEnum <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Constructor&lt;SingleEnum&gt; constructor = SingleEnum<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">String</span>.<span class="title">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        SingleEnum instance = constructor.newInstance();</span><br><span class="line">        SingleEnum instance1 = constructor.newInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：达到预期</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203131956843.png" alt="image-20210203131956843"></p>
<h2 id="19、深入理解CAS"><a href="#19、深入理解CAS" class="headerlink" title="19、深入理解CAS"></a>19、深入理解CAS</h2><blockquote>
<p>什么是CAS</p>
</blockquote>
<p>Compare And Swap比较并交换，如果值等于期望值，就更新它。</p>
<p>CAS是CPU的并发原语！！！</p>
<blockquote>
<p>Unsafe类</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203140513939.png" alt="image-20210203140513939"></p>
<p>发现全部是native方法，Java不可直接操作内存，C++可以，因此Java调用C++可以操作内存。</p>
<p>以<code>AtomicInteger</code>为例：</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203140734620.png" alt="image-20210203140734620"></p>
<p>其中的<code>getAndIncrement</code>方法调用Unsafe类的<code>getAndAddInt</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getAndAddInt</code>方法：自旋锁。</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203140835738.png" alt="image-20210203140835738"></p>
<p><strong>缺点：</strong></p>
<p>1、循环耗时</p>
<p>2、一次性只能保证一个共享变量的原子性</p>
<p>3、ABA问题</p>
<blockquote>
<p>CAS（ABA问题）</p>
</blockquote>
<p>也就是一个线程调用CAS想改，但是另一个线程可能在此之前先改为一个其他的值又给他改回来了。</p>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203142936500.png" alt="image-20210203142936500"></p>
<p><strong>乐观锁&amp;悲观锁：</strong></p>
<ul>
<li><p>悲观锁：但凡修改数据就加锁，，具有强烈的独占和排他特性。主要分以下两类</p>
<ul>
<li>共享锁【shared locks】又称为读锁，简称S锁。共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。、</li>
<li>排他锁【exclusive locks】又称为写锁，简称X锁。顾名思义，排他锁就是不能与其他锁并存，如果一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据行读取和修改。</li>
</ul>
</li>
<li><p>乐观锁：乐观锁假设数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做。</p>
</li>
</ul>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203144850438.png" alt="image-20210203144850438"></p>
<h2 id="20、原子引用-解决ABA问题"><a href="#20、原子引用-解决ABA问题" class="headerlink" title="20、原子引用(解决ABA问题)"></a>20、原子引用(解决ABA问题)</h2><p><strong>对应的思想：乐观锁</strong></p>
<blockquote>
<p>代码测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.CAS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicStampedReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicStampedReference atomicReference= <span class="keyword">new</span> AtomicStampedReference&lt;Integer&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//A线程修改两次</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"A==&gt;"</span>+atomicReference.getStamp());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            atomicReference.compareAndSet(<span class="number">1</span>,<span class="number">2</span>,atomicReference.getStamp(),atomicReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">"A==&gt;"</span>+atomicReference.getStamp());</span><br><span class="line">            atomicReference.compareAndSet(<span class="number">2</span>,<span class="number">1</span>,atomicReference.getStamp(),atomicReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">"A==&gt;"</span>+atomicReference.getStamp());</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//确保B线程和A线程获得最初的版本号</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">int</span> version = atomicReference.getStamp();</span><br><span class="line">            System.out.println(<span class="string">"B==&gt;"</span>+version);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(atomicReference.compareAndSet(<span class="number">1</span>, <span class="number">3</span>, version, version + <span class="number">1</span>));</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>大坑：</strong></p>
<p>查看comepareAndSet源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V   expectedReference,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 V   newReference,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> expectedStamp,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> newStamp)</span> </span>&#123;</span><br><span class="line">        Pair&lt;V&gt; current = pair;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            expectedReference == current.reference &amp;&amp;</span><br><span class="line">            expectedStamp == current.stamp &amp;&amp;</span><br><span class="line">            ((newReference == current.reference &amp;&amp;</span><br><span class="line">              newStamp == current.stamp) ||</span><br><span class="line">             casPair(current, Pair.of(newReference, newStamp)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>传入Integer对象直接用==判断是否相等时有问题！</p>
</blockquote>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.CAS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer x = <span class="number">128</span>;</span><br><span class="line">        Integer y = <span class="number">128</span>;</span><br><span class="line">        System.out.println(x==y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为false，原因分析：== 比较的是堆中的地址。</p>
<p>查看<code>Integer</code>中的源码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">           <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>默认IntegerCache.low 是-127，Integer.high是128，如果在这个区间内，他就会把变量i当做一个变量，放到内存中；但如果不在这个范围内，就会去new一个Integer对象。</p>
<p><strong>比较Integer的值这儿说两种方法：</strong></p>
<ul>
<li><p>一个是用equals()比较</p>
</li>
<li><p>一个是用Integer.intValue()转成int</p>
</li>
</ul>
<h2 id="21、各种锁的理解"><a href="#21、各种锁的理解" class="headerlink" title="21、各种锁的理解"></a>21、各种锁的理解</h2><h3 id="1、公平锁、非公平锁"><a href="#1、公平锁、非公平锁" class="headerlink" title="1、公平锁、非公平锁"></a>1、公平锁、非公平锁</h3><p>公平锁：非常公平，不能插队，先来后到</p>
<p>非公平锁：可以插队（默认非公平）</p>
<h3 id="2、可重入锁"><a href="#2、可重入锁" class="headerlink" title="2、可重入锁"></a>2、可重入锁</h3><p>可重入锁（递归锁）：拿到了外面的锁之后就可以拿到里面的锁（自动获得！）</p>
<p>可重入就是说某个线程已经获得某个锁，可以再次获取锁而不会出现死锁。</p>
<blockquote>
<p>Synchronized</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sms();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sms</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发短息"</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        call();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ReentrantLock</p>
</blockquote>
<p>使用ReentrantLock调用lock和unlock次数必须相等，否则会死锁。</p>
<h3 id="3、自旋锁"><a href="#3、自旋锁" class="headerlink" title="3、自旋锁"></a>3、自旋锁</h3><p>自旋等待的锁，调用lock和unlock方法是阻塞的！</p>
<h3 id="4、死锁排查"><a href="#4、死锁排查" class="headerlink" title="4、死锁排查"></a>4、死锁排查</h3><blockquote>
<p>工具</p>
</blockquote>
<p>1、使用jps定位进程号<code>jps -l</code></p>
<p>2、使用<code>jstack 进程号</code>查看堆栈信息</p>
<p>排查问题：</p>
<p>1、日志</p>
<p>2、堆栈信息</p>
<blockquote>
<p>测试死锁代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String LockA = <span class="string">"lockA"</span>;</span><br><span class="line">        String LockB = <span class="string">"lockB"</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(LockA,LockB)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(LockB,LockA)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String LockA;</span><br><span class="line">    <span class="keyword">private</span> String LockB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String lockA, String lockB)</span> </span>&#123;</span><br><span class="line">        LockA = lockA;</span><br><span class="line">        LockB = lockB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LockA)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" get "</span>+LockA);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (LockB)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" get "</span>+LockB);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>堆栈信息排错：</p>
</blockquote>
<p><img src="/2021/01/31/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210203163557689.png" alt="image-20210203163557689"></p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM学习笔记</title>
    <url>/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="JVM的位置"><a href="#JVM的位置" class="headerlink" title="JVM的位置"></a>JVM的位置</h2><p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/896914-20191214212820607-179669159.png" alt="img"></p>
<p><code>Java</code>之所以能跨平台，是由于在程序和操作系统之间还有一层Java虚拟机存在，就是所谓的<code>JVM</code>，区别于<code>C/C++</code>，由于操作系统基本也是<code>C/C++</code>编写的，操作系统本身也是一个应用程序，所以<code>C/C++</code>编写的程序当然更亲和硬件，当然<code>C/C++</code>语言粒度较细，而<code>Java</code>有自己成熟的虚拟机系统，所以能火起来！</p>
<p>一个<code>C/C++</code>程序编译成<code>exe</code>文件之后，虽然可以直接复制到其他电脑无需安装其他环境，双击运行即可，但是跨平台时，首先需要考虑操作系统提供的<code>API</code>是否一致，比如线程相关<code>API</code>，其次还要考虑硬件体系，也就是CPU的指令集，是<code>ARM</code>还是<code>X86</code>等等。</p>
<p>但一个JAVA程序，首先需要设备上安装了<code>JRE</code>（运行时环境），然后就可以跑起来了！</p>
<h2 id="JVM体系结构"><a href="#JVM体系结构" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h2><p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" alt="img"></p>
<h2 id="类加载器-amp-双亲委派机制"><a href="#类加载器-amp-双亲委派机制" class="headerlink" title="类加载器&amp;双亲委派机制"></a>类加载器&amp;双亲委派机制</h2><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130110821276.png" alt="image-20210130110821276"></p>
<ul>
<li>引导类加载器：<code>C++</code>编写，是<code>JVM</code>自带的类加载器，负责<strong>Java平台核心库（JRE-lib-rt.jar）</strong>,用来装载核心类库。该加载器无法直接获取。</li>
<li>扩展类加载器：负责<code>jre/lib/ext</code>目录下的jar包或<code>- D java.ext.dirs</code>指定目录下的jar包装入工作库。</li>
<li>系统类加载器：负责<code>java -classpath</code>或<code>-D java.class.path</code>所指定目录下的类与jar包装入工作，是最常用的加载器。</li>
</ul>
<h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>所谓双亲，其实就是指引导类加载器和扩展类加载器是系统类加载器的父类加载器。为了防止恶意代干扰运行时环境，比如java.lang包下的String类，如果你自己写一个同包同名的类，自己写的是没用的。</p>
<p><strong>当加载系统收到一个类加载请求时：</strong></p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130110731285.png" alt="image-20210130110731285"></p>
<p><strong>测试写一个同包同名类时：</strong></p>
<p><strong>首先必须知道的一点：J</strong>AVA虚拟机启动时先加载包含main方法的类，因此我先写一个String类，并给一个静态代码块（如果这个类被加载，静态代码块中的输出语句就会输出东西）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"黑入成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130111721441.png" alt="image-20210130111721441"></p>
<p>为什么报错找不到主函数？？？</p>
<p>我自己的理解：首先主函数在<code>String</code>类中所以先加载这个类，然后在<code>rt-jar</code>包中也有这个类，实际往上委派加载器加载时，<code>BootstrapClassLoader</code>在<code>rt-jar</code>包中成功加载，但是其中确实没有主函数，因此报错！</p>
<h2 id="Native，方法区"><a href="#Native，方法区" class="headerlink" title="Native，方法区"></a>Native，方法区</h2><p><code>native</code>关键字：凡是带了<code>native</code>关键字的方法，说明<code>java</code>作用范围达不到了，他会调用底层C语言库。会进入本地方法栈，调用本地方法接口（<code>JNI</code>）</p>
<p><code>JNI</code>作用：扩展<code>Java</code>使用，融合不同编程语言为<code>Java</code>使用！最初：<code>C/C++</code></p>
<p>它在内存区域中专门开辟了一个本地方法栈（<code>Native Method Stack</code>）,登记<code>native</code>方法</p>
<p>在最终执行时，通过<code>JNI</code>加载本地方法库的方法。</p>
<h2 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h2><p>程序计数器：Program Counter Register</p>
<p>每个线程私有一个程序计数器，实际就是一个指针，指向方法区中的方法字节码。</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>Method Area方法区</p>
<p>被所有线程共享，静态变量，常量，类信息（构造方法，接口定于）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法去无关。</p>
<p>存：static，final，Class，常量池</p>
<h2 id="栈式计算机"><a href="#栈式计算机" class="headerlink" title="栈式计算机"></a>栈式计算机</h2><p>JVM本质是栈式计算机</p>
<p>操作数压栈，运算指令从栈顶取数据运算。</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130153145040.png" alt="image-20210130153145040"></p>
<h2 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h2><ul>
<li>Sun公司 <code>Java HotSpot(TM) Client VM (build 25.271-b09, mixed mode, sharing)</code></li>
<li>BEA <code>JRockit</code></li>
<li>IBM <code>J9VM</code></li>
</ul>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>Heap，一个JVM只有一个堆内存，堆内存大小是可以调节的。</p>
<p>类加载器读取类文件后，一般会把类，方法，常量，变量放在堆中，以及保存我们所引用类型的真实对象。</p>
<p>堆内存分三个区域：</p>
<ul>
<li>新生区（伊甸园区-Eden Space）</li>
<li>养老区</li>
<li>永久区</li>
</ul>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130133228954.png" alt="image-20210130133228954"></p>
<p>GC垃圾回收主要在伊甸园区和养老区。</p>
<p>假设内存满了，OOM错误，堆内存不够！<code>java.lang.OutOfMemoryError:java heap space</code></p>
<p>在JDK1.8之后，永久存储区改名（元空间）。</p>
<h3 id="新生区"><a href="#新生区" class="headerlink" title="新生区"></a>新生区</h3><ul>
<li>类：诞生和应用甚至死亡。</li>
<li>伊甸园区：所有对象都是在伊甸园区new出来的</li>
<li>幸存者区（0，1）</li>
</ul>
<p>伊甸园区满了触发轻GC</p>
<p>养老区新生区都满触发Full GC</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130154505879.png" alt="image-20210130154505879"></p>
<p><strong>HotSpot虚拟机默认Eden和Survivor的大小比例是8:1</strong></p>
<h3 id="永久区"><a href="#永久区" class="headerlink" title="永久区"></a>永久区</h3><p>这个区域常驻内存，用来存放JDK自身携带的Class对象，interface元数据，存储的是java运行时一些环境或类信息，这个区域不存在垃圾回收！关闭虚拟机就会释放这个区域的内存。</p>
<p>一个启动类，加载了大量第三方jar包，Tomcat部署太多应用，大量动态生成反射类，可能会导致OOM。</p>
<ul>
<li>JDK1.6之前：永久代，常量池在方法区中</li>
<li>JDK1.7：提出去永久代，常量池在堆中</li>
<li>JDK1.8之后：无永久代，常量池在元空间</li>
</ul>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130142126569.png" alt="image-20210130142126569"></p>
<p>使用JVM参数：</p>
<p><code>-Xms1024m -Xmx1024m -XX:+PrintGCDetails</code></p>
<p>输出GC的一些详细运行信息</p>
<p>运行一个测试数据，运行结果：</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130142230049.png" alt="image-20210130142230049"></p>
<p><strong>元空间逻辑上存在，物理上不存在！</strong>证明如下：</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130142601948.png" alt="image-20210130142601948"></p>
<h3 id="测试OOM"><a href="#测试OOM" class="headerlink" title="测试OOM"></a>测试OOM</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"test out of memory"</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            str += str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130143300781.png" alt="image-20210130143300781"></p>
<h2 id="使用内存分析工具分析OOM"><a href="#使用内存分析工具分析OOM" class="headerlink" title="使用内存分析工具分析OOM"></a>使用内存分析工具分析OOM</h2><p><code>Eclipse</code>中有一个<code>MTA(Memory Analyzer)</code></p>
<p>在此使用<code>Jprofiler</code></p>
<ul>
<li><p>首先在<code>IDEA-File-settings-plugins</code>中搜索<code>Jprofiler</code>插件安装</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130145857762.png" alt="image-20210130145857762"></p>
</li>
<li><p>在<a href="https://www.ej-technologies.com" target="_blank" rel="noopener">https://www.ej-technologies.com</a></p>
<p>官网下载<code>Jprofiler</code>客户端并安装</p>
</li>
<li><p>在IDEA中点击Jprofiler图标并关联到客户端安装目录下的Jprofiler.exe程序。</p>
</li>
</ul>
<p><code>-Xms</code>：设置初始化内存分配大小，默认1/64</p>
<p><code>-Xmx</code>：设置最大分配内存，默认1/4</p>
<p><code>-XX:+PrintGCDetails</code>：打印GC信息</p>
<p><code>-XX:HeapDumpOnOutOfMemoryError</code>：对应错误生成Dump文件</p>
<p><strong>编写会导致OOM错误的程序：</strong></p>
<p>使用<code>JVM</code>参数修改一个较小的运行内存，并且生成dump文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] array = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Demo02&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Demo02&gt;();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            arrayList.add(<span class="keyword">new</span> Demo02());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调参生成dump文件，内存快照</strong></p>
<p><code>-Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemory</code></p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130183801909.png" alt="image-20210130183801909"></p>
<p>打开生成的hprof后缀的文件可定位错误代码位置</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130183917444.png" alt="image-20210130183917444"></p>
<p>还可以查看占用较大内存的对象，以及对象的一些操作：</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130184156775.png" alt="image-20210130184156775"></p>
<h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210130152143238.png" alt="image-20210130152143238"></p>
<p>JVM在进行垃圾回收时，大部分时间回收新生代。 </p>
<ul>
<li>新生代<ul>
<li>Eden</li>
<li>From Survivor</li>
<li>To Survivor</li>
</ul>
</li>
<li>老年区</li>
</ul>
<p><strong>GC分类</strong></p>
<ul>
<li>轻GC（普通GC）针对Eden以及少部分Survivor</li>
<li>重GC（全局GC）</li>
</ul>
<h3 id="GC算法评价指标"><a href="#GC算法评价指标" class="headerlink" title="GC算法评价指标"></a>GC算法评价指标</h3><p>Java万物皆对象，实际回收的垃圾就是所谓的对象，对象都是new出来的，在C/C++中使用new是分配内存用的，但是new完必须delete，否则会造成内存泄漏。</p>
<p><strong>1、吞吐量</strong>：即单位时间内的处理能力。</p>
<p><strong>2、最大暂停时间</strong>：因执行GC而暂停执行程序所需的时间。</p>
<p><strong>3、堆的使用效率</strong>：鱼与熊掌不可兼得，堆使用效率和吞吐量、最大暂停时间是不可能同时满足的。即可用的堆越大，GC运行越快；相反，想要利用有限的堆，GC花费的时间就越长。</p>
<p><strong>4、访问的局部性</strong>：在存储器的层级构造中，我们知道越是高速存取的存储器容量会越小（具体可以参看我写的存储器那篇文章）。由于程序的局部性原理，将经常用到的数据放在堆中较近的位置，可以提高程序的运行效率。</p>
<h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p><strong>引用计数算法(reference-counting) :</strong>每个对象有一个引用计数器，当对象被引用一次则计数器加1，当对象引用失效一次则计数器减1，对于计数器为0的对象意味着是垃圾对象，可以被GC回收。</p>
<p>引用计数算法的问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GcTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestObj Obj1 = <span class="keyword">new</span> TestObj();   <span class="comment">//新生成一个对象，Obj1引用计数器=1</span></span><br><span class="line">        TestObj Obj2 = <span class="keyword">new</span> TestObj();   <span class="comment">//新生成一个对象，Obj2引用计数器=1</span></span><br><span class="line"></span><br><span class="line">        Obj1.reference = Obj2;      <span class="comment">//Obj2被引用，Obj2引用计数器+1 --&gt; 2</span></span><br><span class="line">        Obj2.reference = Obj1;      <span class="comment">//Obj1被引用，Obj1引用计数器+1 --&gt; 2</span></span><br><span class="line"></span><br><span class="line">        Obj1 = <span class="keyword">null</span>;    <span class="comment">//Obj1引用-1 --&gt;1</span></span><br><span class="line">        Obj2 = <span class="keyword">null</span>;    <span class="comment">//Obj1引用-1 --&gt;1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObj</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> TestObj reference = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际此时两个对象都有引用，即相互引用，但是外部已经不被引用，而由于计数器不为0，不会被GC回收，此时就有内存泄漏！</p>
<h3 id="根搜索算法"><a href="#根搜索算法" class="headerlink" title="根搜索算法"></a>根搜索算法</h3><p><strong>可达性算法(GC Roots Tracing):</strong>从GC Roots作为起点开始搜索，那么整个连通图中的对象便都是活对象，对于GC Roots无法到达的对象便成了垃圾回收的对象，随时可被GC回收。</p>
<p><del>刚学完编译原理，代码优化阶段中有一个到达定义分析，有着差不多思想！</del></p>
<p><strong>根（GC Roots）：</strong></p>
<p>说到GC roots（GC根），在JAVA语言中，可以当做GC roots的对象有以下几种：</p>
<p><strong>1、栈（栈帧中的本地变量表）中引用的对象。</strong></p>
<p><strong>2、方法区中的静态成员。</strong></p>
<p><strong>3、方法区中的常量引用的对象（全局变量）</strong></p>
<p><strong>4、本地方法栈中JNI（一般说的Native方法）引用的对象。</strong></p>
<p>在根搜索算法的基础上，现代虚拟机的实现当中，<strong>垃圾搜集的算法</strong>主要有三种，分别是<strong>标记-清除算法、复制算法、标记-整理</strong>算法。这三种算法都扩充了根搜索算法。</p>
<h3 id="标记-清除算法："><a href="#标记-清除算法：" class="headerlink" title="标记-清除算法："></a><strong>标记-清除算法：</strong></h3><p><strong>1、标记清除算法的概念：</strong></p>
<p>标记-清除算法是现代垃圾回收算法的思想基础。标记-清除算法将垃圾回收分为两个阶段：标记阶段和清除阶段。一种可行的实现是，在标记阶段，<strong>首先通过根节点，标记所有从根节点开始的可达对象</strong>。因此，未被标记的对象就是未被引用的垃圾对象；然后，在清除阶段，清除所有未被标记的对象。</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/201002487061086.png" alt="img"></p>
<p><strong>2、标记-清除算法详解：</strong></p>
<p>它的做法是当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被成为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除。</p>
<ul>
<li>标记：标记的过程其实就是，遍历所有的GC Roots，然后将所有GC Roots可达的对象标记为存活的对象。</li>
<li>清除：清除的过程将遍历堆中所有的对象，将没有标记的对象全部清除掉。</li>
</ul>
<p>也就是说，<strong>就是当程序运行期间，若可以使用的内存被耗尽的时候，GC线程就会被触发并将程序暂停，随后将依旧存活的对象标记一遍，最终再将堆中所有没被标记的对象全部清除掉，接下来便让程序恢复运行</strong>。</p>
<p><strong>3、标记-清除算法的缺点：</strong></p>
<p>（1）首先，<strong>它的缺点就是效率比较低（递归与全堆对象遍历）</strong>，导致stop the world的时间比较长，尤其对于交互式的应用程序来说简直是无法接受。试想一下，如果你玩一个网站，这个网站一个小时就挂五分钟，你还玩吗？</p>
<p>（2）第二点主要的缺点，则是<strong>这种方式清理出来的空闲内存是不连续的</strong>，这点不难理解，我们的死亡对象都是随即的出现在内存的各个角落的，现在把它们清除之后，内存的布局自然会乱七八糟。而为了应付这一点，JVM就不得不维持一个内存的空闲列表，这又是一种开销。而且在分配数组对象的时候，寻找连续的内存空间会不太好找。</p>
<h3 id="复制算法：（新生代的GC）"><a href="#复制算法：（新生代的GC）" class="headerlink" title="复制算法：（新生代的GC）"></a>复制算法：（新生代的GC）</h3><p><strong>复制算法的概念：</strong></p>
<p>将原有的内存空间分为两块，每次只使用其中一块，在垃圾回收时，将正在使用的内存中的存活对象复制到未使用的内存块中，之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。</p>
<ul>
<li>与标记-清除算法相比，复制算法是一种相对高效的回收方法</li>
<li>不适用于存活对象较多的场合，如老年代（复制算法<strong>适合做新生代的GC</strong>）</li>
</ul>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/201002560357091.png" alt="ff1e1846-e49c-4663-aee1-7c63628f567c"></p>
<ul>
<li><strong>复制算法的最大的问题是：空间的浪费</strong></li>
</ul>
<p>复制算法使得每次都只对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。</p>
<p>现在的商业虚拟机都采用这种收集算法来回收新生代，新生代中的对象98%都是“朝生夕死”的，所以并不需要按照1:1的比例来划分内存空间，而是<strong>将内存分为一块比较大的Eden空间和两块较小的Survivor空间</strong>，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是说，每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的空间会被浪费。</p>
<p><strong>因此幸存区分From和To两个区域，谁空的谁就是To区域。</strong></p>
<p>98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活<strong>，当Survivor空间不够用时，需要依赖于老年代进行分配担保，所以大对象直接进入老年代</strong>。整个过程如下图所示：</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/201002573639064.png" alt="7e1f6ed2-e0c4-45e4-b7db-b59c28e1ee9c"></p>
<p>当复制超过15次时（默认值），对象进入老年代。</p>
<p>对象晋升老年代的年龄阈值，可以通过参数<code>-XX:MaxTenuringThreshold</code>来设置。</p>
<h3 id="标记-整理算法：（老年代的GC）"><a href="#标记-整理算法：（老年代的GC）" class="headerlink" title="标记-整理算法：（老年代的GC）"></a>标记-整理算法：（老年代的GC）</h3><p><strong>概念：</strong></p>
<p>标记-压缩算法适合用于存活对象较多的场合，如老年代。它在标记-清除算法的基础上做了一些优化。和标记-清除算法一样，标记-压缩算法也首先需要从根节点开始，对所有可达对象做一次标记；但之后，它并不简单的清理未标记的对象，而是<strong>将所有的存活对象压缩到内存的一端；</strong>之后，清理边界外所有的空间。</p>
<p><img src="/2021/01/30/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/201003005357866.png" alt="cc79889a-0856-4018-92c3-c51108c9caea"></p>
<ul>
<li>*<em>标记：它的第一个阶段与标记/清除算法是一模一样的，均是遍历GC Roots，然后将存活的对象标记。<br>*</em></li>
<li><strong>整理：移动所有存活的对象，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。因此，第二阶段才称为整理阶段。</strong></li>
</ul>
<h3 id="GC算法总结"><a href="#GC算法总结" class="headerlink" title="GC算法总结"></a>GC算法总结</h3><p>在GC线程开启时，或者说GC过程开始时，它们都要暂停应用程序（stop the world）。</p>
<p>（1）<strong>效率：</strong>复制算法&gt;标记/整理算法&gt;标记/清除算法（此处的效率只是简单的对比时间复杂度，实际情况不一定如此）。</p>
<p>（2）<strong>内存整齐度</strong>：复制算法=标记/整理算法&gt;标记/清除算法。</p>
<p>（3）<strong>内存利用率：</strong>标记/整理算法=标记/清除算法&gt;复制算法。</p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>注解和反射</title>
    <url>/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="Java-Annotation"><a href="#Java-Annotation" class="headerlink" title="Java.Annotation"></a>Java.Annotation</h2><h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h3><ul>
<li><p>Annotation是JDK5.0开始引入的新技术</p>
</li>
<li><p>Annotation的作用</p>
<ul>
<li><p>不是程序本身，可以对程序做出解释（这一点和注释（comment）没什么区别）</p>
</li>
<li><p>可以被其他程序读取，如编译器</p>
</li>
</ul>
</li>
<li><p>Annotation的格式</p>
<ul>
<li>以“@注释名”在代码中存在，还可以添加以下参数值，例如：@SuppressWarnings(value=”all”)</li>
</ul>
</li>
<li><p>注解可以附加在package，class，method等上面，可以通过反射机制编程实现对这些元数据的访问。</p>
</li>
</ul>
<h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><ul>
<li><p>@Override</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只修饰方法，表示重写方法。</p>
</li>
<li><p>@Deprecated</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表示被遗弃的方法</p>
</li>
<li><p>@SuppressWarnings</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The set of warnings that are to be suppressed by the compiler in the</span></span><br><span class="line"><span class="comment">     * annotated element.  Duplicate names are permitted.  The second and</span></span><br><span class="line"><span class="comment">     * successive occurrences of a name are ignored.  The presence of</span></span><br><span class="line"><span class="comment">     * unrecognized warning names is &lt;i&gt;not&lt;/i&gt; an error: Compilers must</span></span><br><span class="line"><span class="comment">     * ignore any warning names they do not recognize.  They are, however,</span></span><br><span class="line"><span class="comment">     * free to emit a warning if an annotation contains an unrecognized</span></span><br><span class="line"><span class="comment">     * warning name.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; The string &#123;<span class="doctag">@code</span> "unchecked"&#125; is used to suppress</span></span><br><span class="line"><span class="comment">     * unchecked warnings. Compiler vendors should document the</span></span><br><span class="line"><span class="comment">     * additional warning names they support in conjunction with this</span></span><br><span class="line"><span class="comment">     * annotation type. They are encouraged to cooperate to ensure</span></span><br><span class="line"><span class="comment">     * that the same names work across multiple compilers.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the set of warnings to be suppressed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用于抑制警告用的。</p>
</li>
</ul>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><ul>
<li><p>元注解的作用就是负责注解其他注解，Java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型的说明</p>
</li>
<li><p>这些类型和他们支持的类在java.lang.annotation中可以找到</p>
</li>
<li><p>@Target：用于描述注解使用范围。</p>
</li>
<li><p>@Retention：表示需要在什么级别保存该注释信息，用于描述生命周期</p>
<ul>
<li>SOURCE&lt;CLASS&lt;RUNTIME</li>
</ul>
</li>
<li><p>@Document：说明该注释将被包含在javadoc中</p>
</li>
<li><p>@Inherited：说明子类可以继承父类中的该注解</p>
</li>
</ul>
<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><ul>
<li>使用<code>@interface</code>自定义注解，自动继承<code>java.lang.annotation.Annotation</code>接口</li>
<li>可以定义一些参数<ul>
<li>参数类型只能是Class，String，Enum</li>
<li>格式：参数类型+参数名+（）</li>
<li>如果只有一个参数，建议命名为value，在使用注解时可以简写</li>
<li>注解参数无默认值使用时必须给定</li>
</ul>
</li>
</ul>
<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="meta">@MyAnnotation</span>(<span class="number">3</span>)<span class="comment">//value = 3简写</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;<span class="comment">//定义value</span></span><br><span class="line">    <span class="function">String <span class="title">name</span> <span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java.Reflection"></a>Java.Reflection</h2><ul>
<li><p>Reflection（反射）是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p>
<p><code>Class c = Class.forName(&quot;java.lang.String&quot;)</code></p>
</li>
<li><p><strong>加载完类之后</strong>，在堆内存的方法区中就产生一个Class类型的对象（一个类只有一个Class对象），这个对象包含完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以形象的称为反射。</p>
</li>
</ul>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>一个Class对象包含了特定的某个结构中的有关信息</p>
<ul>
<li>Class本身也是一个类</li>
<li>Class对象只能由系统建立对象</li>
<li>一个加载的类在JVM中只会有一个Class实例</li>
<li>一个Class对象对应的是一个加载到JVM中的一个class文件</li>
<li>每个类的实例都会接的自己是由那个Class实例生成</li>
</ul>
<h4 id="Class类常用方法"><a href="#Class类常用方法" class="headerlink" title="Class类常用方法"></a>Class类常用方法</h4><p><img src="/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/image-20210129115000891.png" alt="image-20210129115000891"></p>
<h4 id="获取Class类的实例"><a href="#获取Class类的实例" class="headerlink" title="获取Class类的实例"></a>获取Class类的实例</h4><ul>
<li><p>已知具体类，通过类的class属性获取，最可靠，性能最高。</p>
<p><code>Class clazz = User.class</code></p>
</li>
<li><p>已知某个类的实例，调用实例的<code>getClass()</code>方法获取<code>Class</code>对象</p>
<p><code>Class clazz = user.getClass();</code></p>
</li>
<li><p>已知类的全类名，且该类在路径下，可通过Class类的静态方法<code>forName()</code>获取，可能抛出<code>ClassNotFoundException</code></p>
<p><code>Class clazz = Class.forName(&quot;demo.User&quot;);</code></p>
</li>
</ul>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.demo01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//方法一 : 类的class属性</span></span><br><span class="line">        Class c1 = User<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        <span class="comment">//方法二 : 类实例对象的getClass方法</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Class c2 = user.getClass();</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        <span class="comment">//方法三 : Class的静态方法forName</span></span><br><span class="line">        Class c3 = Class.forName(<span class="string">"com.codefriday.demo01.User"</span>);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        <span class="comment">//方法四 : 基本内置类型的包装类都有一个Type属性</span></span><br><span class="line">        Class c4 = Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        <span class="comment">//方法五 : 获得父类 类型</span></span><br><span class="line">        Class c5 = Man<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class c5s = c5.getSuperclass();</span><br><span class="line">        System.out.println(c5s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">User</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/image-20210129121137181.png" alt="image-20210129121137181"></p>
<h4 id="哪些类型有Class对象"><a href="#哪些类型有Class对象" class="headerlink" title="哪些类型有Class对象"></a>哪些类型有Class对象</h4><ul>
<li>class：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类。</li>
<li>interface：接口</li>
<li>[]：数组</li>
<li>enum：枚举</li>
<li>annotation：注解</li>
<li>primitive type：基本数据类型</li>
<li>void</li>
</ul>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c1 = Override<span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//注解</span></span><br><span class="line">        Class c2 = <span class="keyword">void</span><span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//void</span></span><br><span class="line">        Class c3 = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//基本数据类型</span></span><br><span class="line">        Class c4 = ElementType<span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//枚举</span></span><br><span class="line">        Class c5 = String[]<span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//一维数组</span></span><br><span class="line">        Class c6 = <span class="keyword">int</span>[][]<span class="class">.<span class="keyword">class</span></span>; <span class="comment">//二维数组</span></span><br><span class="line">        Class c7 = Class<span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//Class本身</span></span><br><span class="line">        Class c8 = Runnable<span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//接口</span></span><br><span class="line">        Class c9 = Object<span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//类</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/image-20210129122250058.png" alt="image-20210129122250058"></p>
<p>只要元素类型与维度一样，就是同一个Class！！！</p>
<h2 id="Java内存分析"><a href="#Java内存分析" class="headerlink" title="Java内存分析"></a>Java内存分析</h2><p><img src="/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/image-20210129122929236.png" alt="image-20210129122929236"></p>
<h3 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h3><p><img src="/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/image-20210129123021668.png" alt="image-20210129123021668"></p>
<ul>
<li><p>加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的<code>java.lang.Class</code>对象</p>
</li>
<li><p>链接：将Java类的二进制代码合并到JVM的运行状态之中的过程</p>
<ul>
<li>验证：确保加载的类信息符合JVM规范，没有安全方面问题</li>
<li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配</li>
<li>解析：虚拟机常量池内的符号引用（常量名）替换成直接引用（地址）的过程</li>
</ul>
</li>
<li><p>初始化</p>
<ul>
<li>执行类构造器”&lt;”clinit”&gt;”()方法的过程。类构造器”&lt;”clinit”&gt;”()方法是由编译器自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类i构造器是构造类信息的，不是构造该类对象的构造器）</li>
<li>当初始化一个类时，如果怕发现其父类还未初始化，则需要先触发其父类的初始化。</li>
<li>虚拟机保证一个类的”&lt;”clinit”&gt;”()方法在多线程环境中被正确加锁和同步。</li>
</ul>
</li>
</ul>
<h3 id="类初始化"><a href="#类初始化" class="headerlink" title="类初始化"></a>类初始化</h3><p>什么时候发生类的初始化</p>
<ul>
<li><p>类的主动引用（一点会发生类的初始化）</p>
<ul>
<li>虚拟机启动，先初始化main方法所在的类</li>
<li>new一个类的对象</li>
<li>调用类的静态成员（除了final常量）和静态方法</li>
<li>使用<code>java.lang.reflect</code>包的方法对类进行反射调用</li>
<li>当初始化一个类，如果其父没有被初始化，则先初始化它的父类</li>
</ul>
</li>
<li><p>类的被动引用</p>
<ul>
<li><p>当访问一个静态域时，只有真正声明这个域的类才会被初始化，如：当通过<strong>子类引用父类的静态变量</strong>，不会导致子类初始化</p>
</li>
<li><p>通过数组定义类的引用，不会触发此类的初始化</p>
<p><code>Son[] array = new Son();</code></p>
</li>
<li><p>引用常量不会触发类的初始化（<strong>常量在链接阶段</strong>就存入调用类的常量池中了）</p>
</li>
</ul>
</li>
</ul>
<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><ul>
<li>类加载器的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区运行时数据结构，然后在堆中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区中类数据的访问入口。</li>
<li>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类夹在其中，他将维持加载一段时间。</li>
</ul>
<p><img src="/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/image-20210129134225781.png" alt="image-20210129134225781"></p>
<p><img src="/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/image-20210129134537990.png" alt="image-20210129134537990"></p>
<ul>
<li><p>引导类加载器：C++编写，是JVM自带的类加载器，负责<strong>Java平台核心库（JRE-lib-rt.jar）</strong>,用来装载核心类库。该加载器无法直接获取。</p>
</li>
<li><p>扩展类加载器：负责<code>jre/lib/ext</code>目录下的jar包或<code>- D java.ext.dirs</code>指定目录下的jar包装入工作库。</p>
</li>
<li><p>系统类加载器：负责<code>java -classpath</code>或<code>-D java.class.path</code>所指定目录下的类与jar包装入工作，是最常用的加载器。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//获得系统类加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line">        <span class="comment">//获得系统加载器的父类加载器--&gt;扩展类加载器</span></span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line">        <span class="comment">//获得扩展类加载器的父类加载器--&gt;根加载器，引导类加载器，无法获取，将返回null</span></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试当前类是哪个加载器加载的</span></span><br><span class="line">        ClassLoader classLoader = Class.forName(<span class="string">"com.codefriday.Demo03.Test03"</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        <span class="comment">//测试JDK中的类是哪个加载器加载的</span></span><br><span class="line">        ClassLoader classLoader1 = Class.forName(<span class="string">"java.lang.String"</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何获得系统类加载器可以加载的路径</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">"java.class.path"</span>));</span><br><span class="line">        <span class="comment">//输出如下：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\charsets.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\deploy.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\access-bridge-32.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\cldrdata.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\dnsns.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\jaccess.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\jfxrt.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\localedata.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\nashorn.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\sunec.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\sunjce_provider.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\sunmscapi.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\sunpkcs11.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\ext\zipfs.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\javaws.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\jce.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\jfr.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\jfxswt.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\jsse.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\management-agent.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\plugin.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\resources.jar;</span></span><br><span class="line"><span class="comment">        D:\Java\jdk1.8.0_271\jre\lib\rt.jar;</span></span><br><span class="line"><span class="comment">        D:\IdeaProjects\Reflection\out\production\Reflection;</span></span><br><span class="line"><span class="comment">        D:\JetBrains\IntelliJ IDEA 2020.3.1\lib\idea_rt.jar</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/image-20210129135508876.png" alt="image-20210129135508876"></p>
<p>双亲委派机制：加载类时，根加载器加载了的类，自己写一个同名类被系统加载器加载时会向上查找安全性！！！自己写的用不起来。</p>
<h2 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h2><h3 id="获取属性，方法，构造器"><a href="#获取属性，方法，构造器" class="headerlink" title="获取属性，方法，构造器"></a>获取属性，方法，构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">//获得Class</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">"com.codefriday.Demo04.User"</span>);</span><br><span class="line">        <span class="comment">//通过Class方法获取类名</span></span><br><span class="line">        System.out.println(c1.getName());  <span class="comment">//获得包名+类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());  <span class="comment">//获得类名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取属性字段</span></span><br><span class="line">        Field[] fields1 = c1.getFields();  <span class="comment">//只能获取public</span></span><br><span class="line">        System.out.println(c1.getDeclaredField(<span class="string">"name"</span>));    <span class="comment">//可以获取私有属性</span></span><br><span class="line">        Field[] fields = c1.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        Method[] methods = c1.getMethods();  <span class="comment">//获得本类以及父类的所有public方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得本类的所有方法，包含私有</span></span><br><span class="line">        System.out.println(<span class="string">"==========="</span>);</span><br><span class="line">        methods = c1.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定方法</span></span><br><span class="line">        <span class="comment">//需要给定参数类型，原因：方法重载，参数列表可能不同！！！</span></span><br><span class="line">        Method getAge = c1.getMethod(<span class="string">"getAge"</span>, <span class="keyword">null</span>);</span><br><span class="line">        Method setAge = c1.getMethod(<span class="string">"setAge"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======="</span>);</span><br><span class="line">        <span class="comment">//获得所有构造器</span></span><br><span class="line">        Constructor[] constructors = c1.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定构造器</span></span><br><span class="line">        Constructor constructor = c1.getConstructor(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>, <span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul>
<li>动态创建类对象：调用Class对象的<code>newInstance()</code>方法<ul>
<li>1)类必须有一个无参数构造器</li>
<li>2)类的构造器访问权限需要足够</li>
</ul>
</li>
</ul>
<p>没有无参构造器时，只要在操作的时候明确调用类中的构造器，并将参数传递进去之后，才可以实例化操作。</p>
<p>步骤如下：</p>
<p>1）通过Class类的<code>getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code>取得本类指定参数类型的构造器</p>
<p>2）向构造器形参中传递一个对象数组进去，里面包含了构造器所需要的参数。</p>
<p>3）通过<code>Constructor</code>实例化对象</p>
<ul>
<li>操作方法</li>
<li>操作属性</li>
<li>操作构造器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class c1 = User<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">//反射无参构造</span></span><br><span class="line">        User user = (User)c1.newInstance();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//反射有参构造</span></span><br><span class="line">        Constructor constructor = c1.getConstructor(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>, <span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        User user2 = (User)constructor.newInstance(<span class="number">1</span>, <span class="string">"xx"</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(user2.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射获得方法</span></span><br><span class="line">        User user3 = (User) c1.newInstance();</span><br><span class="line">        Method setName = c1.getMethod(<span class="string">"setName"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//调用方法,传入类对象+参数，invoke（激活）</span></span><br><span class="line">        setName.invoke(user3,<span class="string">"codefriday"</span>);</span><br><span class="line">        System.out.println(user3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line"></span><br><span class="line">        User user4 = (User) c1.newInstance();</span><br><span class="line">        System.out.println(user4);</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**直接操作私有属性修改会报错</span></span><br><span class="line"><span class="comment">            name.set(user4,"codefriday");</span></span><br><span class="line"><span class="comment">            System.out.println(user4);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//调用setAccessible关闭程序安全检测</span></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        name.set(user4,<span class="string">"codefriday"</span>);</span><br><span class="line">        System.out.println(user4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获得泛型信息"><a href="#获得泛型信息" class="headerlink" title="获得泛型信息"></a>获得泛型信息</h2><p><img src="/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/image-20210129152346769.png" alt="image-20210129152346769"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test001</span><span class="params">(Map&lt;String,User&gt; map, List&lt;User&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test001"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">//反射获得Class</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">"com.codefriday.Demo04.Test06"</span>);</span><br><span class="line">        <span class="comment">//获得方法</span></span><br><span class="line">        Method method = c1.getMethod(<span class="string">"test001"</span>, Map<span class="class">.<span class="keyword">class</span>, <span class="title">List</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        <span class="comment">//获得参数类型</span></span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(<span class="string">"###"</span>+genericParameterType);</span><br><span class="line">            <span class="comment">//判断是否为参数化类型，强转输出</span></span><br><span class="line">            <span class="keyword">if</span>(genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射操作注解"><a href="#反射操作注解" class="headerlink" title="反射操作注解"></a>反射操作注解</h2><ul>
<li>getAnnotations</li>
<li>getAnnotation</li>
</ul>
<p><code>ORM：Object relationship Mapping --&gt;对象关系映射</code></p>
<p>练习实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.ExeAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Practice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//1.反射获得Class</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">"com.codefriday.ExeAnnotation.User"</span>);</span><br><span class="line">        <span class="comment">//2.反射操作获得注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        <span class="comment">//3.获得指定注解的值</span></span><br><span class="line">        Table table = (Table)c1.getDeclaredAnnotation(Table<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(table.value());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        <span class="comment">//4.获得类中属性上的注解</span></span><br><span class="line">        Field field = c1.getDeclaredField(<span class="string">"id"</span>);</span><br><span class="line">        TableColumn annotation = (TableColumn)field.getAnnotation(TableColumn<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(annotation.name());</span><br><span class="line">        System.out.println(annotation.type());</span><br><span class="line">        System.out.println(annotation.length());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Table</span>(<span class="string">"db_user"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="meta">@TableColumn</span>(name=<span class="string">"db_id"</span>,type = <span class="string">"int"</span>,length = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@TableColumn</span>(name=<span class="string">"db_name"</span>,type = <span class="string">"varchar"</span>,length = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableColumn</span>(name=<span class="string">"db_age"</span>,type = <span class="string">"int"</span>,length = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义注解，表格名字</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> Table&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义注解，表格一列</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> TableColumn&#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/%E6%B3%A8%E8%A7%A3&%E5%8F%8D%E5%B0%84%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.jpg" alt></p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程编程基础</title>
    <url>/2021/01/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="线程实现的三种方式"><a href="#线程实现的三种方式" class="headerlink" title="线程实现的三种方式"></a>线程实现的三种方式</h2><h3 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h3><ul>
<li>自定义线程类继承Thread</li>
<li>重写run()方法，编写线程执行体</li>
<li>创建线程对象，调用start()方法启动线程</li>
</ul>
<p>多线程下载网路图片：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多线程下载网图</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread02</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestThread02</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> WebDownloader().downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">"下载了"</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread02 t1 = <span class="keyword">new</span> TestThread02(<span class="string">"https://www.codefriday.cn/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1.png"</span>,<span class="string">"1.png"</span>);</span><br><span class="line">        TestThread02 t2 = <span class="keyword">new</span> TestThread02(<span class="string">"https://www.codefriday.cn/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/d8f9d72a6059252d20d93b0a6645fb3e59b5b9d2.jpeg"</span>,<span class="string">"2.jpeg"</span>);</span><br><span class="line">        TestThread02 t3 = <span class="keyword">new</span> TestThread02(<span class="string">"https://www.codefriday.cn/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/861fa058f2da35f8efa70b29bf7c45fd8689.gif"</span>,<span class="string">"3.gif"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"IO异常，下载器有问题！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图片来自个人博客</p>
<p><img src="/2021/01/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/image-20210128113223573.png" alt="image-20210128113223573"></p>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>Thread类也是实现了Runnable接口</p>
<ul>
<li>定义MyRunnable类实现Runnable接口</li>
<li>实现run()方法，编写线程执行体</li>
<li>创建线程对象，调用start()方法启动线程</li>
</ul>
<ul>
<li>创建实例类对象</li>
<li>创建代理类对象</li>
<li>启动</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"我是子线程"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TestThread t1 = <span class="keyword">new</span> TestThread();</span><br><span class="line">        <span class="keyword">new</span> Thread(t1).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"我是主线程"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理模式方便多个线程使用一个对象</p>
<h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><p>1.实现Callable接口，需要返回值类型</p>
<p>2.重写call方法，需要抛出异常</p>
<p>3.创建目标对象</p>
<p>4.创建执行服务：<code>ExcutorService ser = Excutors.newFixedThreadPool(1);</code></p>
<p>5.提交执行：<code>Future&lt;Boolean&gt; result1 = ser.submit(t1);</code></p>
<p>6.获取结果：<code>boolean r1 = result1.get();</code></p>
<p>7.关闭服务：<code>ser.shutdownNow();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> WebDownloader().downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">"下载了"</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        TestCallable t1 = <span class="keyword">new</span> TestCallable(<span class="string">"https://www.codefriday.cn/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1.png"</span>,<span class="string">"1.png"</span>);</span><br><span class="line">        TestCallable t2 = <span class="keyword">new</span> TestCallable(<span class="string">"https://www.codefriday.cn/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/d8f9d72a6059252d20d93b0a6645fb3e59b5b9d2.jpeg"</span>,<span class="string">"2.jpeg"</span>);</span><br><span class="line">        TestCallable t3 = <span class="keyword">new</span> TestCallable(<span class="string">"https://www.codefriday.cn/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/861fa058f2da35f8efa70b29bf7c45fd8689.gif"</span>,<span class="string">"3.gif"</span>);</span><br><span class="line">        <span class="comment">//创建执行服务</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line">        <span class="comment">//获取结果</span></span><br><span class="line">        <span class="keyword">boolean</span> rs1 = r1.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs2 = r2.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs3 = r3.get();</span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"IO异常，下载器有问题！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h2><p>实现Runnable接口多个线程使用同一个对象时，操作共享数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread04</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;抢到了第"</span>+ticketNums--+<span class="string">"张票"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread04 ts = <span class="keyword">new</span> TestThread04();</span><br><span class="line">        <span class="keyword">new</span> Thread(ts,<span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ts,<span class="string">"B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ts,<span class="string">"C"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/01/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/image-20210128125003336.png" alt="image-20210128125003336"></p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><ul>
<li>真实对象和代理对象都要实现同一个接口</li>
<li>代理对象要代理真实角色</li>
</ul>
<p><strong>好处：</strong></p>
<ul>
<li><p>代理对象可以做很多真实对象做不了的事</p>
</li>
<li><p>真实对象可以专注自己的事</p>
</li>
</ul>
<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.ProxyStatic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//代理模式</span></span><br><span class="line">        You you = <span class="keyword">new</span> You();</span><br><span class="line">        <span class="keyword">new</span> WeddingCompany(you).HappyMarry();</span><br><span class="line">        <span class="comment">/***</span></span><br><span class="line"><span class="comment">         * 对比Thread</span></span><br><span class="line"><span class="comment">         * 都实现了Runnable接口</span></span><br><span class="line"><span class="comment">         * 然后自己实现的类作为Thread的参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//公共接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//真实对象实现接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你 要结婚了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类实现接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeddingCompany</span><span class="params">(Marry target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="keyword">this</span>.target.HappyMarry();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结婚之后！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结婚之前！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h2><ul>
<li><p>避免匿名内部类过多</p>
</li>
<li><p>实质是函数式编程</p>
</li>
<li><p>理解Function interface（函数式接口）是学习Java8 Lamda表达式关键</p>
</li>
<li><p>函数式接口的定义</p>
<ul>
<li><p>任何接口，如果只包含唯一的抽象方法，那么他就是一个函数式接口</p>
<p>Runnable接口中就只有一个run方法。源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object's</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.lang.Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于函数式接口，我们可以通过Lamda表达式来创建该接口的对象</p>
</li>
<li><p>参数类型可以简化去掉</p>
</li>
<li><p>参数的圆括号可以去掉</p>
</li>
<li><p>多个参数也可以去掉参数类型，但必须统一，并且必须加上括号</p>
</li>
<li><p>花括号中只有一句话可以去掉花括号</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Tiger</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">what</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"方法二：静态内部类"</span>);</span><br><span class="line">            System.out.println(<span class="string">"It's a Tiger"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal;</span><br><span class="line">        <span class="comment">//外部实现类</span></span><br><span class="line">        animal = <span class="keyword">new</span> Cat();</span><br><span class="line">        animal.what();</span><br><span class="line">        <span class="comment">//静态内部类</span></span><br><span class="line">        animal = <span class="keyword">new</span> Tiger();</span><br><span class="line">        animal.what();</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">what</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"方法三：局部内部类"</span>);</span><br><span class="line">                System.out.println(<span class="string">"It's a Bird"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        animal = <span class="keyword">new</span> Bird();</span><br><span class="line">        animal.what();</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        animal = <span class="keyword">new</span> Animal() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">what</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"方法四：匿名内部类"</span>);</span><br><span class="line">                System.out.println(<span class="string">"It's a Dog"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.what();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        animal= ()-&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"方法五：Lambda表达式"</span>);</span><br><span class="line">            System.out.println(<span class="string">"It's a Lion"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.what();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">what</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法一：实现接口中的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">what</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法一：实现接口中的方法"</span>);</span><br><span class="line">        System.out.println(<span class="string">"It's a cat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/2021/01/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/image-20210128143952341.png" alt="image-20210128143952341"></p>
<p>Lambda表达式简化实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Do test = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//正常Lambda表达式</span></span><br><span class="line">        test = (<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)-&gt;&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            System.out.println(b);</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;;</span><br><span class="line">        test.DoIt(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化参数</span></span><br><span class="line">        test = (a,b,c)-&gt;&#123;</span><br><span class="line">            System.out.println(a+b+c);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化花括号</span></span><br><span class="line">        test = (a,b,c)-&gt; System.out.println(a+b+c);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Do</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoIt</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><img src="/2021/01/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/image-20210128144830701.png" alt="image-20210128144830701"></p>
<p>线程方法</p>
<p><img src="/2021/01/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/image-20210128145123583.png" alt="image-20210128145123583"></p>
<h3 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h3><ul>
<li><p>JDK提供的stop()，destory()方法已经废弃</p>
</li>
<li><p>推荐让线程自己停下来</p>
</li>
<li><p>建议使用一个标志位进行终止，自定义方法修改标志位</p>
</li>
</ul>
<h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><ul>
<li>sleep(时间)指定休眠时间，单位为毫秒</li>
<li>sleep存在异常InterruptionException</li>
<li>sleep时间到后线程变为就绪态</li>
<li>sleep可以模拟网络延时，倒计时等</li>
<li>每个对象都会有一个锁，sleep不会释放锁</li>
</ul>
<p>倒计时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.ThreadState;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">            tenDown();</span></span><br><span class="line"><span class="comment">        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"YYYY-MM-dd HH:mm:ss"</span>).format(date));</span><br><span class="line">                date = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程礼让yield"><a href="#线程礼让yield" class="headerlink" title="线程礼让yield"></a>线程礼让yield</h3><ul>
<li>让当前线程暂停但不阻塞</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.ThreadState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="keyword">new</span> Thread(myThread,<span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(myThread,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"线程开始执行"</span>);</span><br><span class="line">        Thread.yield();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"线程执行完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/2021/01/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/image-20210128152827898.png" alt="image-20210128152827898"></p>
<p>CPU重新调度，礼让不一定成功。</p>
<h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><ul>
<li>Join合并线程，待此线程执行完后，再执行其他线程</li>
<li>可以理解为插队</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.ThreadState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Join--&gt;"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main--&gt;"</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">50</span>)&#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="观测线程的状态"><a href="#观测线程的状态" class="headerlink" title="观测线程的状态"></a>观测线程的状态</h3><p>Thread.State</p>
<p><img src="/2021/01/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/image-20210128153511799.png" alt="image-20210128153511799"></p>
<h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><ul>
<li><p>JAVA提供一个线程调度器监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个程序来执行。</p>
</li>
<li><p>线程优先级用户数字1-10表示</p>
<p><img src="/2021/01/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/image-20210128155035237.png" alt="image-20210128155035237"></p>
</li>
<li><p>使用以下两种方法改变或者获取优先级</p>
<ul>
<li>getPriority</li>
<li>setPriority(int xx)</li>
</ul>
</li>
</ul>
<h3 id="守护线程（daemon）"><a href="#守护线程（daemon）" class="headerlink" title="守护线程（daemon）"></a>守护线程（daemon）</h3><ul>
<li>线程分为用户线程和守护线程</li>
<li>虚拟机必须确保用户线程执行完毕</li>
<li>虚拟机不用等待守护线程执行完毕</li>
<li>如：后台记录操作日志，监控内存，垃圾回收等等</li>
</ul>
<p><code>.setDaemon(true)</code>，线程默认false是用户线程，调用此方法变为守护线程。</p>
<h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>多个线程操作同一个资源——并发</p>
<p>形成条件：队列+锁</p>
<p>锁机制synchronized</p>
<ul>
<li>同步方法，使用synchronized修饰一个方法，锁定的就是this对象</li>
<li>同步块synchronized（Obj）{}</li>
<li>块中为对对象操作的语句</li>
</ul>
<p>同步代码块实现线程安全的ArrayList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.UnsafeThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeInsert</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">                    list.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>JUC(ava.util.concurrent)</code>下有一个<code>CopyOnWriteArrayList</code>是线程安全的。</p>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>多个线程各自占有一些共享资源，并且相互等待其他线程占用的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形。</p>
<p>产生死锁的必要条件：</p>
<ul>
<li><p>互斥，线程对资源互斥访问</p>
</li>
<li><p>持有并等待：线程持有资源并在等待其他资源</p>
</li>
<li><p>非抢占：线程获得锁不能被抢占</p>
</li>
<li><p>循环等待：线程之间存在一个环路，环路每个线程都持有一个资源，而这个资源是其他线程要申请的</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.DeadLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GetAB getAB1 = <span class="keyword">new</span> GetAB(<span class="number">0</span>);</span><br><span class="line">        GetAB getAB2 = <span class="keyword">new</span> GetAB(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(getAB1,<span class="string">"线程1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(getAB2,<span class="string">"线程2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetAB</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A a = <span class="keyword">new</span> A();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> B b = <span class="keyword">new</span> B();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag;<span class="comment">//标记拿A和B的顺序</span></span><br><span class="line">    GetAB(<span class="keyword">int</span> flag)&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (a)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"拿到了资源A"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (b)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"拿到了资源B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (b)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"拿到了资源B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (a)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"拿到了资源A"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><ul>
<li><p><code>JUC</code>中的Lock接口是控制多个线程对共享资源进行访问的工具。每次只能一个线程对Lock对象加锁，线程开始访问共享资源之前必须先获得Lock对象。</p>
</li>
<li><p><code>ReentrantLock</code>类实现了Lock（可重入的锁），可以显式的加锁，释放锁。</p>
</li>
</ul>
<p>显式加锁的同步计数器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.TestLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock01</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    TestLock01.lock.lock();</span><br><span class="line">                    TestLock01.count++;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    TestLock01.lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    TestLock01.lock.lock();</span><br><span class="line">                    TestLock01.count++;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    TestLock01.lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(TestLock01.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后输出20000，不加锁时结果随机的错误！！！</p>
<h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>Java提供了几个方法解决线程之间通信的问题</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>wait()</td>
<td align="left">表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td>
</tr>
<tr>
<td>wait(long timeout)</td>
<td align="left">指定等待的毫秒数</td>
</tr>
<tr>
<td>notify</td>
<td align="left">唤醒一个处于等待状态的线程</td>
</tr>
<tr>
<td>notifyAll()</td>
<td align="left">唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>
</tr>
</tbody></table>
<p>生产者/消费者问题！</p>
<h3 id="管程法解决"><a href="#管程法解决" class="headerlink" title="管程法解决"></a>管程法解决</h3><p>实际实现同步的一个缓冲区，其中put方法和get方法使用synchronized代码块实现同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.TestPC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者/消费者问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyBuffer buffer = <span class="keyword">new</span> MyBuffer();</span><br><span class="line">        <span class="keyword">new</span> Producer(buffer).start();</span><br><span class="line">        <span class="keyword">new</span> Producer(buffer).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(buffer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBuffer</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">10</span>;<span class="comment">//缓冲区大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LinkedList&lt;Integer&gt; buffer = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(buffer)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buffer.size()==MAX_SIZE)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    buffer.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.add(<span class="number">0</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"生产了，当前容量为"</span>+buffer.size());</span><br><span class="line">            buffer.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (buffer)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buffer.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    buffer.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.removeLast();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"消费了，当前容量为"</span>+buffer.size());</span><br><span class="line">            buffer.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    MyBuffer buffer = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(MyBuffer buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buffer = buffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            buffer.put();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    MyBuffer buffer = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(MyBuffer buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buffer = buffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            buffer.get();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="信号灯法"><a href="#信号灯法" class="headerlink" title="信号灯法"></a>信号灯法</h3><p>用一个标志位</p>
<p><img src="/2021/01/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/image-20210128200438789.png" alt="image-20210128200438789"></p>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><ul>
<li>创建和销毁线程有时开销会很大。</li>
<li>提前创建好多个线程，放入线程池中，使用的时候直接获取，使用完放回线程池，可避免频繁创建和销毁，实现重复利用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个线程池，参数为池子大小</span></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//调用execute传入Runnable对象创建线程</span></span><br><span class="line">        pool.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        pool.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        pool.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        pool.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        pool.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2021/01/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.jpg" alt></p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>实际网络通信就是发送一个个的包（packet），发送一个包需要直到对方的信息对方的地址以及自己的地址。</p>
<p>打电话 – 链接 – 接通 – 通话—TCP</p>
<p>发送短信 – 发送就完事         —UDP</p>
<p><strong>计算机网络定义</strong></p>
<p>计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p>
<p><strong>网络编程的目的</strong></p>
<p>传播交流信息，数据交换。通信。</p>
<p><strong>想要达到这个效果需要什么？</strong></p>
<ul>
<li>如何准确定位网络上的一台主机：IP+端口，定位到这个计算机的某个资源</li>
<li>找到主机，如何传输数据？</li>
</ul>
<p>JavaWeb：网页编程  B/S 浏览器访问</p>
<p>网络编程：TCP/IP C/S 客户端服务端</p>
<h2 id="网络通信的要素"><a href="#网络通信的要素" class="headerlink" title="网络通信的要素"></a>网络通信的要素</h2><p>如何实现网络的通信？</p>
<p><strong>通信双方地址：</strong></p>
<ul>
<li>IP</li>
<li>端口号</li>
</ul>
<p><strong>规则：网络通信协议</strong></p>
<p>TCP/IP参考模型。</p>
<p><img src="/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1.png" alt></p>
<h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>IP地址类：InetAddress</p>
<ul>
<li><p>唯一定位一台网络上的计算机</p>
</li>
<li><p>127.0.0.1：本机localhost</p>
</li>
<li><p>IP地址分类</p>
<ul>
<li>ipv4/ipv6<ul>
<li>IPV4：127.0.0.1，四字节，0-255，42亿，2011年用尽</li>
<li>IPV6：128位，8个无符号整数</li>
</ul>
</li>
<li>公网（互联网）-私网（局域网）<ul>
<li>ABCD类地址</li>
<li>192.168.xx.xx，局域网地址  域名</li>
</ul>
</li>
</ul>
</li>
<li><p>域名：记忆IP问题！</p>
</li>
</ul>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口表示计算机上一个程序的进程</p>
<ul>
<li><p>不同的进程有不同的端口号，用来区分软件</p>
</li>
<li><p>被规定0-65535</p>
</li>
<li><p>TCP,UDP：65535*2，单个协议下端口号不能冲突</p>
</li>
<li><p>端口分类</p>
<ul>
<li><p>公用端口：0-1023</p>
<ul>
<li>HTTP：80端口</li>
<li>HTTPS：443端口</li>
<li>FTP：21</li>
<li>Telent：23</li>
</ul>
</li>
<li><p>程序注册端口：1024-49151，分配给用户或者程序。</p>
<ul>
<li>Tomcat 8080</li>
<li>MySQL：3306</li>
<li>Oracle：1521</li>
</ul>
</li>
<li><p>动态、私有：49152-65535</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有的端口</span></span><br><span class="line">netstat -ano</span><br><span class="line"><span class="comment"># 管道流，查看指定的端口</span></span><br><span class="line">netstat -ano|findstr <span class="string">"445"</span></span><br><span class="line"><span class="comment"># 查看指定端口的进程</span></span><br><span class="line">tasklist|findstr <span class="string">"445</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><p><strong>网络通信协议：</strong>速率，传输码率，代码结构，传输控制</p>
<p><strong>TCP/IP协议簇</strong></p>
<p>其中代表：</p>
<ul>
<li>TCP</li>
<li>IP：网络互联协议 </li>
</ul>
<p>重要：</p>
<ul>
<li>TCP：用户传输协议</li>
<li>UDP：用户数据报协议</li>
</ul>
<p><strong>TCP对比UDP</strong></p>
<p>TCP：打电话</p>
<ul>
<li><p>连接，稳定</p>
</li>
<li><p><strong>三次握手，四次挥手</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最少需要三次，保证稳定连接</span><br><span class="line">A:你愁啥</span><br><span class="line">B:瞅你咋地</span><br><span class="line">A:干一场</span><br><span class="line"></span><br><span class="line">断开连接：</span><br><span class="line">A:我要走了</span><br><span class="line">B:你真的要走了吗</span><br><span class="line">B:你真的要走了吗</span><br><span class="line">A:我真的要走了</span><br></pre></td></tr></table></figure>

<p><img src="/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/d8f9d72a6059252d20d93b0a6645fb3e59b5b9d2.jpeg" alt="img"></p>
<p><img src="/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/861fa058f2da35f8efa70b29bf7c45fd8689.gif" alt="img"></p>
<p><img src="/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/48540923dd54564e5260495ce0006487d0584fb6.jpeg" alt></p>
</li>
<li><p>客户端，服务端</p>
</li>
<li><p>传输完成，释放连接</p>
</li>
</ul>
<p>UDP：发短信</p>
<ul>
<li>不连接，不稳定</li>
<li>客户端、服务端：没有明确界限</li>
<li>不管有没有准备好，都可以发给你</li>
<li>DDOS：洪水攻击！</li>
</ul>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="实现聊天"><a href="#实现聊天" class="headerlink" title="实现聊天"></a>实现聊天</h3><p><strong>服务端：</strong></p>
<p>1.开启一个端口</p>
<p>2.监听端口获得客户端socket</p>
<p>3.从socket流读取信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTCPServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务端开启一个端口以及IP</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">//等待客户端连接，连接获取到socket</span></span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line">                <span class="comment">//获取输出</span></span><br><span class="line">                is = socket.getInputStream();</span><br><span class="line">                baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len;</span><br><span class="line">                <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(baos.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(baos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(serverSocket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>客户端：</strong></p>
<p>1.通过IP+端口建立连接</p>
<p>2.发信</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTCPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务端IP,端口号</span></span><br><span class="line">            InetAddress severIP = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">            <span class="keyword">int</span> port = <span class="number">9999</span>;</span><br><span class="line">            <span class="comment">//创建连接</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(severIP, port);</span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">"Hello world!"</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p><strong>测试单次发送消息</strong></p>
<p>发送端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUDPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//建立socket</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        <span class="comment">//建立一个包</span></span><br><span class="line">        String msg = <span class="string">"服务器你好！"</span>;</span><br><span class="line">        InetAddress inetAddress = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">9999</span>;</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(msg.getBytes(),<span class="number">0</span>,msg.getBytes().length,inetAddress,port);</span><br><span class="line">        <span class="comment">//发送包</span></span><br><span class="line">        socket.send(packet);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接受端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUDPServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//开放端口</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//接受数据包</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">        socket.receive(packet);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getData().length));</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试循环发送消息</p>
<p>发送方：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPSender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">//准备数据</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            String data = reader.readLine();</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data.getBytes(),<span class="number">0</span>,data.getBytes().length, InetAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">9999</span>);</span><br><span class="line">            socket.send(packet);</span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="string">"bye"</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.codefriday.chat;</span><br><span class="line"></span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line">public class UDPReceiver &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        DatagramSocket socket &#x3D; new DatagramSocket(9999);</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">            DatagramPacket packet &#x3D; new DatagramPacket(buffer,0,buffer.length);</span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            byte[] data &#x3D; packet.getData();</span><br><span class="line">            String msg &#x3D; new String(data,0,data.length);</span><br><span class="line">            System.out.println(msg);</span><br><span class="line">            if(msg.equals(&quot;bye&quot;))&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多线程聊天"><a href="#多线程聊天" class="headerlink" title="多线程聊天"></a>多线程聊天</h2><p>将消息发送打包成一个线程</p>
<p>将消息接收打包成一个线程</p>
<p>两个程序同时开接受消息和发送消息的线程，端口对应上即可实现实时聊天</p>
<p>消息发送线程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkSend</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fromPort;</span><br><span class="line">    <span class="keyword">private</span> String toIP;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toPort;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkSend</span><span class="params">(<span class="keyword">int</span> fromPort, String toIP, <span class="keyword">int</span> toPort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fromPort = fromPort;</span><br><span class="line">        <span class="keyword">this</span>.toIP = toIP;</span><br><span class="line">        <span class="keyword">this</span>.toPort = toPort;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(fromPort);</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String data = reader.readLine();</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data.getBytes(),<span class="number">0</span>,data.getBytes().length, InetAddress.getByName(toIP),toPort);</span><br><span class="line">                socket.send(packet);</span><br><span class="line">                <span class="keyword">if</span>(data.equals(<span class="string">"bye"</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消息接收线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.PortUnreachableException;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkReceive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msgFrom;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toPort;</span><br><span class="line">    DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkReceive</span><span class="params">(<span class="keyword">int</span> toPort,String msgFrom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msgFrom = msgFrom;</span><br><span class="line">        <span class="keyword">this</span>.toPort = toPort;</span><br><span class="line">        buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(toPort);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer,<span class="number">0</span>,buffer.length);</span><br><span class="line">                socket.receive(packet);</span><br><span class="line">                <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">                String msg = <span class="keyword">new</span> String(data,<span class="number">0</span>,data.length);</span><br><span class="line">                System.out.println(msgFrom+<span class="string">":"</span>+msg);</span><br><span class="line">                <span class="keyword">if</span>(msg.equals(<span class="string">"bye"</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模拟老师和学生开的线程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkTeacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">5555</span>,<span class="string">"127.0.0.1"</span>,<span class="number">9999</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="number">6666</span>,<span class="string">"student"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.codefriday.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">7777</span>,<span class="string">"127.0.0.1"</span>,<span class="number">6666</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="number">9999</span>,<span class="string">"teacher"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cmd运行测试如下：<br><img src="/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20210127213812966.png" alt></p>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>统一资源定位符</p>
<p>协议+IP+项目+具体资源</p>
<p>下载网络资源实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestURL</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"https://codefriday.oss-cn-beijing.aliyuncs.com/author.jpg"</span>);</span><br><span class="line">        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        InputStream is = urlConnection.getInputStream();</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"test.jpg"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        urlConnection.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/01/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20210128104054784.png" alt="image-20210128104054784"></p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>IO</title>
    <url>/2021/01/17/IO/</url>
    <content><![CDATA[<h2 id="IO是什么"><a href="#IO是什么" class="headerlink" title="IO是什么"></a>IO是什么</h2><p>IO是指Input/Output，即输入和输出。以内存为中心：</p>
<ul>
<li>Input指从外部读入数据到内存，例如，把文件从磁盘读取到内存，从网络读取数据到内存等等。</li>
<li>Output指把数据从内存输出到外部，例如，把数据从内存写入到文件，把数据从内存输出到网络等等。</li>
</ul>
<p>因为代码是在内存中运行的，数据也必须读到内存，最终的表示方式无非是byte数组，字符串等，都必须存放在内存里。</p>
<p>IO流是一种顺序读写数据的模式，它的特点是单向流动。数据类似自来水一样在水管中流动，所以我们把它称为IO流。</p>
<ul>
<li><h3 id="InputStream-OutputStream"><a href="#InputStream-OutputStream" class="headerlink" title="InputStream / OutputStream"></a>InputStream / OutputStream</h3></li>
</ul>
<p>IO流以<code>byte</code>（字节）为最小单位，因此也称为字节流。</p>
<p>在Java中，<code>InputStream</code>代表输入字节流，<code>OuputStream</code>代表输出字节流，这是最基本的两种IO流。</p>
<ul>
<li><h3 id="Reader-Writer"><a href="#Reader-Writer" class="headerlink" title="Reader / Writer"></a>Reader / Writer</h3></li>
</ul>
<p>如果我们需要读写的是字符，并且字符不全是单字节表示的ASCII字符，那么，按照<code>char</code>来读写显然更方便，这种流称为<em>字符流</em>。</p>
<p>Java提供了<code>Reader</code>和<code>Writer</code>表示字符流，字符流传输的最小数据单位是<code>char</code>。</p>
<p><code>Reader</code>和<code>Writer</code>本质上是一个能自动编解码的<code>InputStream</code>和<code>OutputStream</code>。</p>
<p>使用<code>Reader</code>，数据源虽然是字节，但我们读入的数据都是<code>char</code>类型的字符，原因是<code>Reader</code>内部把读入的<code>byte</code>做了解码，转换成了<code>char</code>。使用<code>InputStream</code>，我们读入的数据和原始二进制数据一模一样，是<code>byte[]</code>数组，但是我们可以自己把二进制<code>byte[]</code>数组按照某种编码转换为字符串。究竟使用<code>Reader</code>还是<code>InputStream</code>，要取决于具体的使用场景。如果数据源不是文本，就只能使用<code>InputStream</code>，如果数据源是文本，使用Reader更方便一些。<code>Writer</code>和<code>OutputStream</code>是类似的。</p>
<ul>
<li><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3></li>
</ul>
<p>同步IO是指，读写IO时代码必须等待数据返回后才继续执行后续代码，它的优点是代码编写简单，缺点是CPU执行效率低。</p>
<p>而异步IO是指，读写IO时仅发出请求，然后立刻执行后续代码，它的优点是CPU执行效率高，缺点是代码编写复杂。</p>
<p>Java标准库的包<code>java.io</code>提供了同步IO，而<code>java.nio</code>则是异步IO。上面我们讨论的<code>InputStream</code>、<code>OutputStream</code>、<code>Reader</code>和<code>Writer</code>都是同步IO的抽象类，对应的具体实现类，以文件为例，有<code>FileInputStream</code>、<code>FileOutputStream</code>、<code>FileReader</code>和<code>FileWriter</code>。</p>
<h2 id="File对象"><a href="#File对象" class="headerlink" title="File对象"></a>File对象</h2><p>在计算机系统中，文件是非常重要的存储方式。Java的标准库<code>java.io</code>提供了<code>File</code>对象来操作文件和目录。</p>
<p>要构造一个<code>File</code>对象，需要传入文件路径。</p>
<p>注意Windows平台使用<code>\</code>作为路径分隔符，在Java字符串中需要用<code>\\</code>表示一个<code>\</code>。Linux平台使用<code>/</code>作为路径分隔符。</p>
<p>可以用<code>.</code>表示当前目录，<code>..</code>表示上级目录。</p>
<p>传入相对路径时，相对路径前面加上当前目录就是绝对路径。</p>
<p><strong>File对象有3种形式表示的路径</strong></p>
<ul>
<li><p><code>getPath()</code></p>
<p>返回构造方法传入的路径</p>
</li>
<li><p><code>getAbsolutePath()</code></p>
<p>返回绝对路径</p>
</li>
<li><p><code>getCanonicalPath</code></p>
<p>它和绝对路径类似，但是返回的是规范路径</p>
</li>
</ul>
<h3 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h3><p><code>File</code>对象既可以表示文件，也可以表示目录。特别要注意的是，构造一个<code>File</code>对象，即使传入的文件或目录不存在，代码也不会出错，因为构造一个<code>File</code>对象，并不会导致任何磁盘操作。只有当我们调用<code>File</code>对象的某些方法的时候，才真正进行磁盘操作。</p>
<p>例如，调用<code>isFile()</code>，判断该<code>File</code>对象是否是一个已存在的文件，调用<code>isDirectory()</code>，判断该<code>File</code>对象是否是一个已存在的目录。</p>
<p>用<code>File</code>对象获取到一个文件时，还可以进一步判断文件的权限和大小：</p>
<ul>
<li><code>boolean canRead()</code>：是否可读；</li>
<li><code>boolean canWrite()</code>：是否可写；</li>
<li><code>boolean canExecute()</code>：是否可执行；</li>
<li><code>long length()</code>：文件字节大小。</li>
</ul>
<h3 id="创建和删除文件"><a href="#创建和删除文件" class="headerlink" title="创建和删除文件"></a>创建和删除文件</h3><p>当File对象表示一个文件时，可以通过<code>createNewFile()</code>创建一个新文件，用<code>delete()</code>删除该文件。</p>
<p>有些时候，程序需要读写一些临时文件，File对象提供了<code>createTempFile()</code>来创建一个临时文件，以及<code>deleteOnExit()</code>在JVM退出时自动删除该文件。</p>
<h3 id="遍历文件和目录"><a href="#遍历文件和目录" class="headerlink" title="遍历文件和目录"></a>遍历文件和目录</h3><p>当File对象表示一个目录时，可以使用<code>list()</code>和<code>listFiles()</code>列出目录下的文件和子目录名。<code>listFiles()</code>提供了一系列重载方法，可以过滤不想要的文件和目录。</p>
<p>和文件操作类似，File对象如果表示一个目录，可以通过以下方法创建和删除目录：</p>
<ul>
<li><code>boolean mkdir()</code>：创建当前File对象表示的目录；</li>
<li><code>boolean mkdirs()</code>：创建当前File对象表示的目录，并在必要时将不存在的父目录也创建出来；</li>
<li><code>boolean delete()</code>：删除当前File对象表示的目录，当前目录必须为空才能删除成功。</li>
</ul>
<h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>Java标准库还提供了一个<code>Path</code>对象，它位于<code>java.nio.file</code>包。<code>Path</code>对象和<code>File</code>对象类似，但操作更加简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Path p1 = Paths.get(<span class="string">"."</span>, <span class="string">"project"</span>, <span class="string">"study"</span>); <span class="comment">// 构造一个Path对象</span></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        Path p2 = p1.toAbsolutePath(); <span class="comment">// 转换为绝对路径</span></span><br><span class="line">        System.out.println(p2);</span><br><span class="line">        Path p3 = p2.normalize(); <span class="comment">// 转换为规范路径</span></span><br><span class="line">        System.out.println(p3);</span><br><span class="line">        File f = p3.toFile(); <span class="comment">// 转换为File对象</span></span><br><span class="line">        System.out.println(f);</span><br><span class="line">        <span class="keyword">for</span> (Path p : Paths.get(<span class="string">".."</span>).toAbsolutePath()) &#123; <span class="comment">// 可以直接遍历Path</span></span><br><span class="line">            System.out.println(<span class="string">"  "</span> + p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><p><code>InputStream</code>就是Java标准库提供的最基本的输入流。它位于<code>java.io</code>这个包里。<code>java.io</code>包提供了所有同步IO的功能。</p>
<p>要特别注意的一点是，<code>InputStream</code>并不是一个接口，而是一个抽象类，它是所有输入流的超类。这个抽象类定义的一个最重要的方法就是<code>int read()</code>，签名如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract int read() throws IOException;</span><br></pre></td></tr></table></figure>

<p>这个方法会读取输入流的下一个字节，并返回字节表示的<code>int</code>值（0~255）。如果已读到末尾，返回<code>-1</code>表示不能继续读取了。</p>
<p><code>InputStream</code>和<code>OutputStream</code>都是通过<code>close()</code>方法来关闭流。关闭流就会释放对应的底层资源。</p>
<p>我们还要注意到在读取或写入IO流的过程中，可能会发生错误，例如，文件不存在导致无法读取，没有写权限导致写入失败，等等，这些底层错误由Java虚拟机自动封装成<code>IOException</code>异常并抛出。因此，所有与IO操作相关的代码都必须正确处理<code>IOException</code>。</p>
<p>潜在的问题：如果读取过程中发生了IO错误，<code>InputStream</code>就没法正确地关闭，资源也就没法及时释放。</p>
<p>因此，我们需要用<code>try ... finally</code>来保证<code>InputStream</code>在无论是否发生IO错误的时候都能够正确地关闭。</p>
<h3 id="缓冲"><a href="#缓冲" class="headerlink" title="缓冲"></a>缓冲</h3><p>在读取流的时候，一次读取一个字节并不是最高效的方法。很多流支持一次性读取多个字节到缓冲区，对于文件和网络流来说，利用缓冲区一次性读取多个字节效率往往要高很多。<code>InputStream</code>提供了两个重载方法来支持读取多个字节：</p>
<ul>
<li><code>int read(byte[] b)</code>：读取若干字节并填充到<code>byte[]</code>数组，返回读取的字节数</li>
<li><code>int read(byte[] b, int off, int len)</code>：指定<code>byte[]</code>数组的偏移量和最大填充数</li>
</ul>
<p>利用上述方法一次读取多个字节时，需要先定义一个<code>byte[]</code>数组作为缓冲区，<code>read()</code>方法会尽可能多地读取字节到缓冲区， 但不会超过缓冲区的大小。<code>read()</code>方法的返回值不再是字节的<code>int</code>值，而是返回实际读取了多少个字节。如果返回<code>-1</code>，表示没有更多的数据了。</p>
<h3 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h3><p>在调用<code>InputStream</code>的<code>read()</code>方法读取数据时，我们说<code>read()</code>方法是阻塞（Blocking）的。它的意思是要等待<code>read</code>调用返回才会继续执行。</p>
<h3 id="InputStream实现类"><a href="#InputStream实现类" class="headerlink" title="InputStream实现类"></a>InputStream实现类</h3><p>用<code>FileInputStream</code>可以从文件获取输入流，这是<code>InputStream</code>常用的一个实现类。此外，<code>ByteArrayInputStream</code>可以在内存中模拟一个<code>InputStream</code>。</p>
<h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><p>和<code>InputStream</code>相反，<code>OutputStream</code>是Java标准库提供的最基本的输出流。</p>
<p>和<code>InputStream</code>类似，<code>OutputStream</code>也是抽象类，它是所有输出流的超类。这个抽象类定义的一个最重要的方法就是<code>void write(int b)</code>，签名如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract void write(int b) throws IOException;</span><br></pre></td></tr></table></figure>

<p>这个方法会写入一个字节到输出流。要注意的是，虽然传入的是<code>int</code>参数，但只会写入一个字节，即只写入<code>int</code>最低8位表示字节的部分（相当于<code>b &amp; 0xff</code>）。</p>
<p>和<code>InputStream</code>类似，<code>OutputStream</code>也提供了<code>close()</code>方法关闭输出流，以便释放系统资源。要特别注意：<code>OutputStream</code>还提供了一个<code>flush()</code>方法，它的目的是将缓冲区的内容真正输出到目的地。</p>
<p>为什么要有<code>flush()</code>？因为向磁盘、网络写入数据的时候，出于效率的考虑，操作系统并不是输出一个字节就立刻写入到文件或者发送到网络，而是把输出的字节先放到内存的一个缓冲区里（本质上就是一个<code>byte[]</code>数组），等到缓冲区写满了，再一次性写入文件或者网络。对于很多IO设备来说，一次写一个字节和一次写1000个字节，花费的时间几乎是完全一样的，所以<code>OutputStream</code>有个<code>flush()</code>方法，能强制把缓冲区内容输出。</p>
<p>通常情况下，我们不需要调用这个<code>flush()</code>方法，因为缓冲区写满了<code>OutputStream</code>会自动调用它，并且，在调用<code>close()</code>方法关闭<code>OutputStream</code>之前，也会自动调用<code>flush()</code>方法。</p>
<h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><p>每次写入一个字节非常麻烦，更常见的方法是一次性写入若干字节。这时，可以用<code>OutputStream</code>提供的重载方法<code>void write(byte[])</code>来实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void writeFile() throws IOException &#123;</span><br><span class="line">    OutputStream output &#x3D; new FileOutputStream(&quot;out&#x2F;readme.txt&quot;);</span><br><span class="line">    output.write(&quot;Hello&quot;.getBytes(&quot;UTF-8&quot;)); &#x2F;&#x2F; Hello</span><br><span class="line">    output.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和<code>InputStream</code>一样，上述代码没有考虑到在发生异常的情况下如何正确地关闭资源。写入过程也会经常发生IO错误，例如，磁盘已满，无权限写入等等。我们需要用<code>try(resource)</code>来保证<code>OutputStream</code>在无论是否发生IO错误的时候都能够正确地关闭：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (OutputStream output = <span class="keyword">new</span> FileOutputStream(<span class="string">"out/readme.txt"</span>)) &#123;</span><br><span class="line">        output.write(<span class="string">"Hello"</span>.getBytes(<span class="string">"UTF-8"</span>)); <span class="comment">// Hello</span></span><br><span class="line">    &#125; <span class="comment">// 编译器在此自动为我们写入finally并调用close()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="阻塞-1"><a href="#阻塞-1" class="headerlink" title="阻塞"></a>阻塞</h3><p>和<code>InputStream</code>一样，<code>OutputStream</code>的<code>write()</code>方法也是阻塞的。</p>
<h3 id="OutputStream实现类"><a href="#OutputStream实现类" class="headerlink" title="OutputStream实现类"></a>OutputStream实现类</h3><p>用<code>FileOutputStream</code>可以从文件获取输出流，这是<code>OutputStream</code>常用的一个实现类。</p>
<p><code>ByteArrayOutputStream</code>实际上是把一个<code>byte[]</code>数组在内存中变成一个<code>OutputStream</code>，虽然实际应用不多，但测试的时候，可以用它来构造一个<code>OutputStream</code>。</p>
<h2 id="Filter模式"><a href="#Filter模式" class="headerlink" title="Filter模式"></a>Filter模式</h2><p>直接使用继承，为各种<code>InputStream</code>附加更多的功能，根本无法控制代码的复杂度，很快就会失控。</p>
<p>为了解决依赖继承会导致子类数量失控的问题，JDK首先将<code>InputStream</code>分为两大类：</p>
<p>一类是直接提供数据的基础<code>InputStream</code>，例如：</p>
<ul>
<li>FileInputStream</li>
<li>ByteArrayInputStream</li>
<li>ServletInputStream</li>
<li>…</li>
</ul>
<p>一类是提供额外附加功能的<code>InputStream</code>，例如：</p>
<ul>
<li>BufferedInputStream</li>
<li>DigestInputStream</li>
<li>CipherInputStream</li>
<li>…</li>
</ul>
<p>当我们需要给一个“基础”<code>InputStream</code>附加各种功能时，我们先确定这个能提供数据源的<code>InputStream</code>，因为我们需要的数据总得来自某个地方，例如，<code>FileInputStream</code>，数据来源自文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InputStream file &#x3D; new FileInputStream(&quot;test.gz&quot;);</span><br></pre></td></tr></table></figure>

<p>紧接着，我们希望<code>FileInputStream</code>能提供缓冲的功能来提高读取的效率，因此我们用<code>BufferedInputStream</code>包装这个<code>InputStream</code>，得到的包装类型是<code>BufferedInputStream</code>，但它仍然被视为一个<code>InputStream</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InputStream buffered &#x3D; new BufferedInputStream(file);</span><br></pre></td></tr></table></figure>

<p>最后，假设该文件已经用gzip压缩了，我们希望直接读取解压缩的内容，就可以再包装一个<code>GZIPInputStream</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InputStream gzip &#x3D; new GZIPInputStream(buffered);</span><br></pre></td></tr></table></figure>

<p>无论我们包装多少次，得到的对象始终是<code>InputStream</code>，我们直接用<code>InputStream</code>来引用它，就可以正常读取。</p>
<h2 id="操作Zip"><a href="#操作Zip" class="headerlink" title="操作Zip"></a>操作Zip</h2><p><code>ZipInputStream</code>是一种<code>FilterInputStream</code>，它可以直接读取zip包的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌───────────────────┐</span><br><span class="line">│    InputStream    │</span><br><span class="line">└───────────────────┘</span><br><span class="line">          ▲</span><br><span class="line">          │</span><br><span class="line">┌───────────────────┐</span><br><span class="line">│ FilterInputStream │</span><br><span class="line">└───────────────────┘</span><br><span class="line">          ▲</span><br><span class="line">          │</span><br><span class="line">┌───────────────────┐</span><br><span class="line">│InflaterInputStream│</span><br><span class="line">└───────────────────┘</span><br><span class="line">          ▲</span><br><span class="line">          │</span><br><span class="line">┌───────────────────┐</span><br><span class="line">│  ZipInputStream   │</span><br><span class="line">└───────────────────┘</span><br><span class="line">          ▲</span><br><span class="line">          │</span><br><span class="line">┌───────────────────┐</span><br><span class="line">│  JarInputStream   │</span><br><span class="line">└───────────────────┘</span><br></pre></td></tr></table></figure>

<p>另一个<code>JarInputStream</code>是从<code>ZipInputStream</code>派生，它增加的主要功能是直接读取jar文件里面的<code>MANIFEST.MF</code>文件。因为本质上jar包就是zip包，只是额外附加了一些固定的描述文件。</p>
<h3 id="读取zip包"><a href="#读取zip包" class="headerlink" title="读取zip包"></a>读取zip包</h3><p>我们来看看<code>ZipInputStream</code>的基本用法。</p>
<p>我们要创建一个<code>ZipInputStream</code>，通常是传入一个<code>FileInputStream</code>作为数据源，然后，循环调用<code>getNextEntry()</code>，直到返回<code>null</code>，表示zip流结束。</p>
<p>一个<code>ZipEntry</code>表示一个压缩文件或目录，如果是压缩文件，我们就用<code>read()</code>方法不断读取，直到返回<code>-1</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try (ZipInputStream zip &#x3D; new ZipInputStream(new FileInputStream(...))) &#123;</span><br><span class="line">    ZipEntry entry &#x3D; null;</span><br><span class="line">    while ((entry &#x3D; zip.getNextEntry()) !&#x3D; null) &#123;</span><br><span class="line">        String name &#x3D; entry.getName();</span><br><span class="line">        if (!entry.isDirectory()) &#123;</span><br><span class="line">            int n;</span><br><span class="line">            while ((n &#x3D; zip.read()) !&#x3D; -1) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="写入zip包"><a href="#写入zip包" class="headerlink" title="写入zip包"></a>写入zip包</h3><p><code>ZipOutputStream</code>是一种<code>FilterOutputStream</code>，它可以直接写入内容到zip包。我们要先创建一个<code>ZipOutputStream</code>，通常是包装一个<code>FileOutputStream</code>，然后，每写入一个文件前，先调用<code>putNextEntry()</code>，然后用<code>write()</code>写入<code>byte[]</code>数据，写入完毕后调用<code>closeEntry()</code>结束这个文件的打包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try (ZipOutputStream zip &#x3D; new ZipOutputStream(new FileOutputStream(...))) &#123;</span><br><span class="line">    File[] files &#x3D; ...</span><br><span class="line">    for (File file : files) &#123;</span><br><span class="line">        zip.putNextEntry(new ZipEntry(file.getName()));</span><br><span class="line">        zip.write(getFileDataAsBytes(file));</span><br><span class="line">        zip.closeEntry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码没有考虑文件的目录结构。如果要实现目录层次结构，<code>new ZipEntry(name)</code>传入的<code>name</code>要用相对路径。</p>
<h2 id="读取classpath资源"><a href="#读取classpath资源" class="headerlink" title="读取classpath资源"></a>读取classpath资源</h2><p>从磁盘的固定目录读取配置文件，不是一个好的办法。</p>
<p>有没有路径无关的读取文件的方式呢？</p>
<p>从classpath读取文件就可以避免不同环境下文件路径不一致的问题：如果我们把<code>default.properties</code>文件放到classpath中，就不用关心它的实际存放路径。</p>
<p>在classpath中的资源文件，路径总是以<code>／</code>开头，我们先获取当前的<code>Class</code>对象，然后调用<code>getResourceAsStream()</code>就可以直接从classpath读取任意的资源文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try (InputStream input &#x3D; getClass().getResourceAsStream(&quot;&#x2F;default.properties&quot;)) &#123;</span><br><span class="line">    &#x2F;&#x2F; TODO:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>序列化是指把一个Java对象变成二进制内容，本质上就是一个<code>byte[]</code>数组。</p>
<p>为什么要把Java对象序列化呢？因为序列化后可以把<code>byte[]</code>保存到文件中，或者把<code>byte[]</code>通过网络传输到远程，这样，就相当于把Java对象存储到文件或者通过网络传输出去了。</p>
<p>有序列化，就有反序列化，即把一个二进制内容（也就是<code>byte[]</code>数组）变回Java对象。有了反序列化，保存到文件中的<code>byte[]</code>数组又可以“变回”Java对象，或者从网络上读取<code>byte[]</code>并把它“变回”Java对象。</p>
<p>我们来看看如何把一个Java对象序列化。</p>
<p>一个Java对象要能序列化，必须实现一个特殊的<code>java.io.Serializable</code>接口，它的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Serializable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Serializable</code>接口没有定义任何方法，它是一个空接口。我们把这样的空接口称为“标记接口”（Marker Interface），实现了标记接口的类仅仅是给自身贴了个“标记”，并没有增加任何方法。</p>
<h3 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h3><p>把一个Java对象变为<code>byte[]</code>数组，需要使用<code>ObjectOutputStream</code>。它负责把一个Java对象写入一个字节流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream buffer = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> (ObjectOutputStream output = <span class="keyword">new</span> ObjectOutputStream(buffer)) &#123;</span><br><span class="line">            <span class="comment">// 写入int:</span></span><br><span class="line">            output.writeInt(<span class="number">12345</span>);</span><br><span class="line">            <span class="comment">// 写入String:</span></span><br><span class="line">            output.writeUTF(<span class="string">"Hello"</span>);</span><br><span class="line">            <span class="comment">// 写入Object:</span></span><br><span class="line">            output.writeObject(Double.valueOf(<span class="number">123.456</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(buffer.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ObjectOutputStream</code>既可以写入基本类型，如<code>int</code>，<code>boolean</code>，也可以写入<code>String</code>（以UTF-8编码），还可以写入实现了<code>Serializable</code>接口的<code>Object</code>。</p>
<p>因为写入<code>Object</code>时需要大量的类型信息，所以写入的内容很大。</p>
<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>和<code>ObjectOutputStream</code>相反，<code>ObjectInputStream</code>负责从一个字节流读取Java对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try (ObjectInputStream input &#x3D; new ObjectInputStream(...)) &#123;</span><br><span class="line">    int n &#x3D; input.readInt();</span><br><span class="line">    String s &#x3D; input.readUTF();</span><br><span class="line">    Double d &#x3D; (Double) input.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了能读取基本类型和<code>String</code>类型外，调用<code>readObject()</code>可以直接返回一个<code>Object</code>对象。要把它变成一个特定类型，必须强制转型。</p>
<p><code>readObject()</code>可能抛出的异常有：</p>
<ul>
<li><code>ClassNotFoundException</code>：没有找到对应的Class；</li>
<li><code>InvalidClassException</code>：Class不匹配。</li>
</ul>
<p>对于<code>ClassNotFoundException</code>，这种情况常见于一台电脑上的Java程序把一个Java对象，例如，<code>Person</code>对象序列化以后，通过网络传给另一台电脑上的另一个Java程序，但是这台电脑的Java程序并没有定义<code>Person</code>类，所以无法反序列化。</p>
<p>对于<code>InvalidClassException</code>，这种情况常见于序列化的<code>Person</code>对象定义了一个<code>int</code>类型的<code>age</code>字段，但是反序列化时，<code>Person</code>类定义的<code>age</code>字段被改成了<code>long</code>类型，所以导致class不兼容。</p>
<p>为了避免这种class定义变动导致的不兼容，Java的序列化允许class定义一个特殊的<code>serialVersionUID</code>静态变量，用于标识Java类的序列化“版本”，通常可以由IDE自动生成。如果增加或修改了字段，可以改变<code>serialVersionUID</code>的值，这样就能自动阻止不匹配的class版本.</p>
<h2 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h2><p><code>Reader</code>是Java的IO库提供的另一个输入流接口。和<code>InputStream</code>的区别是，<code>InputStream</code>是一个字节流，即以<code>byte</code>为单位读取，而<code>Reader</code>是一个字符流，即以<code>char</code>为单位读取：</p>
<table>
<thead>
<tr>
<th align="left">InputStream</th>
<th align="left">Reader</th>
</tr>
</thead>
<tbody><tr>
<td align="left">字节流，以<code>byte</code>为单位</td>
<td align="left">字符流，以<code>char</code>为单位</td>
</tr>
<tr>
<td align="left">读取字节（-1，0~255）：<code>int read()</code></td>
<td align="left">读取字符（-1，0~65535）：<code>int read()</code></td>
</tr>
<tr>
<td align="left">读到字节数组：<code>int read(byte[] b)</code></td>
<td align="left">读到字符数组：<code>int read(char[] c)</code></td>
</tr>
</tbody></table>
<h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><p><code>FileReader</code>是<code>Reader</code>的一个子类，它可以打开文件并获取<code>Reader</code>。</p>
<p>如果我们读取一个纯ASCII编码的文本文件，上述代码工作是没有问题的。但如果文件中包含中文，就会出现乱码，因为<code>FileReader</code>默认的编码与系统相关，例如，Windows系统的默认编码可能是<code>GBK</code>，打开一个<code>UTF-8</code>编码的文本文件就会出现乱码。</p>
<p>要避免乱码问题，我们需要在创建<code>FileReader</code>时指定编码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Reader reader = <span class="keyword">new</span> FileReader(<span class="string">"src/readme.txt"</span>, StandardCharsets.UTF_8);</span><br></pre></td></tr></table></figure>

<p><code>Reader</code>还提供了一次性读取若干字符并填充到<code>char[]</code>数组的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int read(char[] c) throws IOException</span><br></pre></td></tr></table></figure>

<p>它返回实际读入的字符个数，最大不超过<code>char[]</code>数组的长度。返回<code>-1</code>表示流结束。</p>
<p>利用这个方法，我们可以先设置一个缓冲区，然后，每次尽可能地填充缓冲区。</p>
<h3 id="CharArrayReader"><a href="#CharArrayReader" class="headerlink" title="CharArrayReader"></a>CharArrayReader</h3><p><code>CharArrayReader</code>可以在内存中模拟一个<code>Reader</code>，它的作用实际上是把一个<code>char[]</code>数组变成一个<code>Reader</code>，这和<code>ByteArrayInputStream</code>非常类似。</p>
<h3 id="StringReader"><a href="#StringReader" class="headerlink" title="StringReader"></a>StringReader</h3><p><code>StringReader</code>可直接把<code>String</code>作为数据源，它和<code>CharArrayReader</code>几乎一样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (Reader reader = <span class="keyword">new</span> StringReader(<span class="string">"Hello"</span>)) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h3><p><code>Reader</code>和<code>InputStream</code>有什么关系？</p>
<p>除了特殊的<code>CharArrayReader</code>和<code>StringReader</code>，普通的<code>Reader</code>实际上是基于<code>InputStream</code>构造的，因为<code>Reader</code>需要从<code>InputStream</code>中读入字节流（<code>byte</code>），然后，根据编码设置，再转换为<code>char</code>就可以实现字符流。如果我们查看<code>FileReader</code>的源码，它在内部实际上持有一个<code>FileInputStream</code>。</p>
<p>既然<code>Reader</code>本质上是一个基于<code>InputStream</code>的<code>byte</code>到<code>char</code>的转换器，那么，如果我们已经有一个<code>InputStream</code>，想把它转换为<code>Reader</code>，是完全可行的。<code>InputStreamReader</code>就是这样一个转换器，它可以把任何<code>InputStream</code>转换为<code>Reader</code></p>
<p>构造<code>InputStreamReader</code>时，我们需要传入<code>InputStream</code>，还需要指定编码，就可以得到一个<code>Reader</code>对象。上述代码可以通过<code>try (resource)</code>更简洁地改写如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try (Reader reader &#x3D; new InputStreamReader(new FileInputStream(&quot;src&#x2F;readme.txt&quot;), &quot;UTF-8&quot;)) &#123;</span><br><span class="line">    &#x2F;&#x2F; TODO:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码实际上就是<code>FileReader</code>的一种实现方式。</p>
<p>使用<code>try (resource)</code>结构时，当我们关闭<code>Reader</code>时，它会在内部自动调用<code>InputStream</code>的<code>close()</code>方法，所以，只需要关闭最外层的<code>Reader</code>对象即可。</p>
<h2 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h2><p><code>Reader</code>是带编码转换器的<code>InputStream</code>，它把<code>byte</code>转换为<code>char</code>，而<code>Writer</code>就是带编码转换器的<code>OutputStream</code>，它把<code>char</code>转换为<code>byte</code>并输出。</p>
<p><code>Writer</code>和<code>OutputStream</code>的区别如下：</p>
<table>
<thead>
<tr>
<th align="left">OutputStream</th>
<th align="left">Writer</th>
</tr>
</thead>
<tbody><tr>
<td align="left">字节流，以<code>byte</code>为单位</td>
<td align="left">字符流，以<code>char</code>为单位</td>
</tr>
<tr>
<td align="left">写入字节（0~255）：<code>void write(int b)</code></td>
<td align="left">写入字符（0~65535）：<code>void write(int c)</code></td>
</tr>
<tr>
<td align="left">写入字节数组：<code>void write(byte[] b)</code></td>
<td align="left">写入字符数组：<code>void write(char[] c)</code></td>
</tr>
<tr>
<td align="left">无对应方法</td>
<td align="left">写入String：<code>void write(String s)</code></td>
</tr>
</tbody></table>
<p><code>Writer</code>是所有字符输出流的超类，它提供的方法主要有：</p>
<ul>
<li>写入一个字符（0~65535）：<code>void write(int c)</code>；</li>
<li>写入字符数组的所有字符：<code>void write(char[] c)</code>；</li>
<li>写入String表示的所有字符：<code>void write(String s)</code>。</li>
</ul>
<h3 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h3><p><code>FileWriter</code>就是向文件中写入字符流的<code>Writer</code>。它的使用方法和<code>FileReader</code>类似</p>
<h3 id="CharArrayWriter"><a href="#CharArrayWriter" class="headerlink" title="CharArrayWriter"></a>CharArrayWriter</h3><p><code>CharArrayWriter</code>可以在内存中创建一个<code>Writer</code>，它的作用实际上是构造一个缓冲区，可以写入<code>char</code>，最后得到写入的<code>char[]</code>数组，这和<code>ByteArrayOutputStream</code>非常类似</p>
<h3 id="StringWriter"><a href="#StringWriter" class="headerlink" title="StringWriter"></a>StringWriter</h3><p><code>StringWriter</code>也是一个基于内存的<code>Writer</code>，它和<code>CharArrayWriter</code>类似。实际上，<code>StringWriter</code>在内部维护了一个<code>StringBuffer</code>，并对外提供了<code>Writer</code>接口。</p>
<h3 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h3><p>除了<code>CharArrayWriter</code>和<code>StringWriter</code>外，普通的Writer实际上是基于<code>OutputStream</code>构造的，它接收<code>char</code>，然后在内部自动转换成一个或多个<code>byte</code>，并写入<code>OutputStream</code>。因此，<code>OutputStreamWriter</code>就是一个将任意的<code>OutputStream</code>转换为<code>Writer</code>的转换器。</p>
<h2 id="PrintStream和PrintWriter"><a href="#PrintStream和PrintWriter" class="headerlink" title="PrintStream和PrintWriter"></a>PrintStream和PrintWriter</h2><p><code>PrintStream</code>是一种<code>FilterOutputStream</code>，它在<code>OutputStream</code>的接口上，额外提供了一些写入各种数据类型的方法：</p>
<ul>
<li>写入<code>int</code>：<code>print(int)</code></li>
<li>写入<code>boolean</code>：<code>print(boolean)</code></li>
<li>写入<code>String</code>：<code>print(String)</code></li>
<li>写入<code>Object</code>：<code>print(Object)</code>，实际上相当于<code>print(object.toString())</code></li>
<li>…</li>
</ul>
<p>以及对应的一组<code>println()</code>方法，它会自动加上换行符。</p>
<p>我们经常使用的<code>System.out.println()</code>实际上就是使用<code>PrintStream</code>打印各种数据。其中，<code>System.out</code>是系统默认提供的<code>PrintStream</code>，表示标准输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.print(12345); &#x2F;&#x2F; 输出12345</span><br><span class="line">System.out.print(new Object()); &#x2F;&#x2F; 输出类似java.lang.Object@3c7a835a</span><br><span class="line">System.out.println(&quot;Hello&quot;); &#x2F;&#x2F; 输出Hello并换行</span><br></pre></td></tr></table></figure>

<p><code>System.err</code>是系统默认提供的标准错误输出。</p>
<p><code>PrintStream</code>和<code>OutputStream</code>相比，除了添加了一组<code>print()</code>/<code>println()</code>方法，可以打印各种数据类型，比较方便外，它还有一个额外的优点，就是不会抛出<code>IOException</code>，这样我们在编写代码的时候，就不必捕获<code>IOException</code>。</p>
<h3 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h3><p><code>PrintStream</code>最终输出的总是byte数据，而<code>PrintWriter</code>则是扩展了<code>Writer</code>接口，它的<code>print()</code>/<code>println()</code>方法最终输出的是<code>char</code>数据。</p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>GUI实战-贪吃蛇小游戏</title>
    <url>/2021/01/04/GUI%E5%AE%9E%E6%88%98-%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h2 id="Github仓库地址"><a href="#Github仓库地址" class="headerlink" title="Github仓库地址"></a>Github仓库地址</h2><p><a href="https://github.com/jinyalong/GUI-Snake" target="_blank" rel="noopener">https://github.com/jinyalong/GUI-Snake</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前做过安卓开发实现一个登陆注册界面的东西，完后过了一遍GUI基础知识，模仿别人敲了一个贪食蛇游戏。</p>
<p>主启动类做的事很简单，<code>new</code>一个<code>JFrame</code>对象，位于<code>swing</code>下，然后设置窗口标题，位置，大小，可见性，不可拉伸，以及添加默认的关闭操作。然后把游戏面板添加到窗口中。区别于<code>AWT</code>中的<code>Frame</code>其实<code>JFrame</code>就是实现了更多方法来供使用。</p>
<h2 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h2><p>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.snake;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 游戏主启动类</span></span><br><span class="line"><span class="comment"> * by：codefriday</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">"贪吃蛇小游戏-codefriday"</span>);</span><br><span class="line">        <span class="comment">//加入游戏面板</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> GamePanel());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置窗口参数</span></span><br><span class="line">        frame.setBounds(<span class="number">10</span>,<span class="number">10</span>,<span class="number">915</span>,<span class="number">720</span>);</span><br><span class="line">        frame.setResizable(<span class="keyword">false</span>);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际看到的效果：</p>
<p><img src="/2021/01/04/GUI%E5%AE%9E%E6%88%98-%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/1.png" alt></p>
<h2 id="游戏面板类"><a href="#游戏面板类" class="headerlink" title="游戏面板类"></a>游戏面板类</h2><p>用到的图片素材：</p>
<p><img src="/2021/01/04/GUI%E5%AE%9E%E6%88%98-%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/2.png" alt></p>
<p>设计思路：定义一个蛇其实就是由若干连起来的正方形块组合起来的。其中每个图片素材大小是25*25像素。因此绘制游戏面板时计算好宽度和高度保证为25的倍数。然后用一个数组保存这个蛇没一个元素的坐标。再用定时器控制页面的刷新，此时小蛇就能动起来了。</p>
<p>然后再加上判定系统以及积分系统，最后整个游戏就完成了。</p>
<p>首先，自己定义一个游戏面板类，为了避免代码冗余，直接继承<code>swing</code>包下的<code>JPanel</code>类，然后需要实现键盘交互，即上下左右控制小蛇移动，以及空格键控制游戏启停。</p>
<h3 id="面板初始化"><a href="#面板初始化" class="headerlink" title="面板初始化"></a>面板初始化</h3><p>面板其实就分两块，第一块即头部logo以及显示积分。然后下面绘制一个大小为850*600的矩形当作小蛇可以移动的背景。</p>
<p>由之前一个元素大小25<em>25可推算此处最多可容纳34\</em>24个元素。</p>
<p>由于需要用到图片素材，因此写一个数据中心类。取得图片路径后全部封装成<code>ImageIcon</code>就可直接调用其中的<code>paintIcon</code>方法直接绘制出图片。</p>
<h3 id="数据中心类"><a href="#数据中心类" class="headerlink" title="数据中心类"></a>数据中心类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.snake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    public static URL headerURL = Data.class.getResource("statics/header.png");</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon header = <span class="keyword">new</span> ImageIcon(headerURL);</span><br><span class="line"></span><br><span class="line">    public static URL bodyURL = Data.class.getResource("statics/body.png");</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon body = <span class="keyword">new</span> ImageIcon(bodyURL);</span><br><span class="line"></span><br><span class="line">    public static URL foodURL = Data.class.getResource("statics/food.png");</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon food = <span class="keyword">new</span> ImageIcon(foodURL);</span><br><span class="line"></span><br><span class="line">    public static URL upURL = Data.class.getResource("statics/up.png");</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon up = <span class="keyword">new</span> ImageIcon(upURL);</span><br><span class="line"></span><br><span class="line">    public static URL downURL = Data.class.getResource("statics/down.png");</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon down = <span class="keyword">new</span> ImageIcon(downURL);</span><br><span class="line"></span><br><span class="line">    public static URL leftURL = Data.class.getResource("statics/left.png");</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon left = <span class="keyword">new</span> ImageIcon(leftURL);</span><br><span class="line"></span><br><span class="line">    public static URL rightURL = Data.class.getResource("statics/right.png");</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon right = <span class="keyword">new</span> ImageIcon(rightURL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="绘制静态面板"><a href="#绘制静态面板" class="headerlink" title="绘制静态面板"></a>绘制静态面板</h3><p>直接重写了继承的<code>JPanel</code>类中<code>paintComponent</code>方法</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">super</span>.paintComponent(g);<span class="comment">//清屏</span></span><br><span class="line">     <span class="comment">//画游戏静态面板</span></span><br><span class="line">     <span class="keyword">this</span>.setBackground(Color.white);</span><br><span class="line">     Data.header.paintIcon(<span class="keyword">this</span>,g,<span class="number">25</span>,<span class="number">11</span>);</span><br><span class="line">     g.fillRect(<span class="number">25</span>,<span class="number">75</span>,<span class="number">850</span>,<span class="number">600</span>);</span><br></pre></td></tr></table></figure>

<p>此时看到的效果应该是上面一个logo，下面一个黑色矩形。</p>
<h3 id="初始化一条小蛇"><a href="#初始化一条小蛇" class="headerlink" title="初始化一条小蛇"></a>初始化一条小蛇</h3><p>用来存蛇的数据结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存每一节蛇的坐标</span></span><br><span class="line">   <span class="keyword">int</span> DataX[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">820</span>];</span><br><span class="line">   <span class="keyword">int</span> DataY[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">820</span>];</span><br><span class="line"><span class="keyword">int</span> length;<span class="comment">//蛇的长度</span></span><br></pre></td></tr></table></figure>

<p>初始化时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">length = <span class="number">3</span>;</span><br><span class="line">DataX[<span class="number">0</span>] = <span class="number">100</span>; DataY[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">   DataX[<span class="number">1</span>] = <span class="number">75</span>; DataY[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line">   DataX[<span class="number">2</span>] = <span class="number">50</span>; DataY[<span class="number">2</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>默认长度为3的一条小蛇就出现了。</p>
<p>需要用到其他一些属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> IsStart;<span class="comment">//游戏状态，默认false，未开始</span></span><br><span class="line">   <span class="keyword">boolean</span> IsOver;<span class="comment">//是否失败</span></span><br><span class="line">   <span class="keyword">int</span> length;<span class="comment">//蛇的长度</span></span><br><span class="line">   <span class="keyword">int</span> fx;<span class="comment">//蛇的方向，↑0 →1 ↓2 ←3</span></span><br><span class="line">   <span class="keyword">int</span> FoodX,FoodY;<span class="comment">//食物位置</span></span><br><span class="line">   <span class="keyword">int</span> score;<span class="comment">//得分</span></span><br><span class="line">   Random random = <span class="keyword">new</span> Random();</span><br><span class="line">   Timer timer = <span class="keyword">new</span> Timer(<span class="number">200</span>,<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>

<h3 id="实现KeyListener接口"><a href="#实现KeyListener接口" class="headerlink" title="实现KeyListener接口"></a>实现<code>KeyListener</code>接口</h3><p>必须重写三个方法，但实际只用到一个，因此重写如下：</p>
<p>主要监听按下上下左右改变蛇头的方向，以及空格控制重开或者暂停继续游戏。</p>
<p>这里改变方向的判断逻辑，蛇头方向不能一次改变超过90°，比如开始朝上，按<code>↓</code>时不生效。</p>
<p>具体实现代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int fx;&#x2F;&#x2F;蛇的方向，↑0 →1 ↓2 ←3</span><br><span class="line">boolean IsStart;&#x2F;&#x2F;游戏状态，默认false，未开始</span><br><span class="line">boolean IsOver;&#x2F;&#x2F;是否失败</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//键盘监听事件接口中的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> keyCode = e.getKeyCode();</span><br><span class="line">        <span class="keyword">switch</span> (keyCode)&#123;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.VK_SPACE:</span><br><span class="line">                <span class="keyword">if</span>(IsOver)&#123;</span><br><span class="line">                    init();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    IsStart = !IsStart;</span><br><span class="line">                &#125;</span><br><span class="line">                repaint();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.VK_UP:</span><br><span class="line">                <span class="keyword">if</span>(IsStart)&#123;</span><br><span class="line">                    fx = (fx==<span class="number">2</span>?fx:<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.VK_DOWN:</span><br><span class="line">                <span class="keyword">if</span>(IsStart)&#123;</span><br><span class="line">                    fx = (fx==<span class="number">0</span>?fx:<span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.VK_LEFT:</span><br><span class="line">                <span class="keyword">if</span>(IsStart)&#123;</span><br><span class="line">                    fx = (fx==<span class="number">1</span>?fx:<span class="number">3</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.VK_RIGHT:</span><br><span class="line">                <span class="keyword">if</span>(IsStart)&#123;</span><br><span class="line">                    fx = (fx==<span class="number">3</span>?fx:<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>事件监听本质就是每隔固定时间会刷新一次。因此实现<code>ActionListener</code>接口，其中只有一个<code>actionPerformed</code>方法，把小蛇移动以及结果判定，计分都写在其中，配合定时器，调用<code>repaint</code>方法重画，就实现动画了。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//事件监听----通过固定时间刷新</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(IsStart)&#123;</span><br><span class="line">            <span class="keyword">if</span>(FoodX == DataX[<span class="number">0</span>] &amp;&amp; FoodY == DataY[<span class="number">0</span>])&#123;<span class="comment">//吃食物</span></span><br><span class="line">                length++;</span><br><span class="line">                score += <span class="number">10</span>;</span><br><span class="line">                <span class="comment">//重新生成食物</span></span><br><span class="line">                FoodX = <span class="number">25</span> + <span class="number">25</span>*(random.nextInt(<span class="number">34</span>));</span><br><span class="line">                FoodY = <span class="number">75</span> + <span class="number">25</span>*(random.nextInt(<span class="number">24</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = length-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                DataX[i] = DataX[i-<span class="number">1</span>];</span><br><span class="line">                DataY[i] = DataY[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (fx)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    DataY[<span class="number">0</span>] = (DataY[<span class="number">0</span>]==<span class="number">75</span>?<span class="number">650</span>:DataY[<span class="number">0</span>]-<span class="number">25</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    DataX[<span class="number">0</span>] = (DataX[<span class="number">0</span>]==<span class="number">850</span>?<span class="number">25</span>:DataX[<span class="number">0</span>]+<span class="number">25</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    DataY[<span class="number">0</span>] = (DataY[<span class="number">0</span>]==<span class="number">650</span>?<span class="number">75</span>:DataY[<span class="number">0</span>]+<span class="number">25</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    DataX[<span class="number">0</span>] = (DataX[<span class="number">0</span>]==<span class="number">25</span>?<span class="number">850</span>:DataX[<span class="number">0</span>]-<span class="number">25</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(DataX[<span class="number">0</span>] == DataX[i] &amp;&amp; DataY[<span class="number">0</span>] == DataY[i])&#123;</span><br><span class="line">                    IsOver = <span class="keyword">true</span>;</span><br><span class="line">                    IsStart = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            repaint();<span class="comment">//重画</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length&gt;<span class="number">20</span>)&#123;</span><br><span class="line">            timer.setDelay(<span class="number">50</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(length&gt;<span class="number">15</span>)&#123;</span><br><span class="line">            timer.setDelay(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(length&gt;<span class="number">5</span>)&#123;</span><br><span class="line">            timer.setDelay(<span class="number">150</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        timer.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="完善paintComponent，游戏面板类完整代码"><a href="#完善paintComponent，游戏面板类完整代码" class="headerlink" title="完善paintComponent，游戏面板类完整代码"></a>完善<code>paintComponent</code>，游戏面板类完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codefriday.snake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">KeyListener</span>, <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存每一节蛇的坐标</span></span><br><span class="line">    <span class="keyword">int</span> DataX[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">820</span>];</span><br><span class="line">    <span class="keyword">int</span> DataY[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">820</span>];</span><br><span class="line">    <span class="keyword">boolean</span> IsStart;<span class="comment">//游戏状态，默认false，未开始</span></span><br><span class="line">    <span class="keyword">boolean</span> IsOver;<span class="comment">//是否失败</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//蛇的长度</span></span><br><span class="line">    <span class="keyword">int</span> fx;<span class="comment">//蛇的方向，↑0 →1 ↓2 ←3</span></span><br><span class="line">    <span class="keyword">int</span> FoodX,FoodY;<span class="comment">//食物位置</span></span><br><span class="line">    <span class="keyword">int</span> score;<span class="comment">//得分</span></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    Timer timer = <span class="keyword">new</span> Timer(<span class="number">200</span>,<span class="keyword">this</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePanel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">this</span>.setFocusable(<span class="keyword">true</span>);<span class="comment">//获得焦点事件</span></span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(<span class="keyword">this</span>);</span><br><span class="line">        timer.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        fx = <span class="number">1</span>;</span><br><span class="line">        length = <span class="number">3</span>;</span><br><span class="line">        IsStart = <span class="keyword">false</span>;</span><br><span class="line">        IsOver = <span class="keyword">false</span>;</span><br><span class="line">        score = <span class="number">0</span>;</span><br><span class="line">        DataX[<span class="number">0</span>] = <span class="number">100</span>; DataY[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">        DataX[<span class="number">1</span>] = <span class="number">75</span>; DataY[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line">        DataX[<span class="number">2</span>] = <span class="number">50</span>; DataY[<span class="number">2</span>] = <span class="number">100</span>;</span><br><span class="line">        FoodX = <span class="number">25</span> + <span class="number">25</span>*(random.nextInt(<span class="number">34</span>));</span><br><span class="line">        FoodY = <span class="number">75</span> + <span class="number">25</span>*(random.nextInt(<span class="number">24</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paintComponent(g);<span class="comment">//清屏</span></span><br><span class="line">        <span class="comment">//画游戏静态面板</span></span><br><span class="line">        <span class="keyword">this</span>.setBackground(Color.white);</span><br><span class="line">        Data.header.paintIcon(<span class="keyword">this</span>,g,<span class="number">25</span>,<span class="number">11</span>);</span><br><span class="line">        g.fillRect(<span class="number">25</span>,<span class="number">75</span>,<span class="number">850</span>,<span class="number">600</span>);</span><br><span class="line">        <span class="comment">//画积分</span></span><br><span class="line">        g.setColor(<span class="keyword">new</span> Color(<span class="number">145</span>, <span class="number">19</span>, <span class="number">173</span>, <span class="number">255</span>));</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>,Font.BOLD,<span class="number">18</span>));</span><br><span class="line">        g.drawString(<span class="string">"长度 "</span>+length,<span class="number">750</span>,<span class="number">30</span>);</span><br><span class="line">        g.drawString(<span class="string">"分数 "</span>+score,<span class="number">750</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//画食物</span></span><br><span class="line">        Data.food.paintIcon(<span class="keyword">this</span>,g,FoodX,FoodY);</span><br><span class="line">        <span class="comment">//画蛇</span></span><br><span class="line">        <span class="keyword">switch</span> (fx)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                Data.up.paintIcon(<span class="keyword">this</span>,g,DataX[<span class="number">0</span>],DataY[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                Data.right.paintIcon(<span class="keyword">this</span>,g,DataX[<span class="number">0</span>],DataY[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                Data.down.paintIcon(<span class="keyword">this</span>,g,DataX[<span class="number">0</span>],DataY[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                Data.left.paintIcon(<span class="keyword">this</span>,g,DataX[<span class="number">0</span>],DataY[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; length;i++)&#123;</span><br><span class="line">            Data.body.paintIcon(<span class="keyword">this</span>,g,DataX[i],DataY[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!IsStart&amp;&amp;!IsOver)&#123;</span><br><span class="line">            g.setColor(Color.white);</span><br><span class="line">            g.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>,Font.BOLD,<span class="number">40</span>));</span><br><span class="line">            g.drawString(<span class="string">"按下空格开始游戏!"</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(IsOver)&#123;</span><br><span class="line">            g.setColor(Color.red);</span><br><span class="line">            g.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>,Font.BOLD,<span class="number">40</span>));</span><br><span class="line">            g.drawString(<span class="string">"gg,按下空格重新开始!"</span>,<span class="number">250</span>,<span class="number">300</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//键盘监听事件接口中的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> keyCode = e.getKeyCode();</span><br><span class="line">        <span class="keyword">switch</span> (keyCode)&#123;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.VK_SPACE:</span><br><span class="line">                <span class="keyword">if</span>(IsOver)&#123;</span><br><span class="line">                    init();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    IsStart = !IsStart;</span><br><span class="line">                &#125;</span><br><span class="line">                repaint();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.VK_UP:</span><br><span class="line">                <span class="keyword">if</span>(IsStart)&#123;</span><br><span class="line">                    fx = (fx==<span class="number">2</span>?fx:<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.VK_DOWN:</span><br><span class="line">                <span class="keyword">if</span>(IsStart)&#123;</span><br><span class="line">                    fx = (fx==<span class="number">0</span>?fx:<span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.VK_LEFT:</span><br><span class="line">                <span class="keyword">if</span>(IsStart)&#123;</span><br><span class="line">                    fx = (fx==<span class="number">1</span>?fx:<span class="number">3</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.VK_RIGHT:</span><br><span class="line">                <span class="keyword">if</span>(IsStart)&#123;</span><br><span class="line">                    fx = (fx==<span class="number">3</span>?fx:<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事件监听----通过固定时间刷新</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(IsStart)&#123;</span><br><span class="line">            <span class="keyword">if</span>(FoodX == DataX[<span class="number">0</span>] &amp;&amp; FoodY == DataY[<span class="number">0</span>])&#123;<span class="comment">//吃食物</span></span><br><span class="line">                length++;</span><br><span class="line">                score += <span class="number">10</span>;</span><br><span class="line">                <span class="comment">//重新生成食物</span></span><br><span class="line">                FoodX = <span class="number">25</span> + <span class="number">25</span>*(random.nextInt(<span class="number">34</span>));</span><br><span class="line">                FoodY = <span class="number">75</span> + <span class="number">25</span>*(random.nextInt(<span class="number">24</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = length-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                DataX[i] = DataX[i-<span class="number">1</span>];</span><br><span class="line">                DataY[i] = DataY[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (fx)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    DataY[<span class="number">0</span>] = (DataY[<span class="number">0</span>]==<span class="number">75</span>?<span class="number">650</span>:DataY[<span class="number">0</span>]-<span class="number">25</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    DataX[<span class="number">0</span>] = (DataX[<span class="number">0</span>]==<span class="number">850</span>?<span class="number">25</span>:DataX[<span class="number">0</span>]+<span class="number">25</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    DataY[<span class="number">0</span>] = (DataY[<span class="number">0</span>]==<span class="number">650</span>?<span class="number">75</span>:DataY[<span class="number">0</span>]+<span class="number">25</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    DataX[<span class="number">0</span>] = (DataX[<span class="number">0</span>]==<span class="number">25</span>?<span class="number">850</span>:DataX[<span class="number">0</span>]-<span class="number">25</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(DataX[<span class="number">0</span>] == DataX[i] &amp;&amp; DataY[<span class="number">0</span>] == DataY[i])&#123;</span><br><span class="line">                    IsOver = <span class="keyword">true</span>;</span><br><span class="line">                    IsStart = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            repaint();<span class="comment">//重画</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length&gt;<span class="number">20</span>)&#123;</span><br><span class="line">            timer.setDelay(<span class="number">50</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(length&gt;<span class="number">15</span>)&#123;</span><br><span class="line">            timer.setDelay(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(length&gt;<span class="number">5</span>)&#123;</span><br><span class="line">            timer.setDelay(<span class="number">150</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        timer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="游戏实现的细节"><a href="#游戏实现的细节" class="headerlink" title="游戏实现的细节"></a>游戏实现的细节</h3><ul>
<li>小蛇从某一边界出去从另外一个边界出来，也可把边界处理部分代码改成判定失败就不可出边界！</li>
<li>小蛇长度变长，速度会变快，实现原理：修改定时器间隔</li>
</ul>
<h2 id="测试如下"><a href="#测试如下" class="headerlink" title="测试如下"></a>测试如下</h2><p><img src="/2021/01/04/GUI%E5%AE%9E%E6%88%98-%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/3.png" alt></p>
<p><img src="/2021/01/04/GUI%E5%AE%9E%E6%88%98-%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/4.png" alt></p>
<p><img src="/2021/01/04/GUI%E5%AE%9E%E6%88%98-%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/5.png" alt></p>
<h2 id="打包成jar包"><a href="#打包成jar包" class="headerlink" title="打包成jar包"></a>打包成jar包</h2><p><img src="/2021/01/04/GUI%E5%AE%9E%E6%88%98-%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/6.png" alt></p>
<p>选择主启动函数。打包成<code>jar</code>包。</p>
]]></content>
      <categories>
        <category>实战项目</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap和ConcurrentHashMap</title>
    <url>/2021/01/02/HashMap%E5%92%8CConcurrentHashMap/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>JavaSE</code>基础知识也学了大部分了，发现Java中有一个数据结构有着举足轻重的重用，什么面试必考啊，你必须掌握啊<del>~</del>，那就是<code>HashMap</code>，完后谈到这玩意，都拿1.7版本JDK和1.8版本JDK版本作比较。大多数学Java的听说过了，1.7嘛底层数据结构数组+链表，1.8多了个红黑树。完后1.7中它是线程不安全的，它查找效率可能会很低，冲突解决策略是简单用链表把冲突的节点串起来，那必然不会有很高效率，<code>O(n)</code>查找。因此1.8之后就加了红黑树，就冲突链表长度超过一个阈值，给他把链表转红黑树结构，但他依旧是线程不安全的。红黑树就是一个不是非常严格的平衡二叉树嘛，查找效率<code>O(logn)</code>级别。</p>
<p>都是线程不安全，有啥区别：</p>
<p>1.7中采用的是头插法，即插在链表的都节点处，而1.8是尾插法，这所谓头插尾插都是在扩容时的操作。1.7多线程头插法可能会导致出现环形链表。</p>
<p>线程安全的<code>HashMap</code>在<code>java.util.concurrent</code>包下</p>
<p>以上都是看了很多博客、视频总结得来的东西。完后我自己用的JDK15也去读了读源码，但是感觉还是不够，于是我下载了1.7版本JDK和1.8版本JDK来读一下源码。</p>
<p><img src="/2021/01/02/HashMap%E5%92%8CConcurrentHashMap/1.png" alt></p>
<p>接下来分四个部分读源码，1.7版本<code>HashMap</code>，1.8版本<code>Hashmap</code>，1.7版本<code>ConcurrentHashMap</code></p>
<p>,1.8版本<code>ConcurrentHashMap</code>。</p>
<h2 id="JDK1-7版本HashMap"><a href="#JDK1-7版本HashMap" class="headerlink" title="JDK1.7版本HashMap"></a>JDK1.7版本HashMap</h2><p>先看一下如何存键值对，列出<code>static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt;</code>属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> K key;</span><br><span class="line">V value;</span><br><span class="line">Entry&lt;K,V&gt; next;</span><br><span class="line"><span class="keyword">int</span> hash;</span><br></pre></td></tr></table></figure>

<p><code>next</code>主要用来串出现冲突的键值对。单向链表处理冲突！</p>
<h3 id="new-构造一个HashMap对象"><a href="#new-构造一个HashMap对象" class="headerlink" title="new-构造一个HashMap对象"></a>new-构造一个HashMap对象</h3><p>借助强大的IDEA来直接导入1.7版本JDK版本</p>
<p><img src="/2021/01/02/HashMap%E5%92%8CConcurrentHashMap/2.png" alt></p>
<p>直接写<code>new HashMap;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(<span class="number">1</span>,<span class="string">"code"</span>);</span><br><span class="line">        hashMap.put(<span class="number">2</span>,<span class="string">"friday"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Ctrl+鼠标左键</code>直接进到<code>HashMap</code>源码，使用快捷键<code>Alt+7</code>查看这个类中的一些方法以及属性</p>
<p><img src="/2021/01/02/HashMap%E5%92%8CConcurrentHashMap/3.png" alt></p>
<p>可以看到有4种构造方法，完后再看看其中的一些属性，直接上源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其实源码中的注释已经解释得很清楚，中文备注一下</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line">	<span class="comment">//默认初始容量，必须是2的幂次，MUST be a power of two.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">	<span class="comment">//最大容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line">	<span class="comment">//默认加载因子，0.75</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;;</span><br><span class="line">	<span class="comment">//用来比较判断table是否为空用的，后面代码会体现！</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br><span class="line">	<span class="comment">//存储底层数据结构：数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line">	<span class="comment">//已经存的key-value数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line">	<span class="comment">//阈值，容量*加载因子得的，存的键值对超过这个阈值就要进行数组扩容操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">	<span class="comment">//加载因子</span></span><br></pre></td></tr></table></figure>

<p>根据我写的代码，我调用了无参构造，查看源码调用方法的过程如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment">     * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//就给默认容量16，加载因子0.75，然后调用有参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)<span class="comment">//1.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<span class="comment">//2.</span></span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))<span class="comment">//3.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        threshold = initialCapacity;<span class="comment">//此时没有插入键值对，阈值==容量</span></span><br><span class="line">        init();<span class="comment">//空函数啥也没做</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.第一个if判断，传入容量值为负数，抛出一个异常</li>
<li>2.第二个if判断，传入容量超过允许最大容量，就按最大容量来</li>
<li>3.第三个if判断，加载因子也可以自己给，判断一下是否0-1范围且是一个有效的数，不是就抛出异常</li>
</ul>
<p>自此可以得到，调用构造函数new一个<code>HashMap</code>对象，实际用来存键值对的数组并没有创建。</p>
<p>自此，<code>new</code>操作结束，接下来肯定就是往里存键值对，调用的是<code>put</code>方法</p>
<h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><p><strong>put执行流程如下：</strong></p>
<ul>
<li>判断数组是否已经创建</li>
<li>判断key是否为空，针对<code>key==null</code>插入有一个方法</li>
<li>计算哈希值并找一个数组下标去存</li>
<li>先判断key是否已经存在，存在就更新value值，返回旧的value</li>
<li>不存在就调用<code>addEntry</code>插入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;<span class="comment">//判断数组是否为空</span></span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)<span class="comment">//key为空，调用一个插入key==null的方法，由此可知可以存key为null的键值对</span></span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);<span class="comment">//计算一下key的hash值</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);<span class="comment">//根据哈希值取得应该存在数组中那个位置</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="comment">//遍历一个数组下标对应的链表，如果key已经存在，更新Value并返回旧的Value</span></span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;<span class="comment">//修改次数+1</span></span><br><span class="line">    addEntry(hash, key, value, i);<span class="comment">//实际插入键值对的方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到此，有两处需要拓展！</p>
<h4 id="put方法扩展indexFor"><a href="#put方法扩展indexFor" class="headerlink" title="put方法扩展indexFor"></a>put方法扩展<code>indexFor</code></h4><p><strong>注意：看源码时不能看到一个方法中调用了一个方法就马上点进去看，你会发现，可能一直点，点个好几层都没问题，完后回来你就不知道自己是要干嘛了。</strong></p>
<p>人家写的代码的函数一般都<strong>见名知意</strong>。重要的方法，看完整体点进去验证一下就行<del>~</del></p>
<p>比如这里得去看看<code>indexFor</code>做了些啥，这会解释了为什么数组容量必须2的幂次，扩容也必须2倍扩容~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns index for hash code h.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span></span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>简单的做了一个按位与运算。正常把元素映射到数组，想到的映射方法肯定是用取余操作模上数组长度，这是一种相对平均的散列算法。实际这个地方本质就是模数组长度，但是必须保证<code>length</code>是2的幂次才能达到这个效果。举个例子：</p>
<p><img src="/2021/01/02/HashMap%E5%92%8CConcurrentHashMap/4.png" alt></p>
<p>数组长度保证2的幂次，就可用按位与代替取模操作，位运算的速度比取模运算快很多很多~，可以用个计数程序测试一下。</p>
<h4 id="put方法扩展addEntry"><a href="#put方法扩展addEntry" class="headerlink" title="put方法扩展addEntry"></a>put方法扩展<code>addEntry</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**传来的参数</span></span><br><span class="line"><span class="comment">*<span class="doctag">@hash</span>：key的哈希值</span></span><br><span class="line"><span class="comment">*key,value即键值对</span></span><br><span class="line"><span class="comment">*<span class="doctag">@bucketIndex</span>：键值对需要插入的桶的索引，就是数组索引，数组每一格当作一个桶</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;<span class="comment">//如果存的键值对已经超过阈值，就需要扩容</span></span><br><span class="line">        resize(<span class="number">2</span> * table.length);<span class="comment">//扩容，2倍扩容，后续分析源码</span></span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;<span class="comment">//重新计算一下key的hash值</span></span><br><span class="line">        bucketIndex = indexFor(hash, table.length);<span class="comment">//根据hash值重新找应该放在数组哪个位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);<span class="comment">//实际放入数组的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还得点一层<code>createEntry</code>，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];<span class="comment">//把同中键值对取出来</span></span><br><span class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);<span class="comment">//把新键值对加进入，并把e接到后面，这就是头插法！！！</span></span><br><span class="line">        size++;<span class="comment">//键值对计数器+1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>画个图演示一下——头插法</p>
<p><img src="/2021/01/02/HashMap%E5%92%8CConcurrentHashMap/5.png" alt></p>
<p><strong>补充：key==null时默认插入数组下标为0的地方</strong></p>
<h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><p>上源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)<span class="comment">//key为null调用对应方法</span></span><br><span class="line">            <span class="keyword">return</span> getForNullKey();</span><br><span class="line">        Entry&lt;K,V&gt; entry = getEntry(key);<span class="comment">//获取整个Entry对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();<span class="comment">//如果Entry对象为空表示没有这个映射，否则返回value值</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>getEntry</code>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];<span class="comment">//找到key对应数组中的位置</span></span><br><span class="line">             e != <span class="keyword">null</span>;</span><br><span class="line">             e = e.next) &#123;<span class="comment">//遍历桶，也就是遍历链表</span></span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> e;<span class="comment">//找到key返回Entry对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//没找到</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>相对简单，主要还是因为数组+链表实现<code>HashMap</code>数据结构并不复杂。</p>
<p>接下来必须看看扩容操作了！</p>
<h3 id="resize方法"><a href="#resize方法" class="headerlink" title="resize方法"></a>resize方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        Entry[] oldTable = table;<span class="comment">//拿个指针指向原来的数组</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = oldTable.length;<span class="comment">//记录一下原来数组大小</span></span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;<span class="comment">//原来容量已经达到最大值</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;<span class="comment">//把阈值给扩大一下，没办法，数组不允许再扩大了</span></span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//返回</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];<span class="comment">//新数组，原来的两倍</span></span><br><span class="line">        transfer(newTable, initHashSeedAsNeeded(newCapacity));<span class="comment">//把老数组数据转移到新数组</span></span><br><span class="line">        table = newTable;<span class="comment">//更新一下数组</span></span><br><span class="line">        threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);<span class="comment">//更新一下阈值</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重点那肯定是在<code>transfer</code>，这也是并发操作导致双向链表的地方！！！源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                <span class="keyword">if</span> (rehash) &#123;<span class="comment">//是否需要重新计算hash值</span></span><br><span class="line">                    e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);<span class="comment">//重新计算数组下标</span></span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                e = next;<span class="comment">//一样的的头插法重新放进去</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="并发出现环形链表"><a href="#并发出现环形链表" class="headerlink" title="并发出现环形链表"></a>并发出现环形链表</h3><p><img src="/2021/01/02/HashMap%E5%92%8CConcurrentHashMap/6.png" alt></p>
<p>下一次get查找这个桶时，死循环在里面不出来了！</p>
<h2 id="JDK1-8版本HashMap"><a href="#JDK1-8版本HashMap" class="headerlink" title="JDK1.8版本HashMap"></a>JDK1.8版本HashMap</h2><p>进入Project Structure切换JDK版本：</p>
<p><img src="/2021/01/02/HashMap%E5%92%8CConcurrentHashMap/7.png" alt></p>
<h3 id="数据结构和辅助函数改变"><a href="#数据结构和辅助函数改变" class="headerlink" title="数据结构和辅助函数改变"></a>数据结构和辅助函数改变</h3><p>点进源码后，存储一个键值对的数据结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//只列出属性</span></span><br></pre></td></tr></table></figure>

<p>名字都改了，<code>Entry</code>改成<code>Node</code>，内容倒是没变。既然引入了红黑树，那肯定由红黑树节点对应的数据结构：(只列出属性)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">       TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">       TreeNode&lt;K,V&gt; left;</span><br><span class="line">       TreeNode&lt;K,V&gt; right;</span><br><span class="line">       TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">       <span class="keyword">boolean</span> red;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>hash函数也改了：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.7版本直接获取key的hashCode，现在把hashcode高位和低位做了一下异或操作，这玩意叫扰动函数</span></span><br></pre></td></tr></table></figure>

<p><strong>扰动函数作用：</strong>你求于的时候包含了高16位和第16位的特性 也就是说你所计算出来的hash值包含从而使得你的hash值更加不确定 来降低碰撞的概率。</p>
<p>构造函数其实本质和1.7版本还是差不多。有很大不同的地方还是分析put，get，resize方法</p>
<h3 id="put方法-1"><a href="#put方法-1" class="headerlink" title="put方法"></a>put方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接调用了putVal</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)<span class="comment">//如果数组还未创建</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)<span class="comment">//根据hash值找到对应存放的数组下标</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);<span class="comment">//如果该位置空，直接新建一个链表节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//否则就遍历一下链表，看key是否有重复</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)<span class="comment">//如果已经树化，调用红黑树的插入方法</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">//链表的插入方法</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);<span class="comment">//链表长度超过阈值，树化</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// key已经存在，覆盖value并返回原来的</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();<span class="comment">//判断一下是否需要扩容+</span></span><br><span class="line">    </span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>putVal</code>插入流程：</p>
<ul>
<li>判断数组是否已经创建</li>
<li>根据hash值找到对应存放的数组下标</li>
<li>分三种情况<ul>
<li>该位置为空</li>
<li>红黑树的插入</li>
<li>链表的插入</li>
</ul>
</li>
<li>插入如果是覆盖就返回旧值</li>
<li>判断一下是否达到阈值，然后扩容一下</li>
</ul>
<h3 id="get方法-1"><a href="#get方法-1" class="headerlink" title="get方法"></a>get方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用了getNode方法</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;<span class="comment">//先判断表不为空，并根据hash索引到数组下标不为空</span></span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node先检查第一个</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)<span class="comment">//红黑树的查找方法</span></span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">do</span> &#123;<span class="comment">//否则就是链表的查找方法</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//找不到返回null</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>执行流程也相对简单，分红黑树和链表的查找方法，重点在扩容（注：我只分析了链表，为了对比1.7版本）</p>
<h3 id="resize方法-1"><a href="#resize方法-1" class="headerlink" title="resize方法"></a>resize方法</h3><p>源码挺长：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;<span class="comment">//保存一下原来的表，不再需要传容量大小的参数，区别于1.7</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;<span class="comment">//获取原来的容量</span></span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;<span class="comment">//原来的阈值</span></span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="comment">//如果容量已经超过最大容量</span></span><br><span class="line">                threshold = Integer.MAX_VALUE;<span class="comment">//只能扩大阈值</span></span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                <span class="comment">//扩大两倍容量并判断是否小于允许的最大容量，原来的容量是否大于等于16</span></span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold，都满足就扩大阈值，阈值在new的时候没传参数其实就给了默认</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line">   		<span class="comment">//上面主要是更新容量值和阈值的值</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];<span class="comment">//创建新表</span></span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;<span class="comment">//遍历旧表，准备数据迁移</span></span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;<span class="comment">//如果旧桶中只有一个元素</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)<span class="comment">//如果是红黑树节点</span></span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order//链表，保留原来的顺序，也就是尾插法</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重点分析链表数据迁移的过程，定义了四个链表节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>其实数据迁移过程，无非是把原来链表拆分成两个链表（不考虑红黑树），而且两个链表中的数据根据哈希值和<code>oldlength-1</code>求与之后得到的数组索引一定满足以下关系：</p>
<p><code>OldIndex == OldIndex 或 OldIndex+oldlength</code></p>
<p>分出去到更高索引的其实就是多看一个二进制位，比如原来容量是8，现在看看第4位（从低到高从1开始计），如果是1那就分到更高索引的数组去。因此定义了一个<code>loHead</code>和<code>hiHead</code>两个链表。接下来模拟操作以一下</p>
<p>do-while循环完之后：</p>
<p><img src="/2021/01/02/HashMap%E5%92%8CConcurrentHashMap/8.png" alt></p>
<p>接下来两个if判断：就是把链表放到新数组中去：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">	loTail.next = <span class="keyword">null</span>;</span><br><span class="line">	newTab[j] = loHead;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">	hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">	newTab[j + oldCap] = hiHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="并发操作出现的问题"><a href="#并发操作出现的问题" class="headerlink" title="并发操作出现的问题"></a>并发操作出现的问题</h3><p>没有任何同步机制，多线程肯定会出现关键节点线程抢占，比如其中<code>size</code>表示键值对的数目，其他线程可能对<code>size</code>的副本做出修改还未更新本来的值，那必然会出现多个线程数据覆盖的问题。实际就会出现，并发插入键值对，实际插入数量！=size，这只是一个不严谨的举例，实际自己写个测试程序运行就会抛出并发操作异常。</p>
<h2 id="JDK1-7版本ConcurrentHashMap"><a href="#JDK1-7版本ConcurrentHashMap" class="headerlink" title="JDK1.7版本ConcurrentHashMap"></a>JDK1.7版本ConcurrentHashMap</h2><p>由于目前只有只学习了操作系统导论中的并发，讲的也是C/C++下的，还未学习Java中并发的一些实现进制。只能浅显分析一波<del>~</del></p>
<p>出错以后来改，或者欢迎评论区纠正</p>
<p>首先这是它的结构图：</p>
<p><img src="/2021/01/02/HashMap%E5%92%8CConcurrentHashMap/9.png" alt></p>
<p>为了实现互斥的话，最简单的思路就是只允许一个线程操作哈希表，也就是价格锁，但这样自己用<code>HashMap</code>写好同步代码块就完事了，这东西也就没存在的意义，而且并不是所有线程并发操作哈希表都是会导致出错的，因此可以考虑把哈希表分成很多段，每个段保证只能一个线程进去操作，那就可以实现真正意义上的并发操作哈希表，JDK1.7中就是利用了分段锁的机制实现互斥。</p>
<h3 id="核心属性以及数据结构"><a href="#核心属性以及数据结构" class="headerlink" title="核心属性以及数据结构"></a>核心属性以及数据结构</h3><p>新增的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br><span class="line"><span class="comment">//默认并发级别，也就是允许多少个线程同时操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_SEGMENT_TABLE_CAPACITY = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//每个段下默认hash表的长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SEGMENTS = <span class="number">1</span> &lt;&lt; <span class="number">16</span>; <span class="comment">// slightly conservative</span></span><br><span class="line"><span class="comment">//允许最大的段数量</span></span><br></pre></td></tr></table></figure>

<p>数据结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Set&lt;K&gt; keySet;</span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"><span class="keyword">transient</span> Collection&lt;V&gt; values;</span><br></pre></td></tr></table></figure>

<p>查看<code>Segment</code>类定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>

<p>实现了<code>ReentrantLock</code>，其实就是一种锁的类型。jdk中独占锁的实现除了使用关键字<code>synchronized</code>外,还可以使用<code>ReentrantLock。</code></p>
<p>上面的东西暂时没学到。</p>
<p>本质和<code>HashMap</code>没多大区别，只不过用到了<code>volatile</code>关键字等实现同步互斥。</p>
<p>原理上来说：<code>ConcurrentHashMap</code> 采用了分段锁技术，其中<code>Segment</code>继承于<code>ReentrantLock</code>。不会像<code>HashTable</code>那样不管是<code>put</code>还是 <code>get</code>操作都需要做同步处理，理论上<code>ConcurrentHashMap</code>支持<code>CurrencyLevel</code> (Segment 数组数量)的线程并发。每当一个线程占用锁访问一个<code>Segmen</code>t 时，不会影响到其他的 <code>Segment</code>。</p>
<p>1.7版本解决并发问题之后，但是数组+链表的实现还是会导致查询效率低。</p>
<h2 id="JDK1-8版本ConcurrentHashMap"><a href="#JDK1-8版本ConcurrentHashMap" class="headerlink" title="JDK1.8版本ConcurrentHashMap"></a>JDK1.8版本ConcurrentHashMap</h2><p>在JDK1.8版本丢弃了分段锁。</p>
<p>采用了 <code>CAS + synchronized</code> 来保证并发安全性。</p>
<p><code>CAS</code>全称<code>CompareAndSwap</code>，在操作系统导论中这是操作系统中硬件提供的功能强大的原子操作，来实现锁机制用的。</p>
<p>此处我觉得是差不多的思想，实际上这个操作似乎也是C++写的，调用了C++写的包，因为Java不能去搞底处的内存管理。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.8 在 1.7 的数据结构上做了大的改动，采用红黑树之后可以保证查询效率（<code>O(logn)</code>），甚至取消了<code>ReentrantLock</code>改为了 <code>synchronized</code>，这样可以看出在新版的<code>JDK</code> 中对 <code>synchronized</code>优化是很到位的。</p>
]]></content>
      <categories>
        <category>第一阶段感悟</category>
      </categories>
      <tags>
        <tag>第一阶段感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>编码和字符集</title>
    <url>/2021/01/01/%E7%BC%96%E7%A0%81%E5%92%8C%E5%AD%97%E7%AC%A6%E9%9B%86/</url>
    <content><![CDATA[<h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><p>世界上只有两种人——一种会二进制，一种不会二进制<del>~</del><br>在初学C++时，接触最多的编码就是ASCII码了，全称((American Standard Code for Information Interchange): 美国信息交换标准代码），是老外发明的，老外用的，主要用于显示现代英语和其他西欧语言。</p>
<p>然后C++中的char变量使用的就是ASCII码。用<code>sizeof（char）</code>将会得到<code>1</code>，C++中一个char类型占用一个字节的内存。一字节=8个二进制位。而ASCII码实际只需要7位就可编码，<code>2^7=128</code>，而在标准ASCII中，其最高位(b7)用作奇偶校验位。所谓奇偶校验，是指在代码传送过程中用来检验是否出现错误的一种方法，一般分奇校验和偶校验两种。奇校验规定：正确的代码一个字节中1的个数必须是奇数，若非奇数，则在最高位b7添1；偶校验规定：正确的代码一个字节中1的个数必须是偶数，若非偶数，则在最高位b7添1。</p>
<p><strong>由此引出问题：</strong></p>
<p>都有哪些字符集和编码规则，以及中文怎么输出的，C语言中用char数组是可以正常保存并输出中文的，但似乎有的字会乱码~</p>
<h2 id="字符集-amp-编码"><a href="#字符集-amp-编码" class="headerlink" title="字符集&amp;编码"></a>字符集&amp;编码</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>在显示器上看见的文字、图片等信息在电脑里面其实并不是我们看见的样子，即使你知道所有信息都存储在硬盘里，把它拆开也看不见里面有任何东西，只有些盘片。假设，你用显微镜把盘片放大，会看见盘片表面凹凸不平，凸起的地方被磁化，凹的地方是没有被磁化；凸起的地方代表数字1，凹的地方代表数字0。硬盘只能用0和1来表示所有文字、图片等信息。</p>
<p>因此需要制定一系列大家共同认可和使用的编码规则来把01的组合表示成有意义的信息。而上面Ascii码就是一种规则，比如用二进制<code>0100 0001</code>表示字母<code>A</code>，那么信息交换的时候按照编码规则解码就得到了信息本来的意义。</p>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等。</p>
<h2 id="常用的字符集和字符编码"><a href="#常用的字符集和字符编码" class="headerlink" title="常用的字符集和字符编码"></a>常用的字符集和字符编码</h2><p>常见字符集名称：ASCII字符集、GB2312字符集、BIG5字符集、GB18030字符集、Unicode字符集等。</p>
<h3 id="ASCII字符集-amp-编码"><a href="#ASCII字符集-amp-编码" class="headerlink" title="ASCII字符集&amp;编码"></a>ASCII字符集&amp;编码</h3><p>图片来自百度百科：</p>
<p><img src="/2021/01/01/%E7%BC%96%E7%A0%81%E5%92%8C%E5%AD%97%E7%AC%A6%E9%9B%86/1.png" alt></p>
<p>老外为了表示更多的欧洲常用字符对ASCII进行了扩展，不要在高位当校验位了，ASCII扩展字符集使用8位（bits）表示一个字符，共256字符。ASCII字符集映射到数字编码规则如下图所示：</p>
<p><img src="/2021/01/01/%E7%BC%96%E7%A0%81%E5%92%8C%E5%AD%97%E7%AC%A6%E9%9B%86/2.png" alt></p>
<p>然而中文都不能表示！！！然后来了GBXXXX字符集&amp;编码</p>
<h3 id="GB2312字符集-amp-编码"><a href="#GB2312字符集-amp-编码" class="headerlink" title="GB2312字符集&amp;编码"></a>GB2312字符集&amp;编码</h3><p>计算机是老外发明的嘛，发明之后很长一段时间只是应用于美国及西方一些发达国家，ASCII完全满足他们。</p>
<p>但是现在基本家家户户都有计算机，因此必须设计一套编码规则显示中文。于是专家们把ASCII码127号之后东西取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。而连用两个字符表示一个的符号叫”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</p>
<p>C/C++程序运行时那个黑框输入东西时会提示！</p>
<p>上述编码规则就是<strong>GB2312</strong>。</p>
<p>这也解决了我的一个疑问，以前只是听老师说两个字符表示一个汉字，他是怎么知道什么时候是两个字符连起来表示呢<del>~</del></p>
<h3 id="BIG5字符集-amp-编码"><a href="#BIG5字符集-amp-编码" class="headerlink" title="BIG5字符集&amp;编码"></a>BIG5字符集&amp;编码</h3><p><strong>Big5</strong>，又称为<strong>大五码</strong>或<strong>五大码</strong>，是使用繁体中文（正体中文）社区中最常用的电脑汉字字符集)标准，共收录13,060个汉字。中文码分为内码及交换码两类，Big5属中文内码，知名的中文交换码有CCCII、CNS11643。Big5虽普及于台湾、香港与[澳门等繁体中文通行区，但长期以来并非当地的国家标准，而只是业界标准。倚天中文系统、Windows等主要系统的字符集都是以Big5为基准，但厂商又各自增加不同的造字与造字区，派生成多种不同版本。2003年，Big5被收录到CNS11643中文标准交换码的附录当中，取得了较正式的地位。这个最新版本被称为Big5-2003。</p>
<h2 id="过度"><a href="#过度" class="headerlink" title="过度"></a>过度</h2><p>每个计算机应用广泛的国家都会去制定一套自己的规则，因此肯定会出现一种可能不能做到统一，而现在是互联网时代，<del>相信大家都不止会上国内的网站</del>，懂的都懂，于是一个伟大的创想出现了，Unicode，顾名思义它是一种统一编码的意思，<strong>统一码</strong>、<strong>万国码</strong>、<strong>单一码</strong>、<strong>标准万国码</strong>。</p>
<h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>在计算机科学领域中，<strong>Unicode</strong>（<strong>统一码</strong>、<strong>万国码</strong>、<strong>单一码</strong>、<strong>标准万国码</strong>）是业界的一种标准，它可以使电脑得以体现世界上数十种文字的系统。Unicode 是基于通用字符集（Universal Character Set）的标准来发展，并且同时也以书本的形式对外发表。Unicode 还不断在扩增， 每个新版本插入更多新的字符。直至目前为止的第六版，Unicode 就已经包含了超过十万个字符（在2005年，Unicode 的第十万个字符被采纳且认可成为标准之一）、一组可用以作为视觉参考的代码图表、一套编码方法与一组标准字符编码、一套包含了上标字、下标字等字符特性的枚举等。Unicode 组织（The Unicode Consortium）<strong>是由一个非营利性的机构所运作</strong>，并主导 Unicode 的后续发展，其目标在于：将既有的字符编码方案以Unicode 编码方案来加以取代，特别是既有的方案在多语环境下，皆仅有有限的空间以及不兼容的问题。</p>
<p>Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。目前的Unicode字符分为17组编排，0x0000至0x10FFFF，每组称为平面（Plane），而每平面拥有65536个码位，共1114112个。然而目前只用了少数平面。UTF-8、UTF-16、UTF-32都是将数字转换到程序数据的编码方案。</p>
<p>（<strong>可以这样理解：Unicode是字符集，UTF-32/ UTF-16/ UTF-8是三种字符编码方案。</strong>）</p>
<h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8以字节为单位对Unicode进行编码。从Unicode到UTF-8的编码方式如下：</p>
<table>
<thead>
<tr>
<th align="left"><strong>Unicode编码(十六进制)</strong></th>
<th align="left"><strong>UTF-8 字节流(二进制)</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">000000-00007F</td>
<td align="left">0xxxxxxx</td>
</tr>
<tr>
<td align="left">000080-0007FF</td>
<td align="left">110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td align="left">000800-00FFFF</td>
<td align="left">1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td align="left">010000-10FFFF</td>
<td align="left">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody></table>
<p>UTF-8的特点是对不同范围的字符使用不同长度的编码。对于0x00-0x7F之间的字符，UTF-8编码与ASCII编码完全相同。UTF-8编码的最大长度是4个字节。从上表可以看出，4字节模板有21个x，即可以容纳21位二进制数字。Unicode的最大码位0x10FFFF也只有21位。</p>
<p>例1：“汉”字的Unicode编码是0x6C49。0x6C49在0x0800-0xFFFF之间，使用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将0x6C49写成二进制是：0110 1100 0100 1001， 用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。</p>
<p>例2：Unicode编码0x20C30在0x010000-0x10FFFF之间，使用4字节模板：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。将0x20C30写成21位二进制数字（不足21位就在前面补0）：0 0010 0000 1100 0011 0000，用这个比特流依次代替模板中的x，得到：11110000 10100000 10110000 10110000，即F0 A0 B0 B0。</p>
<h3 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h3><p>UTF-16编码以16位无符号整数为单位。我们把Unicode编码记作U。编码规则如下：</p>
<p>如果U&lt;0x10000，则U的UTF-16编码就是U对应的16位无符号整数（为书写简便，下文将16位无符号整数记作WORD）。</p>
<p>如果U≥0x10000，我们先计算U’=U-0x10000，然后将U’写成二进制形式：yyyy yyyy yyxx xxxx xxxx，U的UTF-16编码（二进制）就是：110110yyyyyyyyyy 110111xxxxxxxxxx。</p>
<p>为什么U’可以被写成20个二进制位？Unicode的最大码位是0x10FFFF，减去0x10000后，U’的最大值是0xFFFFF，所以肯定可以用20个二进制位表示。例如：Unicode编码0x20C30，减去0x10000后，得到0x10C30，写成二进制是：0001 0000 1100 0011 0000。用前10位依次替代模板中的y，用后10位依次替代模板中的x，就得到：1101100001000011 1101110000110000，即0xD843 0xDC30。</p>
<p>按照上述规则，Unicode编码0x10000-0x10FFFF的UTF-16编码有两个WORD，第一个WORD的高6位是110110，第二个WORD的高6位是110111。可见，第一个WORD的取值范围（二进制）是11011000 00000000到11011011 11111111，即0xD800-0xDBFF。第二个WORD的取值范围（二进制）是11011100 00000000到11011111 11111111，即0xDC00-0xDFFF。</p>
<p>为了将一个WORD的UTF-16编码与两个WORD的UTF-16编码区分开来，Unicode编码的设计者将0xD800-0xDFFF保留下来，并称为代理区（Surrogate）：</p>
<table>
<thead>
<tr>
<th>D800－DB7F</th>
<th>High Surrogates</th>
<th>高位替代</th>
</tr>
</thead>
<tbody><tr>
<td>DB80－DBFF</td>
<td>High Private Use Surrogates</td>
<td>高位专用替代</td>
</tr>
<tr>
<td>DC00－DFFF</td>
<td>Low Surrogates</td>
<td>低位替代</td>
</tr>
</tbody></table>
<p>高位替代就是指这个范围的码位是两个WORD的UTF-16编码的第一个WORD。低位替代就是指这个范围的码位是两个WORD的UTF-16编码的第二个WORD。那么，高位专用替代是什么意思？我们来解答这个问题，顺便看看怎么由UTF-16编码推导Unicode编码。</p>
<p>如果一个字符的UTF-16编码的第一个WORD在0xDB80到0xDBFF之间，那么它的Unicode编码在什么范围内？我们知道第二个WORD的取值范围是0xDC00-0xDFFF，所以这个字符的UTF-16编码范围应该是0xDB80 0xDC00到0xDBFF 0xDFFF。我们将这个范围写成二进制：</p>
<p>1101101110000000 11011100 00000000 - 1101101111111111 1101111111111111</p>
<p>按照编码的相反步骤，取出高低WORD的后10位，并拼在一起，得到1110 0000 0000 0000 0000 - 1111 1111 1111 1111 1111即0xe0000-0xfffff，按照编码的相反步骤再加上0x10000，得到0xf0000-0x10ffff。这就是UTF-16编码的第一个WORD在0xdb80到0xdbff之间的Unicode编码范围，即平面15和平面16。因为Unicode标准将平面15和平面16都作为专用区，所以0xDB80到0xDBFF之间的保留码位被称作高位专用替代。</p>
<h3 id="UTF-32"><a href="#UTF-32" class="headerlink" title="UTF-32"></a>UTF-32</h3><p>UTF-32编码以32位无符号整数为单位。Unicode的UTF-32编码就是其对应的32位无符号整数。</p>
<h3 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h3><p>字节序有两种，分别是“大端”（Big Endian, BE）和“小端”（Little Endian, LE）。</p>
<p>根据字节序的不同，UTF-16可被实现为UTF-16LE或UTF-16BE，UTF-32可被实现为UTF-32LE或UTF-32BE。例如：</p>
<table>
<thead>
<tr>
<th><strong>Unicode编码</strong></th>
<th><strong>UTF-16LE</strong></th>
<th><strong>UTF-16BE</strong></th>
<th><strong>UTF32-LE</strong></th>
<th><strong>UTF32-BE</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0x006C49</td>
<td>49 6C</td>
<td>6C 49</td>
<td>49 6C 00 00</td>
<td>00 00 6C 49</td>
</tr>
<tr>
<td>0x020C30</td>
<td>30 DC 43 D8</td>
<td>D8 43 DC 30</td>
<td>30 0C 02 00</td>
<td>00 02 0C 30</td>
</tr>
</tbody></table>
<p>Unicode标准建议用BOM（Byte Order Mark）来区分字节序，即在传输字节流前，先传输被作为BOM的字符“零宽无中断空格”。这个字符的编码是FEFF，而反过来的FFFE（UTF-16）和FFFE0000（UTF-32）在Unicode中都是未定义的码位，不应该出现于实际传输中。</p>
<p>下表是各种UTF编码的BOM：</p>
<table>
<thead>
<tr>
<th><strong>UTF编码</strong></th>
<th><strong>Byte Order Mark (BOM)</strong></th>
</tr>
</thead>
<tbody><tr>
<td>UTF-8 without BOM</td>
<td>无</td>
</tr>
<tr>
<td>UTF-8 with BOM</td>
<td>EF BB BF</td>
</tr>
<tr>
<td>UTF-16LE</td>
<td>FF FE</td>
</tr>
<tr>
<td>UTF-16BE</td>
<td>FE FF</td>
</tr>
<tr>
<td>UTF-32LE</td>
<td>FF FE 00 00</td>
</tr>
<tr>
<td>UTF-32BE</td>
<td>00 00 FE FF</td>
</tr>
</tbody></table>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用的最多的就是UTF-8</p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>编码和字符集</tag>
      </tags>
  </entry>
  <entry>
    <title>关于HashMap</title>
    <url>/2020/12/30/%E5%85%B3%E4%BA%8EHashMap/</url>
    <content><![CDATA[<h2 id="HashMap容量"><a href="#HashMap容量" class="headerlink" title="HashMap容量"></a>HashMap容量</h2><p>以下是来自JDK15源代码中的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>

<p>在集合框架中，把<code>Map</code>接口实现并继承了<code>AbstractMap</code>，所以是一个类</p>
<p>继续往下读这个类，第一个属性定义源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment">     * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment">     * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">//最大容量为2^31;原因如下，size都只是定义为int型</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure>

<p>默认初始化容量为16，而且必须初始化为2的n次幂，此处我试了一下，并不是指实例化时必须传一个2次幂整数作为参数。传入初始化容量后，它实际会调用一个修正函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = -<span class="number">1</span> &gt;&gt;&gt; Integer.numberOfLeadingZeros(cap - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">个人解读：</span><br><span class="line">n = -<span class="number">1</span> 对应二进制<span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span></span><br><span class="line">    </span><br><span class="line">numberOfLeadingZeros方法给定一个<span class="keyword">int</span>类型数据，返回这个数据的二进制串中从最左边算起连续的“<span class="number">0</span>”的总数量。</span><br><span class="line">    </span><br><span class="line">也就是找到遇到第一个<span class="number">1</span>，左边（高位）有多少<span class="number">1</span>，比如<span class="number">9</span>的二进制<span class="number">1001</span>，<span class="number">32</span>位<span class="keyword">int</span>表示的话，高<span class="number">28</span>位都为<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt;表示无符号右移，也叫逻辑右移，即若该数为正，则高位补<span class="number">0</span>，而若该数为负数，则右移后高位同样补<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">然后n得到的应该是一个大于等于n的数。</span><br><span class="line">    </span><br><span class="line">理由：</span><br><span class="line">    <span class="number">1</span>.如果cap是<span class="number">2</span>的次幂，如<span class="number">2</span>^x次幂，那么<span class="number">2</span>^x-<span class="number">1</span>应该是x个<span class="number">1</span>（最低位），那么实际n逻辑右移后得到的就是<span class="number">2</span>^x-<span class="number">1</span></span><br><span class="line">    比如给<span class="number">16</span> ： 					<span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span></span><br><span class="line">    减<span class="number">1</span>得到：   					<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span></span><br><span class="line">    调用numberOfLeadingZeros得到 ：	<span class="number">28</span></span><br><span class="line">    完后：-<span class="number">1</span> &gt;&gt;&gt; <span class="number">28</span>得到 				<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span></span><br><span class="line">    </span><br><span class="line">    <span class="number">2</span>.如果不是<span class="number">2</span>的次幂，那么得到的就是大于cap的最小的<span class="number">2</span>次幂</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>语句两个 ？ ： 运算符</span><br><span class="line">第一个判断n和<span class="number">0</span>的关系，如果n小于<span class="number">0</span>，那么就返回<span class="number">1</span>，否则还得比较一下有没有超过允许的<span class="number">1</span>最大容量，不超过返回n+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>通过高效位运算就完成了容量修正。但是好像并不能直接通过方法返回容量。</p>
<p>查看<code>HashMap</code>有参构造函数:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ---------------- Public operations -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty &#123;<span class="doctag">@code</span> HashMap&#125; with the specified initial</span></span><br><span class="line"><span class="comment">     * capacity and load factor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  initialCapacity the initial capacity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  loadFactor      the load factor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative</span></span><br><span class="line"><span class="comment">     *         or the load factor is nonpositive</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>threshold</code>字段存容量<del>~</del>，没方法直接获取这个指。</p>
<p>突然想起看过反射了，还没用过。试一试！！！</p>
<p>走起~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException, NoSuchFieldException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String,Integer&gt; hm = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//实例的getClass方法获取Class</span></span><br><span class="line">        Class&lt;?&gt; myhash = hm.getClass();</span><br><span class="line">        <span class="comment">//获取指定属性，也可以调用getDeclaredFields()方法获取属性数组</span></span><br><span class="line">        Field threshold =  myhash.getDeclaredField(<span class="string">"threshold"</span>);</span><br><span class="line">        <span class="comment">//将目标属性设置为可以访问</span></span><br><span class="line">        threshold.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(threshold.get(hm));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传参初始化容量为10，不出意外应该输出16</p>
<p><img src="/2020/12/30/%E5%85%B3%E4%BA%8EHashMap/1.png" alt></p>
<p>有警告，说是JDK版本太高<del>~</del>，但却是输出了16。</p>
<h2 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h2><p><strong>index = HashCode（Key） &amp; （Length - 1）</strong> </p>
<p>可以说，Hash算法最终得到的index结果，完全取决于Key的Hashcode值的最后几位。</p>
<p>如果Length - 1不是全1的二进制，映射方法不平均，好像根据什么泊松分布得出的结论。</p>
<p>显然不符合Hash算法均匀分布的原则。</p>
]]></content>
      <categories>
        <category>第一阶段感悟</category>
      </categories>
      <tags>
        <tag>第一阶段感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>集合框架</title>
    <url>/2020/12/29/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java语言本身和C语言区别不大，所以很快建立了面向对象的思想后，有语法基础的支持，了解了泛型、注解、反射等概念后。可以开始学习Java强大的数据结构了——集合框架。</p>
<p>集合框架被设计成要满足以下几个目标。</p>
<ul>
<li>该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。</li>
<li>该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。</li>
<li>对一个集合的扩展和适应必须是简单的。</li>
</ul>
<h2 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h2><p>来自网络资源</p>
<p><img src="/2020/12/29/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.gif" alt></p>
<h2 id="接口-amp-实现（类）-amp-算法"><a href="#接口-amp-实现（类）-amp-算法" class="headerlink" title="接口&amp;实现（类）&amp;算法"></a>接口&amp;实现（类）&amp;算法</h2><ul>
<li><p><strong>接口：</strong></p>
<p>上图中虚线框均是接口，代表集合的抽象数据类型，之所以定义多个接口，是为了以不同的方式操作集合对象。</p>
</li>
<li><p><strong>实现（类）：</strong></p>
<p>是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</p>
</li>
<li><p><strong>算法：</strong></p>
<p>实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</p>
</li>
</ul>
<h2 id="直接剖析JDK源码理解集合框架"><a href="#直接剖析JDK源码理解集合框架" class="headerlink" title="直接剖析JDK源码理解集合框架"></a>直接剖析JDK源码理解集合框架</h2><h3 id="展开Collection"><a href="#展开Collection" class="headerlink" title="展开Collection"></a>展开Collection</h3><p>在IDEA中打出关键字<code>Collection</code>——按住<code>Ctrl</code>点击进入<code>Collection</code>源代码——使用<code>Ctrl+H</code>快捷键即可查看集合继承关系如图：</p>
<p><img src="/2020/12/29/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/1.png" alt></p>
<p>首先可以观察到<code>Collection</code>本身就是一个接口并且这些东西都有锁，不可更改</p>
<ul>
<li><pre><code>SynchronizedCollection in Collections
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  具体实现类，与线程安全有关。</span><br><span class="line"></span><br><span class="line">+</span><br></pre></td></tr></table></figure>
ValuesView in ConcurrentHashMap
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  具体实现类，与锁，线程安全有关。</span><br><span class="line"></span><br><span class="line">+</span><br></pre></td></tr></table></figure>
BeanContext
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  提供与 bean 上下文有关的类和接口，暂时不懂~</span><br><span class="line"></span><br><span class="line">+</span><br></pre></td></tr></table></figure>
List
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">一个接口，源码：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">定义：public interface List&lt;E&gt; extends Collection&lt;E&gt;</span><br><span class="line">    泛型，单继承自Collection</span><br></pre></td></tr></table></figure>

源码1068行，完后只是定义了41种方法，其中一种是重写了父接口的~自己数的不知道准不

接口只定义方法，不能带具体实现，因此大部分是函数的文档注释。</code></pre></li>
<li><pre><code>AbstractCollection
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">实现了大部分的集合接口</span><br><span class="line"></span><br><span class="line">最简单的一个&#96;isEmpty()&#96;的实现源码带文档注释如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">&#x2F;**</span><br><span class="line">     * &#123;@inheritDoc&#125;</span><br><span class="line">     *</span><br><span class="line">     * @implSpec</span><br><span class="line">     * This implementation returns &#123;@code size() &#x3D;&#x3D; 0&#125;.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        return size() &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;直接调用size方法的返回值判断</span><br></pre></td></tr></table></figure></code></pre></li>
<li><pre><code>CollectionView
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">源码中定义如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">abstract static class CollectionView&lt;K,V,E&gt;</span><br><span class="line">        implements Collection&lt;E&gt;, java.io.Serializable</span><br></pre></td></tr></table></figure>

暂时不知道干嘛用的</code></pre></li>
<li><pre><code>CheckedCollection
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  也不懂干嘛用的</span><br><span class="line"></span><br><span class="line">+</span><br></pre></td></tr></table></figure>
Set
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">一个接口，继承至&#96;Collection&#96;</span><br><span class="line"></span><br><span class="line">源码中定义如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public interface Set&lt;E&gt; extends Collection&lt;E&gt;</span><br></pre></td></tr></table></figure>

和`List`一样就定义了一堆方法.</code></pre></li>
<li><pre><code>UnmodifiableCollection
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ???</span><br><span class="line"></span><br><span class="line">+</span><br></pre></td></tr></table></figure>
Queue
源码中的定义
public interface Queue&lt;E&gt; extends Collection&lt;E&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  定义一堆方法。</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">**主要关注接口部分继续展开&#96;List&#96;、&#96;Set&#96;、&#96;Queue&#96;**</span><br><span class="line"></span><br><span class="line">#### 展开List</span><br><span class="line"></span><br><span class="line"> &#96;List&#96;第一条分支实现了&#96;Vector&#96;-&gt;&#96;Stack&#96;</span><br><span class="line"></span><br><span class="line">![](集合框架&#x2F;3.png)</span><br><span class="line"></span><br><span class="line">&#96;Vector&#96;源码中定义如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class Vector&lt;E&gt;</span><br><span class="line">    extends AbstractList&lt;E&gt;</span><br><span class="line">    implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#x2F;&#x2F;继承AbstractList类，并实现List接口</span><br></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<p><code>Stack</code>中源码定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">//继承一个实体类，<span class="title">Vector</span>基础新增一些方法</span></span><br><span class="line"><span class="class">//如：</span></span><br><span class="line"><span class="class"> /**</span></span><br><span class="line"><span class="class">     * <span class="title">Pushes</span> <span class="title">an</span> <span class="title">item</span> <span class="title">onto</span> <span class="title">the</span> <span class="title">top</span> <span class="title">of</span> <span class="title">this</span> <span class="title">stack</span>. <span class="title">This</span> <span class="title">has</span> <span class="title">exactly</span></span></span><br><span class="line">     * the same effect as:</span><br><span class="line">     * &lt;blockquote&gt;&lt;pre&gt;</span><br><span class="line">     * addElement(item)&lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="line">     *</span><br><span class="line">     * <span class="meta">@param</span>   item   the item to be pushed onto <span class="keyword">this</span> stack.</span><br><span class="line">     * <span class="meta">@return</span>  the &#123;<span class="meta">@code</span> item&#125; argument.</span><br><span class="line">     * @see     java.util.Vector#addElement</span><br><span class="line">     */</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">        addElement(item);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>ArrayList</code>也是直接实现了List接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码定义如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">//先继承了<span class="title">AbstractList</span>然后实现<span class="title">List</span>接口</span></span><br></pre></td></tr></table></figure>

<p><code>LinkedList</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">    //实现了<span class="title">List</span>和<span class="title">Deque</span>接口</span></span><br></pre></td></tr></table></figure>

<h4 id="展开Queue"><a href="#展开Queue" class="headerlink" title="展开Queue"></a>展开Queue</h4><p><img src="/2020/12/29/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/5.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Deque&lt;E&gt; extends Queue&lt;E&gt;</span><br></pre></td></tr></table></figure>

<p><code>Deque</code>接口被<code>LinkedList</code>和<code>ArrayDeque</code>实现，定义源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ArrayDeque</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">                           <span class="keyword">implements</span> <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>

<p>阻塞队列接口<code>BlockingQueue</code>继承自Queue接口，然后<code>BlockingDeque</code>继承<code>BlockingQueue</code>和<code>Deque</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">BlockingDeque</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="展开set"><a href="#展开set" class="headerlink" title="展开set"></a>展开set</h4><p>源码中的重要定义</p>
<p><img src="/2020/12/29/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/6.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"> <span class="title">public</span> <span class="title">class</span> <span class="title">LinkedHashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>

<p>然后<code>AbstractSet</code>下生成很多种<code>Set</code>已经开始有点懵~</p>
<p>大致框架最重要的部分应该是<code>Collection</code>下生成的一些的抽象类，即实现了接口中大部分方法的类</p>
<p><img src="/2020/12/29/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/7.png" alt></p>
<p>然后大致理出<code>Collection</code>这条线生成的直接用的，并且用的多的数据结构如图，不全<del>~</del></p>
<p><img src="/2020/12/29/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/8.png" alt></p>
<h3 id="展开Map"><a href="#展开Map" class="headerlink" title="展开Map"></a>展开Map</h3><p><img src="/2020/12/29/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/9.png" alt></p>
<p>大致关系如下：(红色表示接口，绿色表示可用的实现类)</p>
<p><img src="/2020/12/29/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/10.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>集合可以看作是一种容器，用来存储对象信息。所有集合类都位于java.util包下，但支持多线程的集合类位于java.util.concurrent包下。</p>
]]></content>
      <categories>
        <category>第一阶段感悟</category>
      </categories>
      <tags>
        <tag>第一阶段感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象总结</title>
    <url>/2020/12/29/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Java面向对象三大特性脑图"><a href="#Java面向对象三大特性脑图" class="headerlink" title="Java面向对象三大特性脑图"></a>Java面向对象三大特性脑图</h2><p><img src="/2020/12/29/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/OOP%E6%80%BB%E7%BB%93.jpg" alt></p>
<h2 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a>instanceof关键字</h2><p><code>X instance of Y</code></p>
<ul>
<li><p>编译通过的条件</p>
<p>X是Y的子类，X和Y的类型应该去看定义的左边，而不是new的右边所指向的东西</p>
</li>
<li><p>比较结果</p>
<p>X指向的类（看右边引用）是Y的子类</p>
</li>
</ul>
<p><strong>类型之间的转换</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类 -------&gt; 子类</span><br><span class="line">高类 -------&gt; 低类</span><br><span class="line">    必须使用强制类型装换</span><br><span class="line">  </span><br><span class="line">子类 -------&gt; 父类</span><br><span class="line">低 -------&gt; 高</span><br><span class="line">    不需要强制类型转换，但是会丢失子类的方法</span><br></pre></td></tr></table></figure>

<h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><h3 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h3><p>静态的：可以直接通过<code>类名.变量名</code>格式直接访问，无论实例化多少对象，都只有一个！</p>
<p>//多线程</p>
<p>非静态的：必须先实例化类，才能使用</p>
<h3 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h3><p>静态的：可直接调用（类加载时就加载了static修饰的）</p>
<p>非静态的：必须先实例化类，才能通过实例的对象使用</p>
<h3 id="修饰代码块"><a href="#修饰代码块" class="headerlink" title="修饰代码块"></a>修饰代码块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">静态代码块</span><br><span class="line"><span class="keyword">static</span>&#123;&#125; —— 最先执行，只执行一次，第一次加载类时执行</span><br><span class="line">匿名代码块：</span><br><span class="line">&#123;&#125; 	-- 先于构造器之前执行</span><br></pre></td></tr></table></figure>

<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><strong>本质还是类！！！</strong></p>
<p>抽象（封装继承多态）的抽象</p>
<p>抽象类是一种约束~~</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1.不能new这个抽线类，只能有子类实现</p>
<p>2.抽线类可以写普通方法</p>
<p>3.抽象方法必须存在于抽象类中</p>
<p><strong>4.存在构造器</strong></p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>递进关系：</strong></p>
<p>普通类：只有具体实现</p>
<p>抽象类：具体实现，规范（抽象方法）都可以有</p>
<p><strong>接口：只有规范</strong></p>
<p>声明类的关键字：<code>class</code></p>
<p>声明接口的关键字：<code>interface</code>（本质就不是类了）</p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>其中定义一个方法默认有的修饰符：<code>public abstract</code></p>
<p>定义变量默认有的修饰符：<code>public static final</code></p>
<p><code>implements</code>关键字实现，可多继承，侧面实现了多继承！！！</p>
<p>继承时必须重写接口中所有方法</p>
<h2 id="扩展概念——内部类"><a href="#扩展概念——内部类" class="headerlink" title="扩展概念——内部类"></a>扩展概念——内部类</h2><p>一个类的内部去定义一个新的类</p>
<h3 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1.成员内部类"></a>1.成员内部类</h3><p>类作为类的成员之一</p>
<p>内部类可以获得外部类的私有属性（通过方法）</p>
<p>内部类实例化方法：先实例化外部类，再使用外部类来实例化内部类</p>
<h3 id="2-静态内部类"><a href="#2-静态内部类" class="headerlink" title="2.静态内部类"></a>2.静态内部类</h3><p>static修饰之后就不能用外部类私有属性了</p>
<p>原因：static最先加载，都还不知道私有属性是啥！！！</p>
<h3 id="3-一个java类"><a href="#3-一个java类" class="headerlink" title="3.一个java类"></a>3.一个java类</h3><p>可以有多个<code>class</code>类但只能有一个<code>public class</code>类</p>
<h3 id="4-局部内部类"><a href="#4-局部内部类" class="headerlink" title="4.局部内部类"></a>4.局部内部类</h3><p>方法中定义类</p>
<h3 id="5-匿名内部类"><a href="#5-匿名内部类" class="headerlink" title="5.匿名内部类"></a>5.匿名内部类</h3><p>接口也可new但是必须重写方法</p>
]]></content>
      <categories>
        <category>第一阶段感悟</category>
      </categories>
      <tags>
        <tag>第一阶段感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型</title>
    <url>/2020/12/28/%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>其实Java中的泛型也就是C++中的模板类。C++中用的最多的就是STL中。之所以用到泛型其实就是使得一个函数的功能更强大，或者说一个类的功能更强大。比如写一个函数比较两个元素大小，在C++中有float类型，int类型，double甚至string时每种格式数据都需要写一个函数，很麻烦。</p>
<p>什么是泛型？为什么要使用泛型？</p>
<p><strong>泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。</strong></p>
<p><strong>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）</strong>。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>在JDK1.5版本之前没有泛型，因此可以定义一个可以接收任何对象的List，</p>
<p><img src="/2020/12/28/%E6%B3%9B%E5%9E%8B/1.png" alt></p>
<p>定义一个ArrayList，格式是Object，所有类的父类</p>
<p><img src="/2020/12/28/%E6%B3%9B%E5%9E%8B/2.png" alt></p>
<p>上述问题是运行是产生问题。</p>
<p>为了解决类似这样的问题（在编译阶段就可以解决），泛型应运而生。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>泛型只在编译阶段有效。编译之后程序会采取去泛型化的措施，也就是说Java中的泛型，只在编译阶段有效。</p>
<p>在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。也就是说，泛型信息不会进入到运行时阶段。</p>
<p><strong>型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。</strong></p>
<h2 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h2><p>泛型的三种使用方法：泛型类，泛型接口，泛型方法</p>
<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>在类的定义中使用类，然后就可让类中的操作都能使用泛型。最典型的就是Java各种容器类——List，Set，Map</p>
<p>一个泛型类例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Fanxing;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;       <span class="comment">// 此处可以随便写标识符号，T是type的简称</span></span><br><span class="line">    <span class="keyword">private</span> K key;</span><br><span class="line">    <span class="keyword">private</span> V value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K akey,V avalue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = akey;</span><br><span class="line">        <span class="keyword">this</span>.value = avalue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>&#123;<span class="comment">//作为方法返回类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Point&lt;Integer,String&gt; p = <span class="keyword">new</span> Point&lt;Integer,String&gt;();</span><br><span class="line">        p.set(<span class="number">1</span>,<span class="string">"one"</span>);</span><br><span class="line">        System.out.println(p.getValue());</span><br><span class="line">        fun(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Point&lt;?,?&gt; temp)</span></span>&#123;<span class="comment">//通配符 ？</span></span><br><span class="line">        System.out.println(temp.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>声明方法是在类名后面用尖括号把会用到的标识符号列出来。</p>
<p>然后在类中就可以直接使用这些标识符，作为变量类型或者方法的返回类型都可以。</p>
<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>泛型接口与泛型类的定义及使用基本相同。泛型接口常被用在各种类的生产器中，可以看一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Fanxing;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span>&lt;<span class="title">T</span>&gt;</span>&#123;        <span class="comment">// 在接口上定义泛型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getVar</span><span class="params">()</span> </span>; <span class="comment">// 定义抽象方法，抽象方法的返回值就是泛型类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfoImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Info</span>&lt;<span class="title">T</span>&gt;</span>&#123;   <span class="comment">// 定义泛型接口的子类</span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;             <span class="comment">// 定义属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoImpl</span><span class="params">(T avar)</span></span>&#123;     <span class="comment">// 通过构造方法设置属性内容</span></span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">var</span> = avar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getVar</span><span class="params">()</span></span>&#123;<span class="comment">//实现接口</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arsg[])</span></span>&#123;</span><br><span class="line">        Info&lt;String&gt; i =<span class="keyword">new</span> InfoImpl&lt;String&gt;(<span class="string">"Codefriday"</span>) ;</span><br><span class="line">        System.out.println(<span class="string">"作者："</span> + i.getVar()) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>第一个泛型类例子中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span><span class="comment">//作为方法返回类型</span></span></span><br></pre></td></tr></table></figure>

<p>并不是一个泛型方法，这只是类中一个普通成员方法，下面引用泛型方法：</p>
<pre><code>public class Test1 {
    public &lt;T&gt; void testMethod(T t){

    }
}</code></pre><p>类型参数位置在返回类型之前</p>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>除了用 <code>&lt;T&gt;</code>表示泛型外，还有 <code>&lt;?&gt;</code>这种形式。<strong>？</strong> 被称为通配符。</p>
<p>通配符有 3 种形式。</p>
<ol>
<li><code>&lt;?&gt;</code>被称作无限定的通配符。</li>
<li><code>&lt;? extends T&gt;</code>被称作有上限的通配符。</li>
<li><code>&lt;? super T&gt;</code>被称作有下限的通配符。</li>
</ol>
<h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p><strong>泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除</strong>。</p>
<h3 id="带来的局限性"><a href="#带来的局限性" class="headerlink" title="带来的局限性"></a>带来的局限性</h3><p>类型擦除，是泛型能够与之前的 java 版本代码兼容共存的原因。但也因为类型擦除，它会抹掉很多继承相关的特性，这是它带来的局限性。</p>
<h2 id="泛型中值得注意的地方"><a href="#泛型中值得注意的地方" class="headerlink" title="泛型中值得注意的地方"></a>泛型中值得注意的地方</h2><h3 id="不接受-8-种基本数据类型"><a href="#不接受-8-种基本数据类型" class="headerlink" title="不接受 8 种基本数据类型"></a>不接受 8 种基本数据类型</h3><p>原因：只接受对象！！！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int-&gt;integer</span><br><span class="line"></span><br><span class="line">boolean-&gt;Boolean</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>泛型其实就是方便编程以及减小代码冗余度，但是只是编译阶段起作用。</p>
<p>抽离了数据类型与代码逻辑，本意是提高程序代码的简洁性和可读性，并提供可能的编译时类型转换安全检测功能。</p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据结构</title>
    <url>/2020/12/27/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我有过数据结构的基础，学C++时都实现了一遍数据结构，所以相当于做记录，更偏向实际应用。</p>
<p>本博客相当于是笔记，只为了给自己以后方便查资料等，并不是自己写的内容，因为我也是正在学。</p>
<p>基本复制来的加上自己手敲代码给自己加深印象。</p>
<p>资源来自<a href="https://www.runoob.com/java/java-tutorial.html" target="_blank" rel="noopener">菜鸟网</a></p>
<h2 id="Java-数据结构"><a href="#Java-数据结构" class="headerlink" title="Java 数据结构"></a>Java 数据结构</h2><p>Java工具包提供了强大的数据结构。在Java中的数据结构主要包括以下几种接口和类：</p>
<ul>
<li>枚举（Enumeration）</li>
<li>位集合（BitSet）</li>
<li>向量（Vector）</li>
<li>栈（Stack）</li>
<li>字典（Dictionary）</li>
<li>哈希表（Hashtable）</li>
<li>属性（Properties）</li>
</ul>
<h3 id="枚举（Enumeration）"><a href="#枚举（Enumeration）" class="headerlink" title="枚举（Enumeration）"></a>枚举（Enumeration）</h3><p>枚举（Enumeration）接口虽然它本身不属于数据结构,但它在其他数据结构的范畴里应用很广。 枚举（The Enumeration）接口定义了一种从数据结构中取回连续元素的方式。</p>
<p>例如，枚举定义了一个叫nextElement 的方法，该方法用来得到一个包含多元素的数据结构的下一个元素。</p>
<p>Enumeration接口中定义了一些方法，通过这些方法可以枚举（一次获得一个）对象集合中的元素。</p>
<p>这种传统接口已被迭代器取代，虽然Enumeration 还未被遗弃，但在现代代码中已经被很少使用了。尽管如此，它还是使用在诸如Vector和Properties这些传统类所定义的方法中，除此之外，还用在一些API类，并且在应用程序中也广泛被使用。 下表总结了一些Enumeration声明的方法：</p>
<table>
<thead>
<tr>
<th align="left"><strong>序号</strong></th>
<th align="center"><strong>方法描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="center"><strong>boolean hasMoreElements( )</strong>  测试此枚举是否包含更多的元素。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="center"><strong>Object nextElement( )</strong> 如果此枚举对象至少还有一个可提供的元素，则返回此枚举的下一个元素。</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">package hello;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumerationTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Enumeration&lt;String&gt; days;</span><br><span class="line">        Vector&lt;String&gt; week = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">        week.add(<span class="string">"Sunday"</span>);</span><br><span class="line">        week.add(<span class="string">"Monday"</span>);</span><br><span class="line">        week.add(<span class="string">"Tuesday"</span>);</span><br><span class="line">        week.add(<span class="string">"Wednesday"</span>);</span><br><span class="line">        week.add(<span class="string">"Thursday"</span>);</span><br><span class="line">        week.add(<span class="string">"Friday"</span>);</span><br><span class="line">        week.add(<span class="string">"Saturday"</span>);</span><br><span class="line">        days = week.elements();</span><br><span class="line">        <span class="keyword">while</span>(days.hasMoreElements())&#123;</span><br><span class="line">            System.out.println(days.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/2020/12/27/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.png" alt></p>
<h3 id="位集合（BitSet）"><a href="#位集合（BitSet）" class="headerlink" title="位集合（BitSet）"></a>位集合（BitSet）</h3><p>位集合类实现了一组可以单独设置和清除的位或标志。</p>
<p>该类在处理一组布尔值的时候非常有用，你只需要给每个值赋值一”位”，然后对位进行适当的设置或清除，就可以对布尔值进行操作了。</p>
<p>一个Bitset类创建一种特殊类型的数组来保存位值。BitSet中数组大小会随需要增加。这和位向量（vector of bits）比较类似。</p>
<p>这是一个传统的类，但它在Java 2中被完全重新设计。</p>
<p>BitSet定义了两个构造方法。</p>
<p>第一个构造方法创建一个默认的对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BitSet()</span><br></pre></td></tr></table></figure>

<p>第二个方法允许用户指定初始大小。所有位初始化为0。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BitSet(int size)</span><br></pre></td></tr></table></figure>

<h3 id="向量（Vector）"><a href="#向量（Vector）" class="headerlink" title="向量（Vector）"></a>向量（Vector）</h3><p>向量（Vector）类和传统数组非常相似，但是Vector的大小能根据需要动态的变化。</p>
<p>和数组一样，Vector对象的元素也能通过索引访问。</p>
<p>使用Vector类最主要的好处就是在创建对象的时候不必给对象指定大小，它的大小会根据需要动态的变化。</p>
<p>Vector 类实现了一个动态数组。和 ArrayList 很相似，但是两者是不同的：</p>
<ul>
<li>Vector 是同步访问的。</li>
<li>Vector 包含了许多传统的方法，这些方法不属于集合框架。</li>
</ul>
<p>Vector 主要用在事先不知道数组的大小，或者只是需要一个可以改变大小的数组的情况。</p>
<p>Vector 类支持 4 种构造方法。</p>
<p>第一种构造方法创建一个默认的向量，默认大小为 10：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vector()</span><br></pre></td></tr></table></figure>

<p>第二种构造方法创建指定大小的向量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vector(int size)</span><br></pre></td></tr></table></figure>

<p>第三种构造方法创建指定大小的向量，并且增量用 incr 指定。增量表示向量每次增加的元素数目。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vector(int size,int incr)</span><br></pre></td></tr></table></figure>

<p>第四种构造方法创建一个包含集合 c 元素的向量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vector(Collection c)</span><br></pre></td></tr></table></figure>

<p>一堆接口：比较两个接口，其他接口用到再写：</p>
<p> int size()   返回此向量中的组件数。</p>
<p> Enumeration elements()  返回此向量的组件的枚举。</p>
<p>int capacity() 返回此向量的当前容量。</p>
<p><strong>容量可以构造时指定，而size表示容器中现在有的对象个数。</strong></p>
<h3 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h3><p>栈（Stack）实现了一个后进先出（LIFO）的数据结构。</p>
<p>你可以把栈理解为对象的垂直分布的栈，当你添加一个新元素时，就将新元素放在其他元素的顶部。</p>
<p>当你从栈中取元素的时候，就从栈顶取一个元素。换句话说，最后进栈的元素最先被取出。</p>
<p><strong>除了由Vector定义的所有方法，自己也定义了一些方法：</strong></p>
<p>堆栈只定义了默认构造函数，用来创建一个空栈。 堆栈除了包括由Vector定义的所有方法，也定义了自己的一些方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Stack()</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">方法描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">boolean empty()  测试堆栈是否为空。</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Object peek( ) 查看堆栈顶部的对象，但不从堆栈中移除它。</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Object pop( ) 移除堆栈顶部的对象，并作为此函数的值返回该对象。</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">Object push(Object element) 把项压入堆栈顶部。</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">int search(Object element) 返回对象在堆栈中的位置，以 1 为基数。</td>
</tr>
</tbody></table>
<h3 id="字典（Dictionary）"><a href="#字典（Dictionary）" class="headerlink" title="字典（Dictionary）"></a>字典（Dictionary）</h3><p>字典（Dictionary） 类是一个抽象类，它定义了键映射到值的数据结构。</p>
<p>当你想要通过特定的键而不是整数索引来访问数据的时候，这时候应该使用Dictionary。</p>
<p>由于Dictionary类是抽象类，所以它只提供了键映射到值的数据结构，而没有提供特定的实现。</p>
<p>类似于C++的map</p>
<p>Dictionary 类是一个抽象类，用来存储键/值对，作用和Map类相似。</p>
<p>给出键和值，你就可以将值存储在Dictionary对象中。一旦该值被存储，就可以通过它的键来获取它。所以和Map一样， Dictionary 也可以作为一个键/值对列表。</p>
<p>Dictionary定义的抽象方法如下表所示：</p>
<table>
<thead>
<tr>
<th align="center"><strong>序号</strong></th>
<th align="center"><strong>方法描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center"><strong>Enumeration elements( )</strong> 返回此 dictionary 中值的枚举。</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center"><strong>Object get(Object key)</strong> 返回此 dictionary 中该键所映射到的值。</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"><strong>boolean isEmpty( )</strong> 测试此 dictionary 是否不存在从键到值的映射。</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center"><strong>Enumeration keys( )</strong> 返回此 dictionary 中的键的枚举。</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center"><strong>Object put(Object key, Object value)</strong> 将指定 key 映射到此 dictionary 中指定 value。</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center"><strong>Object remove(Object key)</strong> 从此 dictionary 中移除 key （及其相应的 value）。</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center"><strong>int size( )</strong> 返回此 dictionary 中条目（不同键）的数量。</td>
</tr>
</tbody></table>
<p>Dictionary类已经过时了。在实际开发中，你可以实现Map接口来获取键/值的存储功能。</p>
<h3 id="哈希表（Hashtable）"><a href="#哈希表（Hashtable）" class="headerlink" title="哈希表（Hashtable）"></a>哈希表（Hashtable）</h3><p>Hashtable类提供了一种在用户定义键结构的基础上来组织数据的手段。</p>
<p>例如，在地址列表的哈希表中，你可以根据邮政编码作为键来存储和排序数据，而不是通过人名。</p>
<p>哈希表键的具体含义完全取决于哈希表的使用情景和它包含的数据。</p>
<h4 id="Java-Hashtable-类"><a href="#Java-Hashtable-类" class="headerlink" title="Java Hashtable 类"></a>Java Hashtable 类</h4><p>Hashtable是原始的java.util的一部分， 是一个Dictionary具体的实现 。</p>
<p>然而，Java 2 重构的Hashtable实现了Map接口，因此，Hashtable现在集成到了集合框架中。它和HashMap类很相似，但是它支持同步。</p>
<p>像HashMap一样，Hashtable在哈希表中存储键/值对。当使用一个哈希表，要指定用作键的对象，以及要链接到该键的值。</p>
<p>然后，该键经过哈希处理，所得到的散列码被用作存储在该表中值的索引。</p>
<p>Hashtable定义了四个构造方法。第一个是默认构造方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hashtable()</span><br></pre></td></tr></table></figure>

<p>第二个构造函数创建指定大小的哈希表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hashtable(int size)</span><br></pre></td></tr></table></figure>

<p>第三个构造方法创建了一个指定大小的哈希表，并且通过fillRatio指定填充比例。</p>
<p>填充比例必须介于0.0和1.0之间，它决定了哈希表在重新调整大小之前的充满程度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hashtable(int size,float fillRatio)</span><br></pre></td></tr></table></figure>

<p>第四个构造方法创建了一个以M中元素为初始化元素的哈希表。</p>
<p>哈希表的容量被设置为M的两倍。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hashtable(Map m)</span><br></pre></td></tr></table></figure>

<h3 id="属性（Properties）"><a href="#属性（Properties）" class="headerlink" title="属性（Properties）"></a>属性（Properties）</h3><p>Properties 继承于 Hashtable.Properties 类表示了一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。</p>
<p>Properties 类被许多Java类使用。例如，在获取环境变量时它就作为System.getProperties()方法的返回值。</p>
<h4 id="Java-Properties-类"><a href="#Java-Properties-类" class="headerlink" title="Java Properties 类"></a>Java Properties 类</h4><p>Properties 继承于 Hashtable。表示一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。</p>
<p>Properties 类被许多 Java 类使用。例如，在获取环境变量时它就作为 System.getProperties() 方法的返回值。</p>
<p>Properties 定义如下实例变量.这个变量持有一个 Properties 对象相关的默认属性列表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Properties defaults;</span><br></pre></td></tr></table></figure>

<p>Properties类定义了两个构造方法. 第一个构造方法没有默认值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Properties()</span><br></pre></td></tr></table></figure>

<p>第二个构造方法使用propDefault 作为默认值。两种情况下，属性列表都为空：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Properties(Properties propDefault)</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>先大致过一遍，后面搞项目练手时不至于遇到就卡住！</p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象</title>
    <url>/2020/12/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<a id="more"></a>

<p>JAVA是一门纯面向对象的语言。</p>
<h2 id="1-Java-继承"><a href="#1-Java-继承" class="headerlink" title="1.Java 继承"></a>1.Java 继承</h2><h3 id="1-1继承的概念"><a href="#1-1继承的概念" class="headerlink" title="1.1继承的概念"></a>1.1继承的概念</h3><p>继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p>
<p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p>
<p>所以继承需要符合的关系是：is-a，父类更通用，子类更具体。</p>
<h3 id="1-2类的继承格式"><a href="#1-2类的继承格式" class="headerlink" title="1.2类的继承格式"></a>1.2类的继承格式</h3><p>在 Java 中通过 extends 关键字可以申明一个类是从另外一个类继承而来的，一般形式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3为什么需要继承"><a href="#1-3为什么需要继承" class="headerlink" title="1.3为什么需要继承"></a>1.3为什么需要继承</h3><p>一个简单例子：</p>
<p>不使用继承，代码重复：</p>
<p><img src="/2020/12/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.png" alt></p>
<p><img src="/2020/12/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2.png" alt></p>
<p>使用继承之后：</p>
<p><img src="/2020/12/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3.png" alt></p>
<p>从这两段代码可以看出来，代码存在重复了，导致后果就是代码量大且臃肿，而且维护性不高(维护性主要是后期需要修改的时候，就需要修改很多的代码，容易出错)，所以要从根本上解决这两段代码的问题，就需要继承，将两段代码中相同的部分提取出来组成 一个父类.</p>
<h3 id="1-4继承类型"><a href="#1-4继承类型" class="headerlink" title="1.4继承类型"></a>1.4继承类型</h3><p>需要注意的是 Java 不支持多继承，但支持多重继承。(C++支持多继承)</p>
<p><img src="/2020/12/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4.png" alt></p>
<h3 id="1-5继承的特性"><a href="#1-5继承的特性" class="headerlink" title="1.5继承的特性"></a>1.5继承的特性</h3><ul>
<li>子类拥有父类非 private 的属性、方法。</li>
<li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li>
<li>子类可以用自己的方式实现父类的方法。</li>
<li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li>
<li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li>
</ul>
<h3 id="1-6-继承关键字"><a href="#1-6-继承关键字" class="headerlink" title="1.6 继承关键字"></a>1.6 继承关键字</h3><p>继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 <strong>java.lang</strong> 包中，所以不需要 <strong>import</strong>）祖先类。</p>
<h4 id="1-6-1extends关键字"><a href="#1-6-1extends关键字" class="headerlink" title="1.6.1extends关键字"></a>1.6.1extends关键字</h4><p>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p>
<h4 id="1-6-2implements关键字"><a href="#1-6-2implements关键字" class="headerlink" title="1.6.2implements关键字"></a>1.6.2implements关键字</h4><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p>
<h4 id="1-6-3super-与-this-关键字"><a href="#1-6-3super-与-this-关键字" class="headerlink" title="1.6.3super 与 this 关键字"></a>1.6.3super 与 this 关键字</h4><p>super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p>
<p>this关键字：指向自己的引用。</p>
<h4 id="1-6-4final关键字"><a href="#1-6-4final关键字" class="headerlink" title="1.6.4final关键字"></a>1.6.4final关键字</h4><p>final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写：</p>
<h4 id="1-6-5-构造器"><a href="#1-6-5-构造器" class="headerlink" title="1.6.5 构造器"></a>1.6.5 构造器</h4><p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 <strong>super</strong> 关键字调用父类的构造器并配以适当的参数列表。</p>
<p>如果父类构造器没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造器。</p>
<h2 id="2-Java-重写-Override-与重载-Overload"><a href="#2-Java-重写-Override-与重载-Overload" class="headerlink" title="2.Java 重写(Override)与重载(Overload)"></a>2.Java 重写(Override)与重载(Overload)</h2><h3 id="2-1重写-Override"><a href="#2-1重写-Override" class="headerlink" title="2.1重写(Override)"></a>2.1重写(Override)</h3><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。<strong>即外壳不变，核心重写！</strong></p>
<p>重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。</p>
<p>重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。例如： 父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。</p>
<p>在编译阶段，只检查参数的引用类型。</p>
<p>然而在运行时，Java 虚拟机(JVM)指定对象的类型并且运行该对象的方法。</p>
<h4 id="2-1-1方法的重写规则"><a href="#2-1-1方法的重写规则" class="headerlink" title="2.1.1方法的重写规则"></a>2.1.1方法的重写规则</h4><ul>
<li>参数列表与被重写方法的参数列表必须完全相同。</li>
<li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</li>
<li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li>
<li>父类的成员方法只能被它的子类重写。</li>
<li>声明为 final 的方法不能被重写。</li>
<li>声明为 static 的方法不能被重写，但是能够被再次声明。</li>
<li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li>
<li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li>
<li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li>
<li>构造方法不能被重写。</li>
<li>如果不能继承一个类，则不能重写该类的方法。</li>
</ul>
<h4 id="2-1-2Super-关键字的使用"><a href="#2-1-2Super-关键字的使用" class="headerlink" title="2.1.2Super 关键字的使用"></a>2.1.2Super 关键字的使用</h4><p>当需要在子类中调用父类的被重写方法时，要使用 super 关键字。</p>
<h3 id="2-2重载-Overload"><a href="#2-2重载-Overload" class="headerlink" title="2.2重载(Overload)"></a>2.2重载(Overload)</h3><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p>
<p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p>
<p>最常用的地方就是构造器的重载。</p>
<h4 id="2-2-1重载规则"><a href="#2-2-1重载规则" class="headerlink" title="2.2.1重载规则:"></a>2.2.1重载规则:</h4><ul>
<li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li>
<li>被重载的方法可以改变返回类型；</li>
<li>被重载的方法可以改变访问修饰符；</li>
<li>被重载的方法可以声明新的或更广的检查异常；</li>
<li>方法能够在同一个类中或者在一个子类中被重载。</li>
<li>无法以返回值类型作为重载函数的区分标准。</li>
</ul>
<h3 id="2-3重写与重载之间的区别"><a href="#2-3重写与重载之间的区别" class="headerlink" title="2.3重写与重载之间的区别"></a>2.3重写与重载之间的区别</h3><table>
<thead>
<tr>
<th align="center">区别点</th>
<th align="center">重载方法</th>
<th align="center">重写方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">参数列表</td>
<td align="center">必须修改</td>
<td align="center">一定不能修改</td>
</tr>
<tr>
<td align="center">返回类型</td>
<td align="center">可以修改</td>
<td align="center">一定不能修改</td>
</tr>
<tr>
<td align="center">异常</td>
<td align="center">可以修改</td>
<td align="center">可以减少或删除，一定不能抛出新的或者更广的异常</td>
</tr>
<tr>
<td align="center">访问</td>
<td align="center">可以修改</td>
<td align="center">一定不能做更严格的限制（可以降低限制）</td>
</tr>
</tbody></table>
<h3 id="2-4总结："><a href="#2-4总结：" class="headerlink" title="2.4总结："></a>2.4总结：</h3><p>方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。</p>
<ul>
<li>(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</li>
<li>(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</li>
<li>(3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</li>
</ul>
<p><img src="/2020/12/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5.png" alt></p>
<h2 id="3-Java-多态"><a href="#3-Java-多态" class="headerlink" title="3.Java 多态"></a>3.Java 多态</h2><p>多态是同一个行为具有多个不同表现形式或形态的能力。</p>
<p>多态就是同一个接口，使用不同的实例而执行不同操作，如图所示：</p>
<h3 id="3-1多态的优点"><a href="#3-1多态的优点" class="headerlink" title="3.1多态的优点"></a>3.1多态的优点</h3><ul>
<li><ol>
<li>消除类型之间的耦合关系</li>
</ol>
</li>
<li><ol start="2">
<li>可替换性</li>
</ol>
</li>
<li><ol start="3">
<li>可扩充性</li>
</ol>
</li>
<li><ol start="4">
<li>接口性</li>
</ol>
</li>
<li><ol start="5">
<li>灵活性</li>
</ol>
</li>
<li><ol start="6">
<li>简化性</li>
</ol>
</li>
</ul>
<h3 id="3-2多态存在的三个必要条件"><a href="#3-2多态存在的三个必要条件" class="headerlink" title="3.2多态存在的三个必要条件"></a>3.2多态存在的三个必要条件</h3><ul>
<li>继承</li>
<li>重写</li>
<li>父类引用指向子类对象：<strong>Parent p = new Child();</strong></li>
</ul>
<p><img src="/2020/12/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6.png" alt></p>
<h3 id="3-3虚函数"><a href="#3-3虚函数" class="headerlink" title="3.3虚函数"></a>3.3虚函数</h3><p>虚函数的存在是为了多态。</p>
<p>Java 中其实没有虚函数的概念，它的普通函数就相当于 C++ 的虚函数，动态绑定是Java的默认行为。如果 Java 中不希望某个函数具有虚函数特性，可以加上 final 关键字变成非虚函数。</p>
<h3 id="3-4多态的实现方式"><a href="#3-4多态的实现方式" class="headerlink" title="3.4多态的实现方式"></a>3.4多态的实现方式</h3><h4 id="方式一：重写"><a href="#方式一：重写" class="headerlink" title="方式一：重写"></a>方式一：重写</h4><h4 id="方式二：接口"><a href="#方式二：接口" class="headerlink" title="方式二：接口"></a>方式二：接口</h4><h4 id="方式三：抽象类和抽象方法"><a href="#方式三：抽象类和抽象方法" class="headerlink" title="方式三：抽象类和抽象方法"></a>方式三：抽象类和抽象方法</h4><h2 id="4-Java-抽象类"><a href="#4-Java-抽象类" class="headerlink" title="4.Java 抽象类"></a>4.Java 抽象类</h2><h3 id="4-1抽象类"><a href="#4-1抽象类" class="headerlink" title="4.1抽象类"></a>4.1抽象类</h3><p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p>
<p>抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。</p>
<p>由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。</p>
<p>父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。</p>
<p>在Java中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p>
<p>抽象类不能实例化：</p>
<p><img src="/2020/12/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7.png" alt></p>
<h3 id="4-2抽象方法"><a href="#4-2抽象方法" class="headerlink" title="4.2抽象方法"></a>4.2抽象方法</h3><p>如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。</p>
<p>Abstract 关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体。</p>
<p>抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。</p>
<p><strong>声明抽象方法会造成以下两个结果：</strong></p>
<ul>
<li>如果一个类包含抽象方法，那么该类必须是抽象类。</li>
<li>任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</li>
</ul>
<p>继承抽象方法的子类必须重写该方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该抽象方法，否则，从最初的父类到最终的子类都不能用来实例化对象。</p>
<h3 id="4-3抽象类总结规定"><a href="#4-3抽象类总结规定" class="headerlink" title="4.3抽象类总结规定"></a>4.3抽象类总结规定</h3><ul>
<li><ol>
<li>抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。</li>
</ol>
</li>
<li><ol start="2">
<li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li>
</ol>
</li>
<li><ol start="3">
<li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。</li>
</ol>
</li>
<li><ol start="4">
<li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。</li>
</ol>
</li>
<li><ol start="5">
<li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</li>
</ol>
</li>
</ul>
<h2 id="5-Java-封装"><a href="#5-Java-封装" class="headerlink" title="5.Java 封装"></a>5.Java 封装</h2><p>在面向对象程式设计方法中，封装（英语：Encapsulation）是指一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。</p>
<p>封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。</p>
<p>要访问该类的代码和数据，必须通过严格的接口控制。</p>
<p>封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。</p>
<p>适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。</p>
<h3 id="5-1封装的优点"><a href="#5-1封装的优点" class="headerlink" title="5.1封装的优点"></a>5.1封装的优点</h3><ul>
<li><ol>
<li>良好的封装能够减少耦合。</li>
</ol>
</li>
<li><ol start="2">
<li>类内部的结构可以自由修改。</li>
</ol>
</li>
<li><ol start="3">
<li>可以对成员变量进行更精确的控制。</li>
</ol>
</li>
<li><ol start="4">
<li>隐藏信息，实现细节。</li>
</ol>
</li>
</ul>
<h3 id="5-2实现Java封装的步骤"><a href="#5-2实现Java封装的步骤" class="headerlink" title="5.2实现Java封装的步骤"></a>5.2实现Java封装的步骤</h3><h4 id="5-2-1修改属性的可见性来限制对属性的访问（一般限制为private），例如："><a href="#5-2-1修改属性的可见性来限制对属性的访问（一般限制为private），例如：" class="headerlink" title="5.2.1修改属性的可见性来限制对属性的访问（一般限制为private），例如："></a>5.2.1修改属性的可见性来限制对属性的访问（一般限制为private），例如：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码中，将 <strong>name</strong> 和 <strong>age</strong> 属性设置为私有的，只能本类才能访问，其他类都访问不了，如此就对信息进行了隐藏。</p>
<h4 id="5-2-2对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问，例如："><a href="#5-2-2对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问，例如：" class="headerlink" title="5.2.2对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问，例如："></a>5.2.2对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问，例如：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>采用 <strong>this</strong> 关键字是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。</p>
<h2 id="6-Java-接口"><a href="#6-Java-接口" class="headerlink" title="6.Java 接口"></a>6.Java 接口</h2><p>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p>
<p>接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。</p>
<p>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。</p>
<p>接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。</p>
<h3 id="6-1接口与类相似点："><a href="#6-1接口与类相似点：" class="headerlink" title="6.1接口与类相似点："></a>6.1接口与类相似点：</h3><ul>
<li>一个接口可以有多个方法。</li>
<li>接口文件保存在 .java 结尾的文件中，文件名使用接口名。</li>
<li>接口的字节码文件保存在 .class 结尾的文件中。</li>
<li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li>
</ul>
<h3 id="6-2接口与类的区别："><a href="#6-2接口与类的区别：" class="headerlink" title="6.2接口与类的区别："></a>6.2接口与类的区别：</h3><ul>
<li>接口不能用于实例化对象。</li>
<li>接口没有构造方法。</li>
<li>接口中所有的方法必须是抽象方法。</li>
<li>接口不能包含成员变量，除了 static 和 final 变量。</li>
<li>接口不是被类继承了，而是要被类实现。</li>
<li>接口支持多继承。</li>
</ul>
<h3 id="6-3接口特性"><a href="#6-3接口特性" class="headerlink" title="6.3接口特性"></a>6.3接口特性</h3><ul>
<li>接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>（只能是 public abstract，其他修饰符都会报错）。</li>
<li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量（并且只能是 public，用 private 修饰会报编译错误）。</li>
<li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</li>
</ul>
<h3 id="6-4抽象类和接口的区别"><a href="#6-4抽象类和接口的区别" class="headerlink" title="6.4抽象类和接口的区别"></a>6.4抽象类和接口的区别</h3><ul>
<li><ol>
<li>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li>
</ol>
</li>
<li><ol start="2">
<li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</li>
</ol>
</li>
<li><ol start="3">
<li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li>
</ol>
</li>
<li><ol start="4">
<li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li>
</ol>
</li>
</ul>
<h3 id="6-5接口的声明"><a href="#6-5接口的声明" class="headerlink" title="6.5接口的声明"></a>6.5接口的声明</h3><p>规则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[可见度] interface 接口名称 [extends 其他的接口名] &#123;</span><br><span class="line">        <span class="comment">// 声明变量</span></span><br><span class="line">        <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口有以下特性：</p>
<ul>
<li>接口是隐式抽象的，当声明一个接口的时候，不必使用<strong>abstract</strong>关键字。</li>
<li>接口中每一个方法也是隐式抽象的，声明时同样不需要<strong>abstract</strong>关键字。</li>
<li>接口中的方法都是公有的。</li>
</ul>
<h3 id="6-6接口的实现"><a href="#6-6接口的实现" class="headerlink" title="6.6接口的实现"></a>6.6接口的实现</h3><p>当类实现接口的时候，类要实现接口中所有的方法。否则，类必须声明为抽象的类。</p>
<p>类使用implements关键字实现接口。在类声明中，Implements关键字放在class声明后面。</p>
<p>实现一个接口的语法，可以使用这个公式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...implements 接口名称[, 其他接口名称, 其他接口名称..., ...] ...</span><br></pre></td></tr></table></figure>

<p>重写接口中声明的方法时，需要注意以下规则：</p>
<ul>
<li>类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常。</li>
<li>类在重写方法时要保持一致的方法名，并且应该保持相同或者相兼容的返回值类型。</li>
<li>如果实现接口的类是抽象类，那么就没必要实现该接口的方法。</li>
</ul>
<p>在实现接口的时候，也要注意一些规则：</p>
<ul>
<li>一个类可以同时实现多个接口。</li>
<li>一个类只能继承一个类，但是能实现多个接口。</li>
<li>一个接口能继承另一个接口，这和类之间的继承比较相似。</li>
</ul>
<h3 id="6-7接口的继承"><a href="#6-7接口的继承" class="headerlink" title="6.7接口的继承"></a>6.7接口的继承</h3><p>一个接口能继承另一个接口，和类之间的继承方式比较相似。接口的继承使用extends关键字，子接口继承父接口的方法。</p>
<h3 id="6-8接口的多继承"><a href="#6-8接口的多继承" class="headerlink" title="6.8接口的多继承"></a>6.8接口的多继承</h3><p>在Java中，类的多继承是不合法，但接口允许多继承。</p>
<p>在接口的多继承中extends关键字只需要使用一次，在其后跟着继承接口。 如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hockey</span> <span class="keyword">extends</span> <span class="title">Sports</span>, <span class="title">Event</span></span></span><br></pre></td></tr></table></figure>

<h3 id="6-9标记接口"><a href="#6-9标记接口" class="headerlink" title="6.9标记接口"></a>6.9标记接口</h3><p>最常用的继承接口是没有包含任何方法的接口。</p>
<p>标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。</p>
<p>标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。</p>
<p>例如：java.awt.event 包中的 MouseListener 接口继承的 java.util.EventListener 接口定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventListener</span></span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的：</p>
<ul>
<li><p>建立一个公共的父接口：</p>
<p>正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p>
</li>
<li><p>向一个类添加数据类型：</p>
<p>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。</p>
</li>
</ul>
<h2 id="7-Java-枚举-enum"><a href="#7-Java-枚举-enum" class="headerlink" title="7.Java 枚举(enum)"></a>7.Java 枚举(enum)</h2><p>Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等。</p>
<p>Java 枚举类使用 enum 关键字来定义，各个常量使用逗号 <strong>,</strong> 来分割。</p>
<p>例如定义一个颜色的枚举类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum Color </span><br><span class="line">&#123; </span><br><span class="line">    RED, GREEN, BLUE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color</span><br><span class="line">&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 执行输出结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Color c1 = Color.RED;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：RED</p>
<h3 id="7-1内部类中使用枚举"><a href="#7-1内部类中使用枚举" class="headerlink" title="7.1内部类中使用枚举"></a>7.1内部类中使用枚举</h3><p>枚举类也可以声明在内部类中</p>
<h3 id="7-2迭代枚举元素"><a href="#7-2迭代枚举元素" class="headerlink" title="7.2迭代枚举元素"></a>7.2迭代枚举元素</h3><p>可以使用 for 语句来迭代枚举元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color</span><br><span class="line">&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Color myVar : Color.values()) &#123;</span><br><span class="line">      System.out.println(myVar);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和C++中的枚举区别很大</p>
<h3 id="7-3在-switch-中使用枚举类"><a href="#7-3在-switch-中使用枚举类" class="headerlink" title="7.3在 switch 中使用枚举类"></a>7.3在 switch 中使用枚举类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color</span><br><span class="line">&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Color myVar = Color.BLUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(myVar) &#123;</span><br><span class="line">      <span class="keyword">case</span> RED:</span><br><span class="line">        System.out.println(<span class="string">"红色"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> GREEN:</span><br><span class="line">         System.out.println(<span class="string">"绿色"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> BLUE:</span><br><span class="line">        System.out.println(<span class="string">"蓝色"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-4values-ordinal-和-valueOf-方法"><a href="#7-4values-ordinal-和-valueOf-方法" class="headerlink" title="7.4values(), ordinal() 和 valueOf() 方法"></a>7.4values(), ordinal() 和 valueOf() 方法</h3><p>enum 定义的枚举类默认继承了 java.lang.Enum 类，并实现了 java.lang.Seriablizable 和 java.lang.Comparable 两个接口。</p>
<p>values(), ordinal() 和 valueOf() 方法位于 java.lang.Enum 类中：</p>
<ul>
<li>values() 返回枚举类中所有的值。</li>
<li>ordinal()方法可以找到每个枚举常量的索引，就像数组索引一样。</li>
<li>valueOf()方法返回指定字符串值的枚举常量。</li>
</ul>
<h2 id="8-Java-包-package"><a href="#8-Java-包-package" class="headerlink" title="8.Java 包(package)"></a>8.Java 包(package)</h2><p>为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。</p>
<p>C++中使用using namespace的编译指令区别！！！</p>
<h3 id="8-1包的作用"><a href="#8-1包的作用" class="headerlink" title="8.1包的作用"></a>8.1包的作用</h3><ul>
<li>1、把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li>
<li>2、如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li>
<li>3、包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</li>
</ul>
<p>Java 使用包（package）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（class）、接口、枚举（enumerations）和注释（annotation）等。</p>
<p>包语句的语法格式为：</p>
<p><code>package pkg1[．pkg2[．pkg3…]];</code></p>
<h3 id="8-2创建包"><a href="#8-2创建包" class="headerlink" title="8.2创建包"></a>8.2创建包</h3><p><img src="/2020/12/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/8.png" alt></p>
<p>然后可以把自己的包打包成jar包，并调用</p>
<h3 id="8-3import-关键字"><a href="#8-3import-关键字" class="headerlink" title="8.3import 关键字"></a>8.3import 关键字</h3><p>为了能够使用某一个包的成员，我们需要在 Java 程序中明确导入该包。使用 “import” 语句可完成此功能。</p>
<p>在 java 源文件中 import 语句应位于 package 语句之后，所有类的定义之前，可以没有，也可以有多条，其语法格式为：<br><code>port package1[.package2…].(classname|*);</code></p>
<h3 id="8-4package-的目录结构"><a href="#8-4package-的目录结构" class="headerlink" title="8.4package 的目录结构"></a>8.4package 的目录结构</h3><p>类放在包中会有两种主要的结果：</p>
<ul>
<li>包名成为类名的一部分，正如我们前面讨论的一样。</li>
<li>包名必须与相应的字节码所在的目录结构相吻合。</li>
</ul>
<p>下面是管理你自己 java 中文件的一种简单方式：</p>
<ul>
<li>将类、接口等类型的源码放在一个文本中，这个文件的名字就是这个类型的名字，并以.java作为扩展名。例如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名 :  Car.java</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">package</span> vehicle;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 类实现  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接下来，把源文件放在一个目录中，这个目录要对应类所在包的名字。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">....\vehicle\Car.java</span><br></pre></td></tr></table></figure>

<ul>
<li><p>现在，正确的类名和路径将会是如下样子：</p>
<ul>
<li>类名 -&gt; vehicle.Car</li>
<li>路径名 -&gt; vehicle\Car.java (在 windows 系统中)</li>
</ul>
<p>通常，一个公司使用它互联网域名的颠倒形式来作为它的包名.例如：互联网域名是 runoob.com，所有的包名都以 com.runoob 开头。包名中的每一个部分对应一个子目录。</p>
<p>例如：有一个 <strong>com.runoob.test</strong> 的包，这个包包含一个叫做 Runoob.java 的源文件，那么相应的，应该有如下面的一连串子目录：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">....\com\runoob\test\Runoob.java</span><br></pre></td></tr></table></figure>

<ul>
<li>编译的时候，编译器为包中定义的每个类、接口等类型各创建一个不同的输出文件，输出文件的名字就是这个类型的名字，并加上 .class 作为扩展后缀。 例如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名: Runoob.java</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runoob</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Google</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>现在，我们用-d选项来编译这个文件，如下：</li>
</ul>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$javac -d . Runoob.java</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>这样会像下面这样放置编译了的文件：</li>
</ul>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\com\runoob\test\Runoob.class</span><br><span class="line">.\com\runoob\test\Google.class</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>你可以像下面这样来导入所有 <strong>\com\runoob\test\</strong> 中定义的类、接口等：</li>
</ul>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.runoob.test.*;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>编译之后的 .class 文件应该和 .java 源文件一样，它们放置的目录应该跟包的名字对应起来。但是，并不要求 .class 文件的路径跟相应的 .java 的路径一样。你可以分开来安排源码和类的目录。</li>
</ul>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;path-one&gt;\sources\com\runoob\test\Runoob.java</span><br><span class="line">&lt;path-two&gt;\classes\com\runoob\test\Google.class</span><br></pre></td></tr></table></figure>
</blockquote>
<p>这样，你可以将你的类目录分享给其他的编程人员，而不用透露自己的源码。用这种方法管理源码和类文件可以让编译器和java 虚拟机（JVM）可以找到你程序中使用的所有类型。</p>
<p>类目录的绝对路径叫做 <strong>class path</strong>。设置在系统变量 <strong>CLASSPATH</strong> 中。编译器和 java 虚拟机通过将 package 名字加到 class path 后来构造 .class 文件的路径。</p>
<p><path- two>\classes 是 class path，package 名字是 com.runoob.test,而编译器和 JVM 会在 <path-two>\classes\com\runoob\test 中找 .class 文件。</path-two></path-></p>
<p>一个 class path 可能会包含好几个路径，多路径应该用分隔符分开。默认情况下，编译器和 JVM 查找当前目录。JAR 文件按包含 Java 平台相关的类，所以他们的目录默认放在了 class path 中。</p>
<h3 id="8-5设置-CLASSPATH-系统变量"><a href="#8-5设置-CLASSPATH-系统变量" class="headerlink" title="8.5设置 CLASSPATH 系统变量"></a>8.5设置 CLASSPATH 系统变量</h3><p>就像安装JDK时设置系统变量一样用自己的包！！！</p>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础语法</title>
    <url>/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="Java-源程序与编译型运行区别"><a href="#Java-源程序与编译型运行区别" class="headerlink" title="Java 源程序与编译型运行区别"></a>Java 源程序与编译型运行区别</h2><p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/1.png" alt></p>
<h2 id="Java-对象和类"><a href="#Java-对象和类" class="headerlink" title="Java 对象和类"></a>Java 对象和类</h2><p>Java作为一种面向对象语言。支持以下基本概念：</p>
<ul>
<li>多态</li>
<li>继承</li>
<li>封装</li>
<li>抽象</li>
<li>类</li>
<li>对象</li>
<li>实例</li>
<li>方法</li>
<li>重载</li>
</ul>
<h3 id="对象和类的概念。"><a href="#对象和类的概念。" class="headerlink" title="对象和类的概念。"></a>对象和类的概念。</h3><ul>
<li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>
<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>
</ul>
<h3 id="一个类可以包含以下类型变量："><a href="#一个类可以包含以下类型变量：" class="headerlink" title="一个类可以包含以下类型变量："></a>一个类可以包含以下类型变量：</h3><ul>
<li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li>
<li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li>
<li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</li>
</ul>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。</p>
<p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这个构造器仅有一个参数：name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h3><p>当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p>
<ul>
<li>一个源文件中只能有一个 public 类</li>
<li>一个源文件可以有多个非 public 类</li>
<li>源文件的名称应该和 public 类的类名保持一致。例如：源文件中 public 类的类名是 Employee，那么源文件应该命名为Employee.java。</li>
<li>如果一个类定义在某个包中，那么 package 语句应该在源文件的首行。</li>
<li>如果源文件包含 import 语句，那么应该放在 package 语句和类定义之间。如果没有 package 语句，那么 import 语句应该在源文件中最前面。</li>
<li>import 语句和 package 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li>
</ul>
<h2 id="Java-基本数据类型"><a href="#Java-基本数据类型" class="headerlink" title="Java 基本数据类型"></a>Java 基本数据类型</h2><p>变量就是申请内存来存储值。也就是说，当创建变量的时候，需要在内存中申请空间。</p>
<p>内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来储存该类型数据。</p>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/2.png" alt></p>
<p>因此，通过定义不同类型的变量，可以在内存中储存整数、小数或者字符。</p>
<p>Java 的两大数据类型:</p>
<ul>
<li>内置数据类型</li>
<li>引用数据类型</li>
</ul>
<h3 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h3><p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p>
<p><strong>byte：</strong></p>
<ul>
<li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li>
<li>最小值是 <strong>-128（-2^7）</strong>；</li>
<li>最大值是 <strong>127（2^7-1）</strong>；</li>
<li>默认值是 <strong>0</strong>；</li>
<li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li>
<li>例子：byte a = 100，byte b = -50。</li>
</ul>
<p><strong>short：</strong></p>
<ul>
<li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li>
<li>最小值是 <strong>-32768（-2^15）</strong>；</li>
<li>最大值是 <strong>32767（2^15 - 1）</strong>；</li>
<li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li>
<li>默认值是 <strong>0</strong>；</li>
<li>例子：short s = 1000，short r = -20000。</li>
</ul>
<p><strong>int：</strong></p>
<ul>
<li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li>
<li>最小值是 <strong>-2,147,483,648（-2^31）</strong>；</li>
<li>最大值是 <strong>2,147,483,647（2^31 - 1）</strong>；</li>
<li>一般地整型变量默认为 int 类型；</li>
<li>默认值是 <strong>0</strong> ；</li>
<li>例子：int a = 100000, int b = -200000。</li>
</ul>
<p><strong>long：</strong></p>
<ul>
<li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li>
<li>最小值是 <strong>-9,223,372,036,854,775,808（-2^63）</strong>；</li>
<li>最大值是 <strong>9,223,372,036,854,775,807（2^63 -1）</strong>；</li>
<li>这种类型主要使用在需要比较大整数的系统上；</li>
<li>默认值是 <strong>0L</strong>；</li>
<li>例子： long a = 100000L，Long b = -200000L。<br>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</li>
</ul>
<p><strong>float：</strong></p>
<ul>
<li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li>
<li>float 在储存大型浮点数组的时候可节省内存空间；</li>
<li>默认值是 <strong>0.0f</strong>；</li>
<li>浮点数不能用来表示精确的值，如货币；</li>
<li>例子：float f1 = 234.5f。</li>
</ul>
<p><strong>double：</strong></p>
<ul>
<li>double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；</li>
<li>浮点数的默认类型为double类型；</li>
<li>double类型同样不能表示精确的值，如货币；</li>
<li>默认值是 <strong>0.0d</strong>；</li>
<li>例子：double d1 = 123.4。</li>
</ul>
<p><strong>boolean：</strong></p>
<ul>
<li>boolean数据类型表示一位的信息；</li>
<li>只有两个取值：true 和 false；</li>
<li>这种类型只作为一种标志来记录 true/false 情况；</li>
<li>默认值是 <strong>false</strong>；</li>
<li>例子：boolean one = true。</li>
</ul>
<p><strong>char：</strong></p>
<ul>
<li>char类型是一个单一的 16 位 Unicode 字符；</li>
<li>最小值是 <strong>\u0000</strong>（即为 0）；</li>
<li>最大值是 <strong>\uffff</strong>（即为65、535）；</li>
<li>char 数据类型可以储存任何字符；</li>
<li>例子：char letter = ‘A’;。</li>
</ul>
<h3 id="类型默认值"><a href="#类型默认值" class="headerlink" title="类型默认值"></a>类型默认值</h3><table>
<thead>
<tr>
<th align="center"><strong>数据类型</strong></th>
<th align="center"><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">0L</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">0.0f</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">0.0d</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">‘u0000’</td>
</tr>
<tr>
<td align="center">String (or any object)</td>
<td align="center">null</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">false</td>
</tr>
</tbody></table>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ul>
<li>在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型。变量一旦声明后，类型就不能被改变了。</li>
<li>对象、数组都是引用数据类型。</li>
<li>所有引用类型的默认值都是null。</li>
<li>一个引用变量可以用来引用任何与之兼容的类型。</li>
<li>例子：Site site = new Site(“Runoob”)。</li>
</ul>
<h3 id="Java-常量"><a href="#Java-常量" class="headerlink" title="Java 常量"></a>Java 常量</h3><p>常量在程序运行时是不能被修改的。</p>
<p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final double PI &#x3D; 3.1415927;</span><br></pre></td></tr></table></figure>

<h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">低  ------------------------------------&gt;  高</span><br><span class="line"></span><br><span class="line">byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double</span><br></pre></td></tr></table></figure>

<p>数据类型转换必须满足如下规则：</p>
<ul>
<li><ol>
<li>不能对boolean类型进行类型转换。</li>
</ol>
</li>
<li><ol start="2">
<li>不能把对象类型转换成不相关类的对象。</li>
</ol>
</li>
<li><ol start="3">
<li>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</li>
</ol>
</li>
<li><ol start="4">
<li>转换过程中可能导致溢出或损失精度，例如：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i &#x3D;128;   </span><br><span class="line">byte b &#x3D; (byte)i;</span><br></pre></td></tr></table></figure>

<p>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</p>
</li>
<li><ol start="5">
<li>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(int)23.7 &#x3D;&#x3D; 23;        </span><br><span class="line">(int)-45.89f &#x3D;&#x3D; -45</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="自动类型转换-1"><a href="#自动类型转换-1" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p>
<h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul>
<li><ol>
<li>条件是转换的数据类型必须是兼容的。</li>
</ol>
</li>
<li><ol start="2">
<li>格式：(type)value type是要强制类型转换后的数据类型 实例：</li>
</ol>
</li>
</ul>
<h4 id="隐含强制类型转换"><a href="#隐含强制类型转换" class="headerlink" title="隐含强制类型转换"></a>隐含强制类型转换</h4><ul>
<li><ol>
<li>整数的默认类型是 int。</li>
</ol>
</li>
<li><ol start="2">
<li>浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。</li>
</ol>
</li>
</ul>
<h2 id="Java-变量类型"><a href="#Java-变量类型" class="headerlink" title="Java 变量类型"></a>Java 变量类型</h2><ul>
<li>类变量：独立于方法之外的变量，用 static 修饰。</li>
<li>实例变量：独立于方法之外的变量，不过没有 static 修饰。</li>
<li>局部变量：类的方法中的变量。</li>
</ul>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/3.png" alt>)<img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/4.png" alt></p>
<h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><ul>
<li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li>
<li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li>
<li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li>
<li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li>
<li>实例变量可以声明在使用前或者使用后；</li>
<li>访问修饰符可以修饰实例变量；</li>
<li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li>
<li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li>
<li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li>
</ul>
<h3 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h3><ul>
<li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li>
<li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li>
<li>静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。</li>
<li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</li>
<li>静态变量在第一次被访问时创建，在程序结束时销毁。</li>
<li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</li>
<li>默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li>
<li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li>
<li>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</li>
</ul>
<h2 id="Java-修饰符"><a href="#Java-修饰符" class="headerlink" title="Java 修饰符"></a>Java 修饰符</h2><h3 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h3><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>
<ul>
<li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li>
<li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li>
<li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li>
<li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li>
</ul>
<p>我们可以通过以下表来说明访问权限：</p>
<table>
<thead>
<tr>
<th align="left">修饰符</th>
<th align="center">当前类</th>
<th align="center">同一包内</th>
<th align="center">子孙类(同一包)</th>
<th align="center">子孙类(不同包)</th>
<th align="center">其他包</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>public</code></td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
</tr>
<tr>
<td align="left"><code>protected</code></td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y/N</td>
<td align="center">N</td>
</tr>
<tr>
<td align="left"><code>default</code></td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">N</td>
<td align="center">N</td>
</tr>
<tr>
<td align="left"><code>private</code></td>
<td align="center">Y</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">N</td>
</tr>
</tbody></table>
<h4 id="访问控制和继承"><a href="#访问控制和继承" class="headerlink" title="访问控制和继承"></a>访问控制和继承</h4><ul>
<li>父类中声明为 public 的方法在子类中也必须为 public。</li>
<li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li>
<li>父类中声明为 private 的方法，不能够被继承。</li>
</ul>
<h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><p>static 修饰符，用来修饰类方法和类变量。</p>
<p>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>
<p>abstract 修饰符，用来创建抽象类和抽象方法。</p>
<p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p>
<h4 id="static-修饰符"><a href="#static-修饰符" class="headerlink" title="static 修饰符"></a>static 修饰符</h4><ul>
<li><p><strong>静态变量：</strong></p>
<p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p>
</li>
<li><p><strong>静态方法：</strong></p>
<p>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p>
</li>
</ul>
<h4 id="final-修饰符"><a href="#final-修饰符" class="headerlink" title="final 修饰符"></a>final 修饰符</h4><p><strong>final 变量：</strong></p>
<p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p>
<p><strong>final 方法</strong></p>
<p>父类中的 final 方法可以被子类继承，但是不能被子类重写。</p>
<p>声明 final 方法的主要目的是防止该方法的内容被修改。</p>
<p><strong>final 类</strong></p>
<p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p>
<h4 id="abstract-修饰符"><a href="#abstract-修饰符" class="headerlink" title="abstract 修饰符"></a>abstract 修饰符</h4><p><strong>抽象类：</strong></p>
<p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p>
<p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p>
<p><strong>抽象方法</strong></p>
<p>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。</p>
<p>抽象方法不能被声明成 final 和 static。</p>
<p>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</p>
<p>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</p>
<p>抽象方法的声明以分号结尾，例如：<strong>public abstract sample();</strong>。</p>
<h4 id="synchronized-修饰符"><a href="#synchronized-修饰符" class="headerlink" title="synchronized 修饰符"></a>synchronized 修饰符</h4><p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p>
<h4 id="transient-修饰符"><a href="#transient-修饰符" class="headerlink" title="transient 修饰符"></a>transient 修饰符</h4><p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p>
<p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p>
<p><code>public transient int limit = 55;   // 不会持久化</code></p>
<p><code>public int b; // 持久化</code></p>
<h4 id="volatile-修饰符"><a href="#volatile-修饰符" class="headerlink" title="volatile 修饰符"></a>volatile 修饰符</h4><p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p>
<p>一个 volatile 对象引用可能是 null。</p>
<h2 id="Java-运算符"><a href="#Java-运算符" class="headerlink" title="Java 运算符"></a>Java 运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table>
<thead>
<tr>
<th align="center">+</th>
<th align="center">加法 - 相加运算符两侧的值</th>
<th align="center">A + B 等于 30</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-</td>
<td align="center">减法 - 左操作数减去右操作数</td>
<td align="center">A – B 等于 -10</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘法 - 相乘操作符两侧的值</td>
<td align="center">A * B等于200</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">除法 - 左操作数除以右操作数</td>
<td align="center">保留整数部分</td>
</tr>
<tr>
<td align="center">％</td>
<td align="center">取余 - 左操作数除以右操作数的余数</td>
<td align="center">B%A等于0</td>
</tr>
<tr>
<td align="center">++</td>
<td align="center">自增: 操作数的值增加1</td>
<td align="center">B++ 或 ++B 等于 21（区别详见下文）</td>
</tr>
<tr>
<td align="center">–</td>
<td align="center">自减: 操作数的值减少1</td>
<td align="center">B– 或 –B 等于 19（区别详见下文）</td>
</tr>
</tbody></table>
<p>自增和自减前后缀区别：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x = ++i;<span class="comment">//先+1再用</span></span><br><span class="line"><span class="keyword">int</span> y = i++;<span class="comment">//先用再加1</span></span><br><span class="line"><span class="comment">//x=y=1,i=2</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/5.png" alt>)<img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/6.png" alt></p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td align="center">检查如果两个操作数的值是否相等，如果相等则条件为真。</td>
<td align="center">（A == B）为假。</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>
<td align="center">(A != B) 为真。</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>
<td align="center">（A&gt; B）为假。</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>
<td align="center">（A &lt;B）为真。</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>
<td align="center">（A&gt; = B）为假。</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>
<td align="center">（A &lt;= B）为真。</td>
</tr>
</tbody></table>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">描述</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="center">＆</td>
<td align="center">如果相对应位都是1，则结果为1，否则为0</td>
<td align="center">（A＆B），得到12，即0000 1100</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">如果相对应位都是 0，则结果为 0，否则为 1</td>
<td align="center">（A | B）得到61，即 0011 1101</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">如果相对应位值相同，则结果为0，否则为1</td>
<td align="center">（A ^ B）得到49，即 0011 0001</td>
</tr>
<tr>
<td align="center">〜</td>
<td align="center">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td>
<td align="center">（〜A）得到-61，即1100 0011</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="center">按位左移运算符。左操作数按位左移右操作数指定的位数。</td>
<td align="center">A &lt;&lt; 2得到240，即 1111 0000</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">按位右移运算符。左操作数按位右移右操作数指定的位数。</td>
<td align="center">A &gt;&gt; 2得到15即 1111</td>
</tr>
<tr>
<td align="center">&gt;&gt;&gt;</td>
<td align="center">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>
<td align="center">A&gt;&gt;&gt;2得到15即0000 1111</td>
</tr>
</tbody></table>
<p>&gt;&gt; &amp;&amp; &gt;&gt;&gt;的区别</p>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/7.png" alt>)<img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/8.png" alt></p>
<p>前者高位补的是原来的值（即符号位）——算术右移（汇编中的概念）</p>
<p>后者补0——逻辑右移（汇编中的概念）</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">描述</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;&amp;</td>
<td align="center">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>
<td align="center">（A &amp;&amp; B）为假。</td>
</tr>
<tr>
<td align="center">| |</td>
<td align="center">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>
<td align="center">（A | | B）为真。</td>
</tr>
<tr>
<td align="center">！</td>
<td align="center">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>
<td align="center">！（A &amp;&amp; B）为真。</td>
</tr>
</tbody></table>
<p>和C++，C一样也是短路计算，比如求a&amp;&amp;b，a，b均是表达式，当a的值为0，b的值就不会去计算。</p>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/9.png" alt></p>
<p>输出a=0</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">描述</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>
<td align="center">C = A + B将把A + B得到的值赋给C</td>
</tr>
<tr>
<td align="center">+ =</td>
<td align="center">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>
<td align="center">C + = A等价于C = C + A</td>
</tr>
<tr>
<td align="center">- =</td>
<td align="center">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>
<td align="center">C - = A等价于C = C - A</td>
</tr>
<tr>
<td align="center">* =</td>
<td align="center">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>
<td align="center">C * = A等价于C = C * A</td>
</tr>
<tr>
<td align="center">/ =</td>
<td align="center">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>
<td align="center">C / = A，C 与 A 同类型时等价于 C = C / A</td>
</tr>
<tr>
<td align="center">（％）=</td>
<td align="center">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>
<td align="center">C％= A等价于C = C％A</td>
</tr>
<tr>
<td align="center">&lt;&lt; =</td>
<td align="center">左移位赋值运算符</td>
<td align="center">C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td>
</tr>
<tr>
<td align="center">&gt;&gt; =</td>
<td align="center">右移位赋值运算符</td>
<td align="center">C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td>
</tr>
<tr>
<td align="center">＆=</td>
<td align="center">按位与赋值运算符</td>
<td align="center">C＆= 2等价于C = C＆2</td>
</tr>
<tr>
<td align="center">^ =</td>
<td align="center">按位异或赋值操作符</td>
<td align="center">C ^ = 2等价于C = C ^ 2</td>
</tr>
<tr>
<td align="center">| =</td>
<td align="center">按位或赋值操作符</td>
<td align="center">C | = 2等价于C = C | 2</td>
</tr>
</tbody></table>
<p>和C，C++一样</p>
<h3 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（?:）"></a>条件运算符（?:）</h3><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">variable x &#x3D; (expression) ? value if true : value if false</span><br></pre></td></tr></table></figure>

<p>C++中也有这种写法</p>
<h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">( Object reference variable ) instanceof  (class&#x2F;interface type)</span><br></pre></td></tr></table></figure>

<p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p>
<p>下面是一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String name &#x3D; &quot;James&quot;;</span><br><span class="line">boolean result &#x3D; name instanceof String; &#x2F;&#x2F; 由于 name 是 String 类型，所以返回真</span><br></pre></td></tr></table></figure>

<p>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> &#123;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">extends</span> <span class="title">Vehicle</span> &#123;</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Vehicle a = <span class="keyword">new</span> Car();</span><br><span class="line">      boolean result =  a instanceof Car;</span><br><span class="line">      System.out.println( result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java运算符优先级"><a href="#Java运算符优先级" class="headerlink" title="Java运算符优先级"></a>Java运算符优先级</h3><table>
<thead>
<tr>
<th align="center">类别</th>
<th align="center">操作符</th>
<th align="center">关联性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">后缀</td>
<td align="center">() [] . (点操作符)</td>
<td align="center">左到右</td>
</tr>
<tr>
<td align="center">一元</td>
<td align="center">expr++ expr–</td>
<td align="center">从左到右</td>
</tr>
<tr>
<td align="center">一元</td>
<td align="center">++expr –expr + - ～ ！</td>
<td align="center">从右到左</td>
</tr>
<tr>
<td align="center">乘性</td>
<td align="center">* /％</td>
<td align="center">左到右</td>
</tr>
<tr>
<td align="center">加性</td>
<td align="center">+ -</td>
<td align="center">左到右</td>
</tr>
<tr>
<td align="center">移位</td>
<td align="center">&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td>
<td align="center">左到右</td>
</tr>
<tr>
<td align="center">关系</td>
<td align="center">&gt; &gt;= &lt; &lt;=</td>
<td align="center">左到右</td>
</tr>
<tr>
<td align="center">相等</td>
<td align="center">== !=</td>
<td align="center">左到右</td>
</tr>
<tr>
<td align="center">按位与</td>
<td align="center">＆</td>
<td align="center">左到右</td>
</tr>
<tr>
<td align="center">按位异或</td>
<td align="center">^</td>
<td align="center">左到右</td>
</tr>
<tr>
<td align="center">按位或</td>
<td align="center">|</td>
<td align="center">左到右</td>
</tr>
<tr>
<td align="center">逻辑与</td>
<td align="center">&amp;&amp;</td>
<td align="center">左到右</td>
</tr>
<tr>
<td align="center">逻辑或</td>
<td align="center">| |</td>
<td align="center">左到右</td>
</tr>
<tr>
<td align="center">条件</td>
<td align="center">？：</td>
<td align="center">从右到左</td>
</tr>
<tr>
<td align="center">赋值</td>
<td align="center">= + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | =</td>
<td align="center">从右到左</td>
</tr>
<tr>
<td align="center">逗号</td>
<td align="center">，</td>
<td align="center">左到右</td>
</tr>
</tbody></table>
<p>关联性也就是C++中所谓的结合性</p>
<h2 id="Java-循环结构-for-while-及-do…while"><a href="#Java-循环结构-for-while-及-do…while" class="headerlink" title="Java 循环结构 - for, while 及 do…while"></a>Java 循环结构 - for, while 及 do…while</h2><p>这块和C++几乎一样</p>
<h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>( 布尔表达式 ) &#123;  <span class="comment">//循环内容 &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="do…while-循环（至少执行一次循环）"><a href="#do…while-循环（至少执行一次循环）" class="headerlink" title="do…while 循环（至少执行一次循环）"></a>do…while 循环（至少执行一次循环）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">       <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure>

<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java-增强-for-循环（C-11也新增）"><a href="#Java-增强-for-循环（C-11也新增）" class="headerlink" title="Java 增强 for 循环（C++11也新增）"></a>Java 增强 for 循环（C++11也新增）</h3><p>C++中叫基于范围的循环，python中就是这种循环</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>声明语句：</strong>声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>
<p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/10.png" alt>)<img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/11.png" alt></p>
<h3 id="break-关键字"><a href="#break-关键字" class="headerlink" title="break 关键字"></a>break 关键字</h3><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p>
<p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p>
<h3 id="continue-关键字"><a href="#continue-关键字" class="headerlink" title="continue 关键字"></a>continue 关键字</h3><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p>
<p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p>
<p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p>
<h2 id="Java-条件语句-if…else"><a href="#Java-条件语句-if…else" class="headerlink" title="Java 条件语句 - if…else"></a>Java 条件语句 - if…else</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>语法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式为true将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式的值为true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式的值为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可嵌套，和C++一模一样</p>
<h2 id="Java-switch-case-语句"><a href="#Java-switch-case-语句" class="headerlink" title="Java switch case 语句"></a>Java switch case 语句</h2><p>switch case 语句语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Java-Number-amp-Math-类"><a href="#Java-Number-amp-Math-类" class="headerlink" title="Java Number &amp; Math 类"></a>Java Number &amp; Math 类</h2><p>一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：<strong>byte、int、long、double</strong> 等。</p>
<p>然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。</p>
<p>所有的包装类<strong>（Integer、Long、Byte、Double、Float、Short）</strong>都是抽象类 Number 的子类。</p>
<table>
<thead>
<tr>
<th align="center">包装类</th>
<th align="center">基本数据类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Boolean</td>
<td align="center">boolean</td>
</tr>
<tr>
<td align="center">Byte</td>
<td align="center">byte</td>
</tr>
<tr>
<td align="center">Short</td>
<td align="center">short</td>
</tr>
<tr>
<td align="center">Integer</td>
<td align="center">int</td>
</tr>
<tr>
<td align="center">Long</td>
<td align="center">long</td>
</tr>
<tr>
<td align="center">Character</td>
<td align="center">char</td>
</tr>
<tr>
<td align="center">Float</td>
<td align="center">float</td>
</tr>
<tr>
<td align="center">Double</td>
<td align="center">double</td>
</tr>
</tbody></table>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/12.png" alt></p>
<p>这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Integer x = <span class="number">5</span>;</span><br><span class="line">      x =  x + <span class="number">10</span>;</span><br><span class="line">      System.out.println(x); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。</p>
<h2 id="Java-Math-类"><a href="#Java-Math-类" class="headerlink" title="Java Math 类"></a>Java Math 类</h2><p>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。</p>
<p>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</p>
<p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String []args)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"90 度的正弦值："</span> + Math.<span class="built_in">sin</span>(Math.PI/<span class="number">2</span>));  </span><br><span class="line">        System.out.println(<span class="string">"0度的余弦值："</span> + Math.<span class="built_in">cos</span>(<span class="number">0</span>));  </span><br><span class="line">        System.out.println(<span class="string">"60度的正切值："</span> + Math.<span class="built_in">tan</span>(Math.PI/<span class="number">3</span>));  </span><br><span class="line">        System.out.println(<span class="string">"1的反正切值： "</span> + Math.<span class="built_in">atan</span>(<span class="number">1</span>));  </span><br><span class="line">        System.out.println(<span class="string">"π/2的角度值："</span> + Math.toDegrees(Math.PI/<span class="number">2</span>));  </span><br><span class="line">        System.out.println(Math.PI);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Number-amp-Math-类方法"><a href="#Number-amp-Math-类方法" class="headerlink" title="Number &amp; Math 类方法"></a>Number &amp; Math 类方法</h2><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法与描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><a href="https://www.runoob.com/java/number-xxxvalue.html" target="_blank" rel="noopener">xxxValue()</a> 将 Number 对象转换为xxx数据类型的值并返回。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><a href="https://www.runoob.com/java/number-compareto.html" target="_blank" rel="noopener">compareTo()</a> 将number对象与参数比较。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><a href="https://www.runoob.com/java/number-equals.html" target="_blank" rel="noopener">equals()</a> 判断number对象是否与参数相等。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><a href="https://www.runoob.com/java/number-valueof.html" target="_blank" rel="noopener">valueOf()</a> 返回一个 Number 对象指定的内置数据类型</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><a href="https://www.runoob.com/java/number-tostring.html" target="_blank" rel="noopener">toString()</a> 以字符串形式返回值。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><a href="https://www.runoob.com/java/number-parseInt.html" target="_blank" rel="noopener">parseInt()</a> 将字符串解析为int类型。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><a href="https://www.runoob.com/java/number-abs.html" target="_blank" rel="noopener">abs()</a> 返回参数的绝对值。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><a href="https://www.runoob.com/java/number-ceil.html" target="_blank" rel="noopener">ceil()</a> 返回大于等于( &gt;= )给定参数的的最小整数，类型为双精度浮点型。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><a href="https://www.runoob.com/java/number-floor.html" target="_blank" rel="noopener">floor()</a> 返回小于等于（&lt;=）给定参数的最大整数 。</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><a href="https://www.runoob.com/java/number-rint.html" target="_blank" rel="noopener">rint()</a> 返回与参数最接近的整数。返回类型为double。</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><a href="https://www.runoob.com/java/number-round.html" target="_blank" rel="noopener">round()</a> 它表示<strong>四舍五入</strong>，算法为 <strong>Math.floor(x+0.5)</strong>，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><a href="https://www.runoob.com/java/number-min.html" target="_blank" rel="noopener">min()</a> 返回两个参数中的最小值。</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><a href="https://www.runoob.com/java/number-max.html" target="_blank" rel="noopener">max()</a> 返回两个参数中的最大值。</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><a href="https://www.runoob.com/java/number-exp.html" target="_blank" rel="noopener">exp()</a> 返回自然数底数e的参数次方。</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left"><a href="https://www.runoob.com/java/number-log.html" target="_blank" rel="noopener">log()</a> 返回参数的自然数底数的对数值。</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left"><a href="https://www.runoob.com/java/number-pow.html" target="_blank" rel="noopener">pow()</a> 返回第一个参数的第二个参数次方。</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left"><a href="https://www.runoob.com/java/number-sqrt.html" target="_blank" rel="noopener">sqrt()</a> 求参数的算术平方根。</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left"><a href="https://www.runoob.com/java/number-sin.html" target="_blank" rel="noopener">sin()</a> 求指定double类型参数的正弦值。</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left"><a href="https://www.runoob.com/java/number-cos.html" target="_blank" rel="noopener">cos()</a> 求指定double类型参数的余弦值。</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left"><a href="https://www.runoob.com/java/number-tan.html" target="_blank" rel="noopener">tan()</a> 求指定double类型参数的正切值。</td>
</tr>
<tr>
<td align="left">21</td>
<td align="left"><a href="https://www.runoob.com/java/number-asin.html" target="_blank" rel="noopener">asin()</a> 求指定double类型参数的反正弦值。</td>
</tr>
<tr>
<td align="left">22</td>
<td align="left"><a href="https://www.runoob.com/java/number-acos.html" target="_blank" rel="noopener">acos()</a> 求指定double类型参数的反余弦值。</td>
</tr>
<tr>
<td align="left">23</td>
<td align="left"><a href="https://www.runoob.com/java/number-atan.html" target="_blank" rel="noopener">atan()</a> 求指定double类型参数的反正切值。</td>
</tr>
<tr>
<td align="left">24</td>
<td align="left"><a href="https://www.runoob.com/java/number-atan2.html" target="_blank" rel="noopener">atan2()</a> 将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。</td>
</tr>
<tr>
<td align="left">25</td>
<td align="left"><a href="https://www.runoob.com/java/number-todegrees.html" target="_blank" rel="noopener">toDegrees()</a> 将参数转化为角度。</td>
</tr>
<tr>
<td align="left">26</td>
<td align="left"><a href="https://www.runoob.com/java/number-toradians.html" target="_blank" rel="noopener">toRadians()</a> 将角度转换为弧度。</td>
</tr>
<tr>
<td align="left">27</td>
<td align="left"><a href="https://www.runoob.com/java/number-random.html" target="_blank" rel="noopener">random()</a> 返回一个随机数。</td>
</tr>
</tbody></table>
<h2 id="Java-Character-类"><a href="#Java-Character-类" class="headerlink" title="Java Character 类"></a>Java Character 类</h2><p>Character 类用于对单个字符进行操作。</p>
<p>Character 类在对象中包装一个基本类型 <strong>char</strong> 的值</p>
<h3 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h3><table>
<thead>
<tr>
<th align="center">转义序列</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\t</td>
<td align="center">在文中该处插入一个tab键</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">在文中该处插入一个后退键</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">在文中该处换行</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">在文中该处插入回车</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">在文中该处插入换页符</td>
</tr>
<tr>
<td align="center">&#39;</td>
<td align="center">在文中该处插入单引号</td>
</tr>
<tr>
<td align="center">&quot;</td>
<td align="center">在文中该处插入双引号</td>
</tr>
<tr>
<td align="center">\</td>
<td align="center">在文中该处插入反斜杠</td>
</tr>
</tbody></table>
<h3 id="Character-方法"><a href="#Character-方法" class="headerlink" title="Character 方法"></a>Character 方法</h3><p>C++中是cctype头文件中的方法。</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法与描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">isLetter() 是否是一个字母</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">isDigit()是否是一个数字字符</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">isWhitespace()是否是一个空白字符</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">isUpperCase() 是否是大写字母</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">isLowerCase()是否是小写字母</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">toUpperCase() 指定字母的大写形式</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">toLowerCase() 指定字母的小写形式</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">toString返回字符的字符串形式，字符串的长度仅为1</td>
</tr>
</tbody></table>
<h2 id="Java-String-类"><a href="#Java-String-类" class="headerlink" title="Java String 类"></a>Java String 类</h2><p>字符串广泛应用 在 Java 编程中，在 Java 中字符串属于对象，Java 提供了 String 类来创建和操作字符串。</p>
<h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><p>String 创建的字符串存储在公共池中，而 new 创建的字符串对象在堆上：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">"Runoob"</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line">String s2 = <span class="string">"Runoob"</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line">String s3 = s1;                    <span class="comment">// 相同引用</span></span><br><span class="line">String s4 = <span class="keyword">new</span> String(<span class="string">"Runoob"</span>);   <span class="comment">// String 对象创建</span></span><br><span class="line">String s5 = <span class="keyword">new</span> String(<span class="string">"Runoob"</span>);   <span class="comment">// String 对象创建</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/13.png" alt></p>
<h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>String 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。</p>
<p>！！！没有size方法，C++STL中有size和length</p>
<h3 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><p>String 类提供了连接两个字符串的方法：</p>
<ul>
<li><p>返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如：</p>
</li>
<li><p>更常用的是使用’+’操作符来连接字符串</p>
</li>
</ul>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/14.png" alt>)<img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/15.png" alt></p>
<h3 id="创建格式化字符串"><a href="#创建格式化字符串" class="headerlink" title="创建格式化字符串"></a>创建格式化字符串</h3><p>我们知道输出格式化数字可以使用 printf() 和 format() 方法。</p>
<p>String 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。</p>
<p>String 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p>
<h3 id="String-方法"><a href="#String-方法" class="headerlink" title="String 方法"></a>String 方法</h3><p>参看 <a href="https://www.runoob.com/manual/jdk1.6/java/lang/String.html" target="_blank" rel="noopener">Java String API</a> 文档:</p>
<h2 id="Java-StringBuffer-和-StringBuilder-类"><a href="#Java-StringBuffer-和-StringBuilder-类" class="headerlink" title="Java StringBuffer 和 StringBuilder 类"></a>Java StringBuffer 和 StringBuilder 类</h2><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p>
<p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/16.png" alt></p>
<p>在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用 StringBuffer。</p>
<p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p>
<p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</p>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/17.png" alt></p>
<p>然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p>
<h3 id="StringBuffer-方法"><a href="#StringBuffer-方法" class="headerlink" title="StringBuffer 方法"></a>StringBuffer 方法</h3><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">方法描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">int capacity() 返回当前容量。</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">char charAt(int index) 返回此序列中指定索引处的 <code>char</code> 值。</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">void ensureCapacity(int minimumCapacity) 确保容量至少等于指定的最小值。</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 将字符从此序列复制到目标字符数组 <code>dst</code>。</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">int indexOf(String str) 返回第一次出现的指定子字符串在该字符串中的索引。</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">int indexOf(String str, int fromIndex) 从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引。</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">int lastIndexOf(String str) 返回最右边出现的指定子字符串在此字符串中的索引。</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">int lastIndexOf(String str, int fromIndex) 返回 String 对象中子字符串最后出现的位置。</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">int length()  返回长度（字符数）。</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">void setCharAt(int index, char ch) 将给定索引处的字符设置为 <code>ch</code>。</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">void setLength(int newLength) 设置字符序列的长度。</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">CharSequence subSequence(int start, int end) 返回一个新的字符序列，该字符序列是此序列的子序列。</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">String substring(int start) 返回一个新的 <code>String</code>，它包含此字符序列当前所包含的字符子序列。</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">String substring(int start, int end) 返回一个新的 <code>String</code>，它包含此序列当前所包含的字符子序列。</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">String toString() 返回此序列中数据的字符串表示形式。</td>
</tr>
</tbody></table>
<h2 id="Java-数组"><a href="#Java-数组" class="headerlink" title="Java 数组"></a>Java 数组</h2><h3 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar;   <span class="comment">// 首选的方法</span></span><br><span class="line"> </span><br><span class="line">或</span><br><span class="line"> </span><br><span class="line">dataType arrayRefVar[];  <span class="comment">// 效果相同，但不是首选方法 </span></span><br><span class="line"><span class="comment">//dataType arrayRefVar[] 风格是来自 C/C++ 语言 ，在Java中采用是为了让 C/C++ 程序员能够快速理解java语言。</span></span><br></pre></td></tr></table></figure>

<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>Java语言使用new操作符来创建数组，语法如下：</p>
<p><code>arrayRefVar = new dataType[arraySize];</code></p>
<p>上面的语法语句做了两件事：</p>
<ul>
<li>一、使用 dataType[arraySize] 创建了一个数组。</li>
<li>二、把新创建的数组的引用赋值给变量 arrayRefVar。</li>
</ul>
<p>可以理解成返回的是指针，C/C++中就有这种概念。</p>
<h3 id="数组作为函数的参数"><a href="#数组作为函数的参数" class="headerlink" title="数组作为函数的参数"></a>数组作为函数的参数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">    System.out.print(<span class="built_in">array</span>[i] + <span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组作为函数的返回值"><a href="#数组作为函数的返回值" class="headerlink" title="数组作为函数的返回值"></a>数组作为函数的返回值</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[] <span class="built_in">list</span>) &#123;</span><br><span class="line">  <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">list</span>.length];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = result.length - <span class="number">1</span>; i &lt; <span class="built_in">list</span>.length; i++, j--) &#123;</span><br><span class="line">    result[j] = <span class="built_in">list</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际本质是在堆申请内存空间之后，返回的是引用，也就是数组在堆内存中的位置。</p>
<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：</p>
<p><code>String str[][] = new String[3][4];</code></p>
<h3 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h3><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。</p>
<p>具有以下功能：</p>
<ul>
<li>给数组赋值：通过 fill 方法。</li>
<li>对数组排序：通过 sort 方法,按升序。</li>
<li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li>
<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">方法和说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left"><strong>public static int binarySearch(Object[] a, Object key)</strong> 用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left"><strong>public static boolean equals(long[] a, long[] a2)</strong> 如果两个指定的 long 型数组彼此<em>相等</em>，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left"><strong>public static void fill(int[] a, int val)</strong> 将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left"><strong>public static void sort(Object[] a)</strong> 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>
</tr>
</tbody></table>
<h2 id="Java-日期时间"><a href="#Java-日期时间" class="headerlink" title="Java 日期时间"></a>Java 日期时间</h2><p>java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。</p>
<p>第一个构造函数使用当前日期和时间来初始化对象。</p>
<p>第一个构造函数使用当前日期和时间来初始化对象。<code>Date( )</code></p>
<p>第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。<code>Date(long millisec)</code></p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法和描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>boolean after(Date date)</strong> 若当调用此方法的Date对象在指定日期之后返回true,否则返回false。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>boolean before(Date date)</strong> 若当调用此方法的Date对象在指定日期之前返回true,否则返回false。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>Object clone( )</strong> 返回此对象的副本。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>int compareTo(Date date)</strong> 比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>int compareTo(Object obj)</strong> 若obj是Date类型则操作等同于compareTo(Date) 。否则它抛出ClassCastException。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>boolean equals(Object date)</strong> 当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><strong>long getTime( )</strong> 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><strong>int hashCode( )</strong>  返回此对象的哈希码值。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><strong>void setTime(long time)</strong>   用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><strong>String toString( )</strong> 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。</td>
</tr>
</tbody></table>
<h3 id="获取当前日期时间"><a href="#获取当前日期时间" class="headerlink" title="获取当前日期时间"></a>获取当前日期时间</h3><p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/18.png" alt>)<img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/19.png" alt></p>
<h3 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h3><p>Java使用以下三种方法来比较两个日期：</p>
<ul>
<li>使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。</li>
<li>使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。</li>
<li>使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。</li>
</ul>
<h3 id="使用-SimpleDateFormat-格式化日期"><a href="#使用-SimpleDateFormat-格式化日期" class="headerlink" title="使用 SimpleDateFormat 格式化日期"></a>使用 SimpleDateFormat 格式化日期</h3><p>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如：</p>
<p><code>SimpleDateFormat ft = new SimpleDateFormat (&quot;yyyy-MM-dd hh:mm:ss&quot;);</code></p>
<p>这一行代码确立了转换的格式，其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。</p>
<p><strong>注意</strong>:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。</p>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/20.png" alt>)<img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/21.png" alt></p>
<h3 id="解析字符串为时间"><a href="#解析字符串为时间" class="headerlink" title="解析字符串为时间"></a>解析字符串为时间</h3><p>SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat (<span class="string">"yyyy-MM-dd"</span>); </span><br><span class="line"> </span><br><span class="line">      String input = args.length == <span class="number">0</span> ? <span class="string">"1818-11-11"</span> : args[<span class="number">0</span>]; </span><br><span class="line"> </span><br><span class="line">      System.out.print(input + <span class="string">" Parses as "</span>); </span><br><span class="line"> </span><br><span class="line">      Date t; </span><br><span class="line"> </span><br><span class="line">      <span class="keyword">try</span> &#123; </span><br><span class="line">          t = ft.parse(input); </span><br><span class="line">          System.out.println(t); </span><br><span class="line">      &#125; <span class="keyword">catch</span> (ParseException e) &#123; </span><br><span class="line">          System.out.println(<span class="string">"Unparseable using "</span> + ft); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java-休眠-sleep"><a href="#Java-休眠-sleep" class="headerlink" title="Java 休眠(sleep)"></a>Java 休眠(sleep)</h3><p>sleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。</p>
<p>你可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。</p>
<h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><p>我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。</p>
<p>Calendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。</p>
<p>Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。</p>
<h3 id="GregorianCalendar类"><a href="#GregorianCalendar类" class="headerlink" title="GregorianCalendar类"></a>GregorianCalendar类</h3><p>Calendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。</p>
<p>Calendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。</p>
<h2 id="Java-正则表达式"><a href="#Java-正则表达式" class="headerlink" title="Java 正则表达式"></a>Java 正则表达式</h2><p>ava 正则表达式和 Perl 的是最为相似的。</p>
<p>java.util.regex 包主要包括以下三个类：</p>
<ul>
<li><p>Pattern 类：</p>
<p>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p>
</li>
<li><p>Matcher 类：</p>
<p>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p>
</li>
<li><p>PatternSyntaxException：</p>
<p>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p>
</li>
</ul>
<h2 id="Java-方法"><a href="#Java-方法" class="headerlink" title="Java 方法"></a>Java 方法</h2><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修饰符：</strong>修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li>
<li><strong>返回值类型 ：</strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字<strong>void</strong>。</li>
<li><strong>方法名：</strong>是方法的实际名称。方法名和参数表共同构成方法签名。</li>
<li><strong>参数类型：</strong>参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li>
<li><strong>方法体：</strong>方法体包含具体的语句，定义该方法的功能。</li>
</ul>
<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。</p>
<p>Java编译器根据方法签名判断哪个方法应该被调用。</p>
<p>方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。</p>
<p>重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。</p>
<h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><p>当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。</p>
<p>不管你是否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个默认构造方法，默认构造方法的访问修改符和类的访问修改符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。</p>
<p>一旦你定义了自己的构造方法，默认构造方法就会失效。</p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>JDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。</p>
<p>方法的可变参数的声明如下所示：</p>
<p><code>typeName... parameterName</code></p>
<p>在方法声明中，在指定参数类型后加一个省略号(…) 。</p>
<p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p>
<h3 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize() 方法"></a>finalize() 方法</h3><p>Java 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。</p>
<p>例如，你可以使用 finalize() 来确保一个对象打开的文件被关闭了。</p>
<p>在 finalize() 方法里，你必须指定在对象销毁时候要执行的操作。</p>
<p>finalize() 一般格式是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 在这里终结代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。</p>
<p>当然，Java 的内存回收可以由 JVM 来自动完成。如果你手动使用，则可以使用上面的方法。</p>
<h2 id="Java-流-Stream-、文件-File-和IO"><a href="#Java-流-Stream-、文件-File-和IO" class="headerlink" title="Java 流(Stream)、文件(File)和IO"></a>Java 流(Stream)、文件(File)和IO</h2><h3 id="读取控制台输入"><a href="#读取控制台输入" class="headerlink" title="读取控制台输入"></a>读取控制台输入</h3><p>Java 的控制台输入由 System.in 完成。</p>
<p>为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。</p>
<p>下面是创建 BufferedReader 的基本语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> </span><br><span class="line">                      InputStreamReader(System.in));</span><br></pre></td></tr></table></figure>

<p>BufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。</p>
<h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><p>如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。</p>
<p>下图是一个描述输入流和输出流的类层次图。</p>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/22.png" alt></p>
<h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><p>该流用于从文件读取数据，它的对象可以用关键字 new 来创建。</p>
<p>有多种构造方法可用来创建对象。</p>
<p>可以使用字符串类型的文件名来创建一个输入流对象来读取文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InputStream f &#x3D; new FileInputStream(&quot;C:&#x2F;java&#x2F;hello&quot;);</span><br></pre></td></tr></table></figure>

<p>也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File f &#x3D; new File(&quot;C:&#x2F;java&#x2F;hello&quot;); InputStream out &#x3D; new FileInputStream(f);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left"><strong>序号</strong></th>
<th align="left"><strong>方法及描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>public void close() throws IOException{}</strong> 关闭此文件输入流并释放与此流有关的所有系统资源。抛出IOException异常。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>protected void finalize()throws IOException {}</strong> 这个方法清除与该文件的连接。确保在不再引用文件输入流时调用其 close 方法。抛出IOException异常。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>public int read(int r)throws IOException{}</strong> 这个方法从 InputStream 对象读取指定字节的数据。返回为整数值。返回下一字节数据，如果已经到结尾则返回-1。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>public int read(byte[] r) throws IOException{}</strong> 这个方法从输入流读取r.length长度的字节。返回读取的字节数。如果是文件结尾则返回-1。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>public int available() throws IOException{}</strong> 返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取的字节数。返回一个整数值。</td>
</tr>
</tbody></table>
<h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><p>该类用来创建一个文件并向文件中写数据。</p>
<p>如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。</p>
<p>有两个构造方法可以用来创建 FileOutputStream 对象。</p>
<p>使用字符串类型的文件名来创建一个输出流对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OutputStream f &#x3D; new FileOutputStream(&quot;C:&#x2F;java&#x2F;hello&quot;)</span><br></pre></td></tr></table></figure>

<p>也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File f &#x3D; new File(&quot;C:&#x2F;java&#x2F;hello&quot;); OutputStream f &#x3D; new FileOutputStream(f);</span><br></pre></td></tr></table></figure>

<h3 id="Java中的目录"><a href="#Java中的目录" class="headerlink" title="Java中的目录"></a>Java中的目录</h3><h4 id="创建目录："><a href="#创建目录：" class="headerlink" title="创建目录："></a>创建目录：</h4><p>File类中有两个方法可以用来创建文件夹：</p>
<ul>
<li><strong>mkdir( )</strong>方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。</li>
<li><strong>mkdirs()</strong>方法创建一个文件夹和它的所有父文件夹。</li>
</ul>
<h3 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h3><p>一个目录其实就是一个 File 对象，它包含其他文件和文件夹。</p>
<p>如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。</p>
<p>可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。</p>
<p>删除文件可以使用 <strong>java.io.File.delete()</strong> 方法。</p>
<h3 id="删除目录或文件"><a href="#删除目录或文件" class="headerlink" title="删除目录或文件"></a>删除目录或文件</h3><p>需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。</p>
<h2 id="Java-Scanner-类"><a href="#Java-Scanner-类" class="headerlink" title="Java Scanner 类"></a>Java Scanner 类</h2><p>java.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。</p>
<p>下面是创建 Scanner 对象的基本语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scanner s &#x3D; new Scanner(System.in);</span><br></pre></td></tr></table></figure>

<p>通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：</p>
<h4 id="next-与-nextLine-区别"><a href="#next-与-nextLine-区别" class="headerlink" title="next() 与 nextLine() 区别"></a>next() 与 nextLine() 区别</h4><p>next():</p>
<ul>
<li>1、一定要读取到有效字符后才可以结束输入。</li>
<li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li>
<li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li>
<li>next() 不能得到带有空格的字符串。</li>
</ul>
<p>nextLine()：</p>
<ul>
<li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li>
<li>2、可以获得空白。</li>
</ul>
<h2 id="Java-异常处理"><a href="#Java-异常处理" class="headerlink" title="Java 异常处理"></a>Java 异常处理</h2><p>异常发生的原因有很多，通常包含以下几大类：</p>
<ul>
<li>用户输入了非法数据。</li>
<li>要打开的文件不存在。</li>
<li>网络通信时连接中断，或者JVM内存溢出。</li>
</ul>
<p>这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-</p>
<p>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：</p>
<ul>
<li><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>
<li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>
<li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li>
</ul>
<h3 id="Exception-类的层次"><a href="#Exception-类的层次" class="headerlink" title="Exception 类的层次"></a>Exception 类的层次</h3><p>所有的异常类是从 java.lang.Exception 类继承的子类。</p>
<p>Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error 。</p>
<p>Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。</p>
<p>Error 用来指示运行时环境发生的错误。</p>
<p>例如，JVM 内存溢出。一般地，程序不会从错误中恢复。</p>
<p>异常类有两个主要的子类：IOException 类和 RuntimeException 类。</p>
<p><img src="/2020/12/26/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/23.jpg" alt></p>
<h3 id="Java-内置异常类"><a href="#Java-内置异常类" class="headerlink" title="Java 内置异常类"></a>Java 内置异常类</h3><p>Java 语言定义了一些异常类在 java.lang 标准包中。</p>
<p>标准运行时异常类的子类是最常见的异常类。由于 java.lang 包是默认加载到所有的 Java 程序的，所以大部分从运行时异常类继承而来的异常都可以直接使用。</p>
<p>Java 根据各个类库也定义了一些其他的异常，下面的表中列出了 Java 的非检查性异常。</p>
<h3 id="异常方法"><a href="#异常方法" class="headerlink" title="异常方法"></a>异常方法</h3><p>下面的列表是 Throwable 类的主要方法:</p>
<table>
<thead>
<tr>
<th align="left"><strong>序号</strong></th>
<th align="left"><strong>方法及说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>public String getMessage()</strong> 返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>public Throwable getCause()</strong> 返回一个Throwable 对象代表异常原因。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>public String toString()</strong> 使用getMessage()的结果返回类的串级名字。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>public void printStackTrace()</strong> 打印toString()结果和栈层次到System.err，即错误输出流。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>public StackTraceElement [] getStackTrace()</strong> 返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>public Throwable fillInStackTrace()</strong> 用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。</td>
</tr>
</tbody></table>
<h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><p>使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。</p>
<p>try/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">   &#x2F;&#x2F; 程序代码</span><br><span class="line">&#125;catch(ExceptionName e1)</span><br><span class="line">&#123;</span><br><span class="line">   &#x2F;&#x2F;Catch 块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多重捕获块"><a href="#多重捕获块" class="headerlink" title="多重捕获块"></a>多重捕获块</h3><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 异常的变量名<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="throws-throw-关键字："><a href="#throws-throw-关键字：" class="headerlink" title="throws/throw 关键字："></a>throws/throw 关键字：</h3><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。</p>
<p>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>
<p>下面方法的声明抛出一个 RemoteException 异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">className</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> RemoteException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">// Method implementation</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//Remainder of class definition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。</p>
<h3 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h3><p>finally 关键字用来创建在 try 代码块后面执行的代码块。</p>
<p>无论是否发生异常，finally 代码块中的代码总会被执行。</p>
<p>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</p>
<p>finally 代码块出现在 catch 代码块最后，语法如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>catch 不能独立于 try 存在。</li>
<li>在 try/catch 后面添加 finally 块并非强制性要求的。</li>
<li>try 代码后不能既没 catch 块也没 finally 块。</li>
<li>try, catch, finally 块之间不能添加任何代码。</li>
</ul>
<h3 id="声明自定义异常"><a href="#声明自定义异常" class="headerlink" title="声明自定义异常"></a>声明自定义异常</h3><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p>
<ul>
<li>所有异常都必须是 Throwable 的子类。</li>
<li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li>
<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>
</ul>
<h3 id="通用异常"><a href="#通用异常" class="headerlink" title="通用异常"></a>通用异常</h3><p>在Java中定义了两种类型的异常和错误。</p>
<ul>
<li><strong>JVM(Java**</strong>虚拟机<strong>**)</strong> <strong>异常：</strong>由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li>
<li><strong>程序级异常：</strong>由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li>
</ul>
]]></content>
      <categories>
        <category>第一阶段</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
</search>
